// AUTOMATICALLY GENERATED HOOK BINDING for "src/bindings/geometry_dash_module.h" module
// Generated by vanilla v0.0.1
#pragma once
#include <cocos2d.h>
#include "core/utilities/game.h"
#include "core/python.h"
#include "core/hooks.h"
#include "pybind11.h"
#include "pybind11/embed.h"
#include "bindings/manual_bindings.h"
#include <cocos-ext.h>
#include "bindings/enums.h"
#include "bindings/winstl.h"
#include "bindings/geometry_dash_bindings.h"
USING_NS_CC;
namespace pybind = pybind11;
PYBIND11_EMBEDDED_MODULE(geometry_dash, m) {

    manualbindings::geometry_dash_init(m);
    auto achievementbar = pybind::class_<AchievementBar, cocos2d::CCNodeRGBA>(m, "AchievementBar");
    achievementbar.def("create", pybind::overload_cast<const char*, const char*, const char*, bool>(&AchievementBar::create));
    achievementbar.def("create", pybind::overload_cast<pybind::function>(&AchievementBar::create));
    achievementbar.def("createO", [](const char* title, const char* desc, const char* icon, bool quest) { return AchievementBar::createO(title, desc, icon, quest); });
    achievementbar.attr("createA") = AchievementBar::createA;
    achievementbar.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementBar::createA, AchievementBar::createH, (LPVOID*)&AchievementBar::createO_);

    auto achievementcell = pybind::class_<AchievementCell, cocos2d::CCLayer>(m, "AchievementCell");
    achievementcell.def("loadFromDict", pybind::overload_cast<AchievementCell*, cocos2d::CCDictionary*>(&AchievementCell::loadFromDict));
    achievementcell.def("loadFromDict", pybind::overload_cast<pybind::function>(&AchievementCell::loadFromDict));
    achievementcell.def("loadFromDictO", [](AchievementCell* self, cocos2d::CCDictionary* p0) { return AchievementCell::loadFromDictO(self, p0); });
    achievementcell.attr("loadFromDictA") = AchievementCell::loadFromDictA;
    achievementcell.attr("loadFromDictN") = "loadFromDict";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementCell::loadFromDictA, AchievementCell::loadFromDictH, (LPVOID*)&AchievementCell::loadFromDictO_);

    achievementcell.def("init", pybind::overload_cast<AchievementCell*>(&AchievementCell::init));
    achievementcell.def("init", pybind::overload_cast<pybind::function>(&AchievementCell::init));
    achievementcell.def("initO", [](AchievementCell* self) { return AchievementCell::initO(self); });
    achievementcell.attr("initA") = AchievementCell::initA;
    achievementcell.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementCell::initA, AchievementCell::initH, (LPVOID*)&AchievementCell::initO_);

    auto achievementmanager = pybind::class_<AchievementManager, cocos2d::CCNode>(m, "AchievementManager");
    achievementmanager.def("sharedState", pybind::overload_cast<>(&AchievementManager::sharedState));
    achievementmanager.def("sharedState", pybind::overload_cast<pybind::function>(&AchievementManager::sharedState));
    achievementmanager.def("sharedStateO", []() { return AchievementManager::sharedStateO(); });
    achievementmanager.attr("sharedStateA") = AchievementManager::sharedStateA;
    achievementmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementManager::sharedStateA, AchievementManager::sharedStateH, (LPVOID*)&AchievementManager::sharedStateO_);

    auto achievementnotifier = pybind::class_<AchievementNotifier, cocos2d::CCNode>(m, "AchievementNotifier");
    achievementnotifier.def("sharedState", pybind::overload_cast<>(&AchievementNotifier::sharedState));
    achievementnotifier.def("sharedState", pybind::overload_cast<pybind::function>(&AchievementNotifier::sharedState));
    achievementnotifier.def("sharedStateO", []() { return AchievementNotifier::sharedStateO(); });
    achievementnotifier.attr("sharedStateA") = AchievementNotifier::sharedStateA;
    achievementnotifier.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementNotifier::sharedStateA, AchievementNotifier::sharedStateH, (LPVOID*)&AchievementNotifier::sharedStateO_);

    achievementnotifier.def("willSwitchToScene", pybind::overload_cast<AchievementNotifier*, cocos2d::CCScene*>(&AchievementNotifier::willSwitchToScene));
    achievementnotifier.def("willSwitchToScene", pybind::overload_cast<pybind::function>(&AchievementNotifier::willSwitchToScene));
    achievementnotifier.def("willSwitchToSceneO", [](AchievementNotifier* self, cocos2d::CCScene* p0) { return AchievementNotifier::willSwitchToSceneO(self, p0); });
    achievementnotifier.attr("willSwitchToSceneA") = AchievementNotifier::willSwitchToSceneA;
    achievementnotifier.attr("willSwitchToSceneN") = "willSwitchToScene";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementNotifier::willSwitchToSceneA, AchievementNotifier::willSwitchToSceneH, (LPVOID*)&AchievementNotifier::willSwitchToSceneO_);

    achievementnotifier.def("showNextAchievement", pybind::overload_cast<AchievementNotifier*>(&AchievementNotifier::showNextAchievement));
    achievementnotifier.def("showNextAchievement", pybind::overload_cast<pybind::function>(&AchievementNotifier::showNextAchievement));
    achievementnotifier.def("showNextAchievementO", [](AchievementNotifier* self) { return AchievementNotifier::showNextAchievementO(self); });
    achievementnotifier.attr("showNextAchievementA") = AchievementNotifier::showNextAchievementA;
    achievementnotifier.attr("showNextAchievementN") = "showNextAchievement";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementNotifier::showNextAchievementA, AchievementNotifier::showNextAchievementH, (LPVOID*)&AchievementNotifier::showNextAchievementO_);

    auto gjdropdownlayer = pybind::class_<GJDropDownLayer, cocos2d::CCLayerColor>(m, "GJDropDownLayer");
    gjdropdownlayer.def("enterLayer", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::enterLayer));
    gjdropdownlayer.def("enterLayer", pybind::overload_cast<pybind::function>(&GJDropDownLayer::enterLayer));
    gjdropdownlayer.def("enterLayerO", [](GJDropDownLayer* self) { return GJDropDownLayer::enterLayerO(self); });
    gjdropdownlayer.attr("enterLayerA") = GJDropDownLayer::enterLayerA;
    gjdropdownlayer.attr("enterLayerN") = "enterLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::enterLayerA, GJDropDownLayer::enterLayerH, (LPVOID*)&GJDropDownLayer::enterLayerO_);

    gjdropdownlayer.def("exitLayer", pybind::overload_cast<GJDropDownLayer*, cocos2d::CCObject*>(&GJDropDownLayer::exitLayer));
    gjdropdownlayer.def("exitLayer", pybind::overload_cast<pybind::function>(&GJDropDownLayer::exitLayer));
    gjdropdownlayer.def("exitLayerO", [](GJDropDownLayer* self, cocos2d::CCObject* p0) { return GJDropDownLayer::exitLayerO(self, p0); });
    gjdropdownlayer.attr("exitLayerA") = GJDropDownLayer::exitLayerA;
    gjdropdownlayer.attr("exitLayerN") = "exitLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::exitLayerA, GJDropDownLayer::exitLayerH, (LPVOID*)&GJDropDownLayer::exitLayerO_);

    gjdropdownlayer.def("showLayer", pybind::overload_cast<GJDropDownLayer*, bool>(&GJDropDownLayer::showLayer));
    gjdropdownlayer.def("showLayer", pybind::overload_cast<pybind::function>(&GJDropDownLayer::showLayer));
    gjdropdownlayer.def("showLayerO", [](GJDropDownLayer* self, bool p0) { return GJDropDownLayer::showLayerO(self, p0); });
    gjdropdownlayer.attr("showLayerA") = GJDropDownLayer::showLayerA;
    gjdropdownlayer.attr("showLayerN") = "showLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::showLayerA, GJDropDownLayer::showLayerH, (LPVOID*)&GJDropDownLayer::showLayerO_);

    gjdropdownlayer.def("hideLayer", pybind::overload_cast<GJDropDownLayer*, bool>(&GJDropDownLayer::hideLayer));
    gjdropdownlayer.def("hideLayer", pybind::overload_cast<pybind::function>(&GJDropDownLayer::hideLayer));
    gjdropdownlayer.def("hideLayerO", [](GJDropDownLayer* self, bool p0) { return GJDropDownLayer::hideLayerO(self, p0); });
    gjdropdownlayer.attr("hideLayerA") = GJDropDownLayer::hideLayerA;
    gjdropdownlayer.attr("hideLayerN") = "hideLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::hideLayerA, GJDropDownLayer::hideLayerH, (LPVOID*)&GJDropDownLayer::hideLayerO_);

    gjdropdownlayer.def("layerVisible", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::layerVisible));
    gjdropdownlayer.def("layerVisible", pybind::overload_cast<pybind::function>(&GJDropDownLayer::layerVisible));
    gjdropdownlayer.def("layerVisibleO", [](GJDropDownLayer* self) { return GJDropDownLayer::layerVisibleO(self); });
    gjdropdownlayer.attr("layerVisibleA") = GJDropDownLayer::layerVisibleA;
    gjdropdownlayer.attr("layerVisibleN") = "layerVisible";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::layerVisibleA, GJDropDownLayer::layerVisibleH, (LPVOID*)&GJDropDownLayer::layerVisibleO_);

    gjdropdownlayer.def("layerHidden", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::layerHidden));
    gjdropdownlayer.def("layerHidden", pybind::overload_cast<pybind::function>(&GJDropDownLayer::layerHidden));
    gjdropdownlayer.def("layerHiddenO", [](GJDropDownLayer* self) { return GJDropDownLayer::layerHiddenO(self); });
    gjdropdownlayer.attr("layerHiddenA") = GJDropDownLayer::layerHiddenA;
    gjdropdownlayer.attr("layerHiddenN") = "layerHidden";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::layerHiddenA, GJDropDownLayer::layerHiddenH, (LPVOID*)&GJDropDownLayer::layerHiddenO_);

    gjdropdownlayer.def("disableUI", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::disableUI));
    gjdropdownlayer.def("disableUI", pybind::overload_cast<pybind::function>(&GJDropDownLayer::disableUI));
    gjdropdownlayer.def("disableUIO", [](GJDropDownLayer* self) { return GJDropDownLayer::disableUIO(self); });
    gjdropdownlayer.attr("disableUIA") = GJDropDownLayer::disableUIA;
    gjdropdownlayer.attr("disableUIN") = "disableUI";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::disableUIA, GJDropDownLayer::disableUIH, (LPVOID*)&GJDropDownLayer::disableUIO_);

    gjdropdownlayer.def("enableUI", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::enableUI));
    gjdropdownlayer.def("enableUI", pybind::overload_cast<pybind::function>(&GJDropDownLayer::enableUI));
    gjdropdownlayer.def("enableUIO", [](GJDropDownLayer* self) { return GJDropDownLayer::enableUIO(self); });
    gjdropdownlayer.attr("enableUIA") = GJDropDownLayer::enableUIA;
    gjdropdownlayer.attr("enableUIN") = "enableUI";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::enableUIA, GJDropDownLayer::enableUIH, (LPVOID*)&GJDropDownLayer::enableUIO_);

    gjdropdownlayer.def("draw", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::draw));
    gjdropdownlayer.def("draw", pybind::overload_cast<pybind::function>(&GJDropDownLayer::draw));
    gjdropdownlayer.def("drawO", [](GJDropDownLayer* self) { return GJDropDownLayer::drawO(self); });
    gjdropdownlayer.attr("drawA") = GJDropDownLayer::drawA;
    gjdropdownlayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::drawA, GJDropDownLayer::drawH, (LPVOID*)&GJDropDownLayer::drawO_);

    gjdropdownlayer.def("init", pybind::overload_cast<GJDropDownLayer*, const char*, float>(&GJDropDownLayer::init));
    gjdropdownlayer.def("init", pybind::overload_cast<pybind::function>(&GJDropDownLayer::init));
    gjdropdownlayer.def("initO", [](GJDropDownLayer* self, const char* title, float height) { return GJDropDownLayer::initO(self, title, height); });
    gjdropdownlayer.attr("initA") = GJDropDownLayer::initA;
    gjdropdownlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::initA, GJDropDownLayer::initH, (LPVOID*)&GJDropDownLayer::initO_);

    gjdropdownlayer.def("registerWithTouchDispatcher", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::registerWithTouchDispatcher));
    gjdropdownlayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&GJDropDownLayer::registerWithTouchDispatcher));
    gjdropdownlayer.def("registerWithTouchDispatcherO", [](GJDropDownLayer* self) { return GJDropDownLayer::registerWithTouchDispatcherO(self); });
    gjdropdownlayer.attr("registerWithTouchDispatcherA") = GJDropDownLayer::registerWithTouchDispatcherA;
    gjdropdownlayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::registerWithTouchDispatcherA, GJDropDownLayer::registerWithTouchDispatcherH, (LPVOID*)&GJDropDownLayer::registerWithTouchDispatcherO_);

    gjdropdownlayer.def("keyBackClicked", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::keyBackClicked));
    gjdropdownlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&GJDropDownLayer::keyBackClicked));
    gjdropdownlayer.def("keyBackClickedO", [](GJDropDownLayer* self) { return GJDropDownLayer::keyBackClickedO(self); });
    gjdropdownlayer.attr("keyBackClickedA") = GJDropDownLayer::keyBackClickedA;
    gjdropdownlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::keyBackClickedA, GJDropDownLayer::keyBackClickedH, (LPVOID*)&GJDropDownLayer::keyBackClickedO_);

    auto achievementslayer = pybind::class_<AchievementsLayer, GJDropDownLayer>(m, "AchievementsLayer");
    achievementslayer.def("customSetup", pybind::overload_cast<AchievementsLayer*>(&AchievementsLayer::customSetup));
    achievementslayer.def("customSetup", pybind::overload_cast<pybind::function>(&AchievementsLayer::customSetup));
    achievementslayer.def("customSetupO", [](AchievementsLayer* self) { return AchievementsLayer::customSetupO(self); });
    achievementslayer.attr("customSetupA") = AchievementsLayer::customSetupA;
    achievementslayer.attr("customSetupN") = "customSetup";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementsLayer::customSetupA, AchievementsLayer::customSetupH, (LPVOID*)&AchievementsLayer::customSetupO_);

    achievementslayer.def("loadPage", pybind::overload_cast<AchievementsLayer*, int>(&AchievementsLayer::loadPage));
    achievementslayer.def("loadPage", pybind::overload_cast<pybind::function>(&AchievementsLayer::loadPage));
    achievementslayer.def("loadPageO", [](AchievementsLayer* self, int p0) { return AchievementsLayer::loadPageO(self, p0); });
    achievementslayer.attr("loadPageA") = AchievementsLayer::loadPageA;
    achievementslayer.attr("loadPageN") = "loadPage";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementsLayer::loadPageA, AchievementsLayer::loadPageH, (LPVOID*)&AchievementsLayer::loadPageO_);

    auto ccspriteplus = pybind::class_<CCSpritePlus, cocos2d::CCSprite>(m, "CCSpritePlus");
    ccspriteplus.def("initWithSpriteFrameName", pybind::overload_cast<CCSpritePlus*, const char*>(&CCSpritePlus::initWithSpriteFrameName));
    ccspriteplus.def("initWithSpriteFrameName", pybind::overload_cast<pybind::function>(&CCSpritePlus::initWithSpriteFrameName));
    ccspriteplus.def("initWithSpriteFrameNameO", [](CCSpritePlus* self, const char* p0) { return CCSpritePlus::initWithSpriteFrameNameO(self, p0); });
    ccspriteplus.attr("initWithSpriteFrameNameA") = CCSpritePlus::initWithSpriteFrameNameA;
    ccspriteplus.attr("initWithSpriteFrameNameN") = "initWithSpriteFrameName";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::initWithSpriteFrameNameA, CCSpritePlus::initWithSpriteFrameNameH, (LPVOID*)&CCSpritePlus::initWithSpriteFrameNameO_);

    ccspriteplus.def("setScaleX", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScaleX));
    ccspriteplus.def("setScaleX", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScaleX));
    ccspriteplus.def("setScaleXO", [](CCSpritePlus* self, float scale) { return CCSpritePlus::setScaleXO(self, scale); });
    ccspriteplus.attr("setScaleXA") = CCSpritePlus::setScaleXA;
    ccspriteplus.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleXA, CCSpritePlus::setScaleXH, (LPVOID*)&CCSpritePlus::setScaleXO_);

    ccspriteplus.def("setScaleY", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScaleY));
    ccspriteplus.def("setScaleY", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScaleY));
    ccspriteplus.def("setScaleYO", [](CCSpritePlus* self, float scale) { return CCSpritePlus::setScaleYO(self, scale); });
    ccspriteplus.attr("setScaleYA") = CCSpritePlus::setScaleYA;
    ccspriteplus.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleYA, CCSpritePlus::setScaleYH, (LPVOID*)&CCSpritePlus::setScaleYO_);

    ccspriteplus.def("setScale", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScale));
    ccspriteplus.def("setScale", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScale));
    ccspriteplus.def("setScaleO", [](CCSpritePlus* self, float scale) { return CCSpritePlus::setScaleO(self, scale); });
    ccspriteplus.attr("setScaleA") = CCSpritePlus::setScaleA;
    ccspriteplus.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleA, CCSpritePlus::setScaleH, (LPVOID*)&CCSpritePlus::setScaleO_);

    ccspriteplus.def("setPosition", pybind::overload_cast<CCSpritePlus*, const cocos2d::CCPoint&>(&CCSpritePlus::setPosition));
    ccspriteplus.def("setPosition", pybind::overload_cast<pybind::function>(&CCSpritePlus::setPosition));
    ccspriteplus.def("setPositionO", [](CCSpritePlus* self, const cocos2d::CCPoint& pos) { return CCSpritePlus::setPositionO(self, pos); });
    ccspriteplus.attr("setPositionA") = CCSpritePlus::setPositionA;
    ccspriteplus.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setPositionA, CCSpritePlus::setPositionH, (LPVOID*)&CCSpritePlus::setPositionO_);

    ccspriteplus.def("setRotation", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setRotation));
    ccspriteplus.def("setRotation", pybind::overload_cast<pybind::function>(&CCSpritePlus::setRotation));
    ccspriteplus.def("setRotationO", [](CCSpritePlus* self, float rotation) { return CCSpritePlus::setRotationO(self, rotation); });
    ccspriteplus.attr("setRotationA") = CCSpritePlus::setRotationA;
    ccspriteplus.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setRotationA, CCSpritePlus::setRotationH, (LPVOID*)&CCSpritePlus::setRotationO_);

    ccspriteplus.def("initWithTexture", pybind::overload_cast<CCSpritePlus*, cocos2d::CCTexture2D*>(&CCSpritePlus::initWithTexture));
    ccspriteplus.def("initWithTexture", pybind::overload_cast<pybind::function>(&CCSpritePlus::initWithTexture));
    ccspriteplus.def("initWithTextureO", [](CCSpritePlus* self, cocos2d::CCTexture2D* texture) { return CCSpritePlus::initWithTextureO(self, texture); });
    ccspriteplus.attr("initWithTextureA") = CCSpritePlus::initWithTextureA;
    ccspriteplus.attr("initWithTextureN") = "initWithTexture";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::initWithTextureA, CCSpritePlus::initWithTextureH, (LPVOID*)&CCSpritePlus::initWithTextureO_);

    ccspriteplus.def("setFlipX", pybind::overload_cast<CCSpritePlus*, bool>(&CCSpritePlus::setFlipX));
    ccspriteplus.def("setFlipX", pybind::overload_cast<pybind::function>(&CCSpritePlus::setFlipX));
    ccspriteplus.def("setFlipXO", [](CCSpritePlus* self, bool flip) { return CCSpritePlus::setFlipXO(self, flip); });
    ccspriteplus.attr("setFlipXA") = CCSpritePlus::setFlipXA;
    ccspriteplus.attr("setFlipXN") = "setFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setFlipXA, CCSpritePlus::setFlipXH, (LPVOID*)&CCSpritePlus::setFlipXO_);

    ccspriteplus.def("setFlipY", pybind::overload_cast<CCSpritePlus*, bool>(&CCSpritePlus::setFlipY));
    ccspriteplus.def("setFlipY", pybind::overload_cast<pybind::function>(&CCSpritePlus::setFlipY));
    ccspriteplus.def("setFlipYO", [](CCSpritePlus* self, bool flip) { return CCSpritePlus::setFlipYO(self, flip); });
    ccspriteplus.attr("setFlipYA") = CCSpritePlus::setFlipYA;
    ccspriteplus.attr("setFlipYN") = "setFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setFlipYA, CCSpritePlus::setFlipYH, (LPVOID*)&CCSpritePlus::setFlipYO_);

    ccspriteplus.def("createWithSpriteFrame", pybind::overload_cast<cocos2d::CCSpriteFrame*>(&CCSpritePlus::createWithSpriteFrame));
    ccspriteplus.def("createWithSpriteFrame", pybind::overload_cast<pybind::function>(&CCSpritePlus::createWithSpriteFrame));
    ccspriteplus.def("createWithSpriteFrameO", [](cocos2d::CCSpriteFrame* frame) { return CCSpritePlus::createWithSpriteFrameO(frame); });
    ccspriteplus.attr("createWithSpriteFrameA") = CCSpritePlus::createWithSpriteFrameA;
    ccspriteplus.attr("createWithSpriteFrameN") = "createWithSpriteFrame";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::createWithSpriteFrameA, CCSpritePlus::createWithSpriteFrameH, (LPVOID*)&CCSpritePlus::createWithSpriteFrameO_);

    auto gameobject = pybind::class_<GameObject, CCSpritePlus>(m, "GameObject");
    gameobject.def("update", pybind::overload_cast<GameObject*, float>(&GameObject::update));
    gameobject.def("update", pybind::overload_cast<pybind::function>(&GameObject::update));
    gameobject.def("updateO", [](GameObject* self, float p0) { return GameObject::updateO(self, p0); });
    gameobject.attr("updateA") = GameObject::updateA;
    gameobject.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateA, GameObject::updateH, (LPVOID*)&GameObject::updateO_);

    gameobject.def("setScaleX", pybind::overload_cast<GameObject*, float>(&GameObject::setScaleX));
    gameobject.def("setScaleX", pybind::overload_cast<pybind::function>(&GameObject::setScaleX));
    gameobject.def("setScaleXO", [](GameObject* self, float p0) { return GameObject::setScaleXO(self, p0); });
    gameobject.attr("setScaleXA") = GameObject::setScaleXA;
    gameobject.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleXA, GameObject::setScaleXH, (LPVOID*)&GameObject::setScaleXO_);

    gameobject.def("setScaleY", pybind::overload_cast<GameObject*, float>(&GameObject::setScaleY));
    gameobject.def("setScaleY", pybind::overload_cast<pybind::function>(&GameObject::setScaleY));
    gameobject.def("setScaleYO", [](GameObject* self, float p0) { return GameObject::setScaleYO(self, p0); });
    gameobject.attr("setScaleYA") = GameObject::setScaleYA;
    gameobject.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleYA, GameObject::setScaleYH, (LPVOID*)&GameObject::setScaleYO_);

    gameobject.def("setScale", pybind::overload_cast<GameObject*, float>(&GameObject::setScale));
    gameobject.def("setScale", pybind::overload_cast<pybind::function>(&GameObject::setScale));
    gameobject.def("setScaleO", [](GameObject* self, float p0) { return GameObject::setScaleO(self, p0); });
    gameobject.attr("setScaleA") = GameObject::setScaleA;
    gameobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleA, GameObject::setScaleH, (LPVOID*)&GameObject::setScaleO_);

    gameobject.def("setPosition", pybind::overload_cast<GameObject*, const cocos2d::CCPoint&>(&GameObject::setPosition));
    gameobject.def("setPosition", pybind::overload_cast<pybind::function>(&GameObject::setPosition));
    gameobject.def("setPositionO", [](GameObject* self, const cocos2d::CCPoint& p0) { return GameObject::setPositionO(self, p0); });
    gameobject.attr("setPositionA") = GameObject::setPositionA;
    gameobject.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setPositionA, GameObject::setPositionH, (LPVOID*)&GameObject::setPositionO_);

    gameobject.def("setVisible", pybind::overload_cast<GameObject*, bool>(&GameObject::setVisible));
    gameobject.def("setVisible", pybind::overload_cast<pybind::function>(&GameObject::setVisible));
    gameobject.def("setVisibleO", [](GameObject* self, bool p0) { return GameObject::setVisibleO(self, p0); });
    gameobject.attr("setVisibleA") = GameObject::setVisibleA;
    gameobject.attr("setVisibleN") = "setVisible";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setVisibleA, GameObject::setVisibleH, (LPVOID*)&GameObject::setVisibleO_);

    gameobject.def("setRotation", pybind::overload_cast<GameObject*, float>(&GameObject::setRotation));
    gameobject.def("setRotation", pybind::overload_cast<pybind::function>(&GameObject::setRotation));
    gameobject.def("setRotationO", [](GameObject* self, float p0) { return GameObject::setRotationO(self, p0); });
    gameobject.attr("setRotationA") = GameObject::setRotationA;
    gameobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRotationA, GameObject::setRotationH, (LPVOID*)&GameObject::setRotationO_);

    gameobject.def("setOpacity", pybind::overload_cast<GameObject*, GLubyte>(&GameObject::setOpacity));
    gameobject.def("setOpacity", pybind::overload_cast<pybind::function>(&GameObject::setOpacity));
    gameobject.def("setOpacityO", [](GameObject* self, GLubyte p0) { return GameObject::setOpacityO(self, p0); });
    gameobject.attr("setOpacityA") = GameObject::setOpacityA;
    gameobject.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setOpacityA, GameObject::setOpacityH, (LPVOID*)&GameObject::setOpacityO_);

    gameobject.def("initWithTexture", pybind::overload_cast<GameObject*, cocos2d::CCTexture2D*>(&GameObject::initWithTexture));
    gameobject.def("initWithTexture", pybind::overload_cast<pybind::function>(&GameObject::initWithTexture));
    gameobject.def("initWithTextureO", [](GameObject* self, cocos2d::CCTexture2D* p0) { return GameObject::initWithTextureO(self, p0); });
    gameobject.attr("initWithTextureA") = GameObject::initWithTextureA;
    gameobject.attr("initWithTextureN") = "initWithTexture";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::initWithTextureA, GameObject::initWithTextureH, (LPVOID*)&GameObject::initWithTextureO_);

    gameobject.def("setChildColor", pybind::overload_cast<GameObject*, const cocos2d::ccColor3B&>(&GameObject::setChildColor));
    gameobject.def("setChildColor", pybind::overload_cast<pybind::function>(&GameObject::setChildColor));
    gameobject.def("setChildColorO", [](GameObject* self, const cocos2d::ccColor3B& p0) { return GameObject::setChildColorO(self, p0); });
    gameobject.attr("setChildColorA") = GameObject::setChildColorA;
    gameobject.attr("setChildColorN") = "setChildColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setChildColorA, GameObject::setChildColorH, (LPVOID*)&GameObject::setChildColorO_);

    gameobject.def("setFlipX", pybind::overload_cast<GameObject*, bool>(&GameObject::setFlipX));
    gameobject.def("setFlipX", pybind::overload_cast<pybind::function>(&GameObject::setFlipX));
    gameobject.def("setFlipXO", [](GameObject* self, bool p0) { return GameObject::setFlipXO(self, p0); });
    gameobject.attr("setFlipXA") = GameObject::setFlipXA;
    gameobject.attr("setFlipXN") = "setFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setFlipXA, GameObject::setFlipXH, (LPVOID*)&GameObject::setFlipXO_);

    gameobject.def("setFlipY", pybind::overload_cast<GameObject*, bool>(&GameObject::setFlipY));
    gameobject.def("setFlipY", pybind::overload_cast<pybind::function>(&GameObject::setFlipY));
    gameobject.def("setFlipYO", [](GameObject* self, bool p0) { return GameObject::setFlipYO(self, p0); });
    gameobject.attr("setFlipYA") = GameObject::setFlipYA;
    gameobject.attr("setFlipYN") = "setFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setFlipYA, GameObject::setFlipYH, (LPVOID*)&GameObject::setFlipYO_);

    gameobject.def("customSetup", pybind::overload_cast<GameObject*>(&GameObject::customSetup));
    gameobject.def("customSetup", pybind::overload_cast<pybind::function>(&GameObject::customSetup));
    gameobject.def("customSetupO", [](GameObject* self) { return GameObject::customSetupO(self); });
    gameobject.attr("customSetupA") = GameObject::customSetupA;
    gameobject.attr("customSetupN") = "customSetup";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::customSetupA, GameObject::customSetupH, (LPVOID*)&GameObject::customSetupO_);

    gameobject.def("setupCustomSprites", pybind::overload_cast<GameObject*>(&GameObject::setupCustomSprites));
    gameobject.def("setupCustomSprites", pybind::overload_cast<pybind::function>(&GameObject::setupCustomSprites));
    gameobject.def("setupCustomSpritesO", [](GameObject* self) { return GameObject::setupCustomSpritesO(self); });
    gameobject.attr("setupCustomSpritesA") = GameObject::setupCustomSpritesA;
    gameobject.attr("setupCustomSpritesN") = "setupCustomSprites";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setupCustomSpritesA, GameObject::setupCustomSpritesH, (LPVOID*)&GameObject::setupCustomSpritesO_);

    gameobject.def("addMainSpriteToParent", pybind::overload_cast<GameObject*, bool>(&GameObject::addMainSpriteToParent));
    gameobject.def("addMainSpriteToParent", pybind::overload_cast<pybind::function>(&GameObject::addMainSpriteToParent));
    gameobject.def("addMainSpriteToParentO", [](GameObject* self, bool p0) { return GameObject::addMainSpriteToParentO(self, p0); });
    gameobject.attr("addMainSpriteToParentA") = GameObject::addMainSpriteToParentA;
    gameobject.attr("addMainSpriteToParentN") = "addMainSpriteToParent";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::addMainSpriteToParentA, GameObject::addMainSpriteToParentH, (LPVOID*)&GameObject::addMainSpriteToParentO_);

    gameobject.def("resetObject", pybind::overload_cast<GameObject*>(&GameObject::resetObject));
    gameobject.def("resetObject", pybind::overload_cast<pybind::function>(&GameObject::resetObject));
    gameobject.def("resetObjectO", [](GameObject* self) { return GameObject::resetObjectO(self); });
    gameobject.attr("resetObjectA") = GameObject::resetObjectA;
    gameobject.attr("resetObjectN") = "resetObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::resetObjectA, GameObject::resetObjectH, (LPVOID*)&GameObject::resetObjectO_);

    gameobject.def("activateObject", pybind::overload_cast<GameObject*>(&GameObject::activateObject));
    gameobject.def("activateObject", pybind::overload_cast<pybind::function>(&GameObject::activateObject));
    gameobject.def("activateObjectO", [](GameObject* self) { return GameObject::activateObjectO(self); });
    gameobject.attr("activateObjectA") = GameObject::activateObjectA;
    gameobject.attr("activateObjectN") = "activateObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::activateObjectA, GameObject::activateObjectH, (LPVOID*)&GameObject::activateObjectO_);

    gameobject.def("deactivateObject", pybind::overload_cast<GameObject*, bool>(&GameObject::deactivateObject));
    gameobject.def("deactivateObject", pybind::overload_cast<pybind::function>(&GameObject::deactivateObject));
    gameobject.def("deactivateObjectO", [](GameObject* self, bool p0) { return GameObject::deactivateObjectO(self, p0); });
    gameobject.attr("deactivateObjectA") = GameObject::deactivateObjectA;
    gameobject.attr("deactivateObjectN") = "deactivateObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::deactivateObjectA, GameObject::deactivateObjectH, (LPVOID*)&GameObject::deactivateObjectO_);

    gameobject.def("getObjectRect", pybind::overload_cast<GameObject*, float, float>(&GameObject::getObjectRect));
    gameobject.def("getObjectRect", pybind::overload_cast<pybind::function>(&GameObject::getObjectRect));
    gameobject.def("getObjectRectO", [](GameObject* self, float p0, float p1) { return GameObject::getObjectRectO(self, p0, p1); });
    gameobject.attr("getObjectRectA") = GameObject::getObjectRectA;
    gameobject.attr("getObjectRectN") = "getObjectRect";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getObjectRectA, GameObject::getObjectRectH, (LPVOID*)&GameObject::getObjectRectO_);

    gameobject.def("getObjectRect2", pybind::overload_cast<GameObject*, float, float>(&GameObject::getObjectRect2));
    gameobject.def("getObjectRect2", pybind::overload_cast<pybind::function>(&GameObject::getObjectRect2));
    gameobject.def("getObjectRect2O", [](GameObject* self, float p0, float p1) { return GameObject::getObjectRect2O(self, p0, p1); });
    gameobject.attr("getObjectRect2A") = GameObject::getObjectRect2A;
    gameobject.attr("getObjectRect2N") = "getObjectRect2";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getObjectRect2A, GameObject::getObjectRect2H, (LPVOID*)&GameObject::getObjectRect2O_);

    gameobject.def("getObjectTextureRect", pybind::overload_cast<GameObject*>(&GameObject::getObjectTextureRect));
    gameobject.def("getObjectTextureRect", pybind::overload_cast<pybind::function>(&GameObject::getObjectTextureRect));
    gameobject.def("getObjectTextureRectO", [](GameObject* self) { return GameObject::getObjectTextureRectO(self); });
    gameobject.attr("getObjectTextureRectA") = GameObject::getObjectTextureRectA;
    gameobject.attr("getObjectTextureRectN") = "getObjectTextureRect";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getObjectTextureRectA, GameObject::getObjectTextureRectH, (LPVOID*)&GameObject::getObjectTextureRectO_);

    gameobject.def("getRealPosition", pybind::overload_cast<GameObject*>(&GameObject::getRealPosition));
    gameobject.def("getRealPosition", pybind::overload_cast<pybind::function>(&GameObject::getRealPosition));
    gameobject.def("getRealPositionO", [](GameObject* self) { return GameObject::getRealPositionO(self); });
    gameobject.attr("getRealPositionA") = GameObject::getRealPositionA;
    gameobject.attr("getRealPositionN") = "getRealPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getRealPositionA, GameObject::getRealPositionH, (LPVOID*)&GameObject::getRealPositionO_);

    gameobject.def("setStartPos", pybind::overload_cast<GameObject*, cocos2d::CCPoint>(&GameObject::setStartPos));
    gameobject.def("setStartPos", pybind::overload_cast<pybind::function>(&GameObject::setStartPos));
    gameobject.def("setStartPosO", [](GameObject* self, cocos2d::CCPoint p0) { return GameObject::setStartPosO(self, p0); });
    gameobject.attr("setStartPosA") = GameObject::setStartPosA;
    gameobject.attr("setStartPosN") = "setStartPos";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setStartPosA, GameObject::setStartPosH, (LPVOID*)&GameObject::setStartPosO_);

    gameobject.def("updateStartValues", pybind::overload_cast<GameObject*>(&GameObject::updateStartValues));
    gameobject.def("updateStartValues", pybind::overload_cast<pybind::function>(&GameObject::updateStartValues));
    gameobject.def("updateStartValuesO", [](GameObject* self) { return GameObject::updateStartValuesO(self); });
    gameobject.attr("updateStartValuesA") = GameObject::updateStartValuesA;
    gameobject.attr("updateStartValuesN") = "updateStartValues";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateStartValuesA, GameObject::updateStartValuesH, (LPVOID*)&GameObject::updateStartValuesO_);

    gameobject.def("getSaveString", pybind::overload_cast<GameObject*>(&GameObject::getSaveString));
    gameobject.def("getSaveString", pybind::overload_cast<pybind::function>(&GameObject::getSaveString));
    gameobject.def("getSaveStringO", [](GameObject* self) { return GameObject::getSaveStringO(self); });
    gameobject.attr("getSaveStringA") = GameObject::getSaveStringA;
    gameobject.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getSaveStringA, GameObject::getSaveStringH, (LPVOID*)&GameObject::getSaveStringO_);

    gameobject.def("isFlipX", pybind::overload_cast<GameObject*>(&GameObject::isFlipX));
    gameobject.def("isFlipX", pybind::overload_cast<pybind::function>(&GameObject::isFlipX));
    gameobject.def("isFlipXO", [](GameObject* self) { return GameObject::isFlipXO(self); });
    gameobject.attr("isFlipXA") = GameObject::isFlipXA;
    gameobject.attr("isFlipXN") = "isFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFlipXA, GameObject::isFlipXH, (LPVOID*)&GameObject::isFlipXO_);

    gameobject.def("isFlipY", pybind::overload_cast<GameObject*>(&GameObject::isFlipY));
    gameobject.def("isFlipY", pybind::overload_cast<pybind::function>(&GameObject::isFlipY));
    gameobject.def("isFlipYO", [](GameObject* self) { return GameObject::isFlipYO(self); });
    gameobject.attr("isFlipYA") = GameObject::isFlipYA;
    gameobject.attr("isFlipYN") = "isFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFlipYA, GameObject::isFlipYH, (LPVOID*)&GameObject::isFlipYO_);

    gameobject.def("setRScaleX", pybind::overload_cast<GameObject*, float>(&GameObject::setRScaleX));
    gameobject.def("setRScaleX", pybind::overload_cast<pybind::function>(&GameObject::setRScaleX));
    gameobject.def("setRScaleXO", [](GameObject* self, float p0) { return GameObject::setRScaleXO(self, p0); });
    gameobject.attr("setRScaleXA") = GameObject::setRScaleXA;
    gameobject.attr("setRScaleXN") = "setRScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleXA, GameObject::setRScaleXH, (LPVOID*)&GameObject::setRScaleXO_);

    gameobject.def("setRScaleY", pybind::overload_cast<GameObject*, float>(&GameObject::setRScaleY));
    gameobject.def("setRScaleY", pybind::overload_cast<pybind::function>(&GameObject::setRScaleY));
    gameobject.def("setRScaleYO", [](GameObject* self, float p0) { return GameObject::setRScaleYO(self, p0); });
    gameobject.attr("setRScaleYA") = GameObject::setRScaleYA;
    gameobject.attr("setRScaleYN") = "setRScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleYA, GameObject::setRScaleYH, (LPVOID*)&GameObject::setRScaleYO_);

    gameobject.def("setRScale", pybind::overload_cast<GameObject*, float>(&GameObject::setRScale));
    gameobject.def("setRScale", pybind::overload_cast<pybind::function>(&GameObject::setRScale));
    gameobject.def("setRScaleO", [](GameObject* self, float p0) { return GameObject::setRScaleO(self, p0); });
    gameobject.attr("setRScaleA") = GameObject::setRScaleA;
    gameobject.attr("setRScaleN") = "setRScale";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleA, GameObject::setRScaleH, (LPVOID*)&GameObject::setRScaleO_);

    gameobject.def("getRScaleX", pybind::overload_cast<GameObject*>(&GameObject::getRScaleX));
    gameobject.def("getRScaleX", pybind::overload_cast<pybind::function>(&GameObject::getRScaleX));
    gameobject.def("getRScaleXO", [](GameObject* self) { return GameObject::getRScaleXO(self); });
    gameobject.attr("getRScaleXA") = GameObject::getRScaleXA;
    gameobject.attr("getRScaleXN") = "getRScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getRScaleXA, GameObject::getRScaleXH, (LPVOID*)&GameObject::getRScaleXO_);

    gameobject.def("getRScaleY", pybind::overload_cast<GameObject*>(&GameObject::getRScaleY));
    gameobject.def("getRScaleY", pybind::overload_cast<pybind::function>(&GameObject::getRScaleY));
    gameobject.def("getRScaleYO", [](GameObject* self) { return GameObject::getRScaleYO(self); });
    gameobject.attr("getRScaleYA") = GameObject::getRScaleYA;
    gameobject.attr("getRScaleYN") = "getRScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getRScaleYA, GameObject::getRScaleYH, (LPVOID*)&GameObject::getRScaleYO_);

    gameobject.def("calculateSpawnXPos", pybind::overload_cast<GameObject*>(&GameObject::calculateSpawnXPos));
    gameobject.def("calculateSpawnXPos", pybind::overload_cast<pybind::function>(&GameObject::calculateSpawnXPos));
    gameobject.def("calculateSpawnXPosO", [](GameObject* self) { return GameObject::calculateSpawnXPosO(self); });
    gameobject.attr("calculateSpawnXPosA") = GameObject::calculateSpawnXPosA;
    gameobject.attr("calculateSpawnXPosN") = "calculateSpawnXPos";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::calculateSpawnXPosA, GameObject::calculateSpawnXPosH, (LPVOID*)&GameObject::calculateSpawnXPosO_);

    gameobject.def("triggerActivated", pybind::overload_cast<GameObject*, float>(&GameObject::triggerActivated));
    gameobject.def("triggerActivated", pybind::overload_cast<pybind::function>(&GameObject::triggerActivated));
    gameobject.def("triggerActivatedO", [](GameObject* self, float p0) { return GameObject::triggerActivatedO(self, p0); });
    gameobject.attr("triggerActivatedA") = GameObject::triggerActivatedA;
    gameobject.attr("triggerActivatedN") = "triggerActivated";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::triggerActivatedA, GameObject::triggerActivatedH, (LPVOID*)&GameObject::triggerActivatedO_);

    gameobject.def("powerOnObject", pybind::overload_cast<GameObject*>(&GameObject::powerOnObject));
    gameobject.def("powerOnObject", pybind::overload_cast<pybind::function>(&GameObject::powerOnObject));
    gameobject.def("powerOnObjectO", [](GameObject* self) { return GameObject::powerOnObjectO(self); });
    gameobject.attr("powerOnObjectA") = GameObject::powerOnObjectA;
    gameobject.attr("powerOnObjectN") = "powerOnObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::powerOnObjectA, GameObject::powerOnObjectH, (LPVOID*)&GameObject::powerOnObjectO_);

    gameobject.def("powerOffObject", pybind::overload_cast<GameObject*>(&GameObject::powerOffObject));
    gameobject.def("powerOffObject", pybind::overload_cast<pybind::function>(&GameObject::powerOffObject));
    gameobject.def("powerOffObjectO", [](GameObject* self) { return GameObject::powerOffObjectO(self); });
    gameobject.attr("powerOffObjectA") = GameObject::powerOffObjectA;
    gameobject.attr("powerOffObjectN") = "powerOffObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::powerOffObjectA, GameObject::powerOffObjectH, (LPVOID*)&GameObject::powerOffObjectO_);

    gameobject.def("setObjectColor", pybind::overload_cast<GameObject*, const cocos2d::ccColor3B&>(&GameObject::setObjectColor));
    gameobject.def("setObjectColor", pybind::overload_cast<pybind::function>(&GameObject::setObjectColor));
    gameobject.def("setObjectColorO", [](GameObject* self, const cocos2d::ccColor3B& p0) { return GameObject::setObjectColorO(self, p0); });
    gameobject.attr("setObjectColorA") = GameObject::setObjectColorA;
    gameobject.attr("setObjectColorN") = "setObjectColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setObjectColorA, GameObject::setObjectColorH, (LPVOID*)&GameObject::setObjectColorO_);

    gameobject.def("setGlowColor", pybind::overload_cast<GameObject*, cocos2d::_ccColor3B const&>(&GameObject::setGlowColor));
    gameobject.def("setGlowColor", pybind::overload_cast<pybind::function>(&GameObject::setGlowColor));
    gameobject.def("setGlowColorO", [](GameObject* self, cocos2d::_ccColor3B const& p0) { return GameObject::setGlowColorO(self, p0); });
    gameobject.attr("setGlowColorA") = GameObject::setGlowColorA;
    gameobject.attr("setGlowColorN") = "setGlowColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setGlowColorA, GameObject::setGlowColorH, (LPVOID*)&GameObject::setGlowColorO_);

    gameobject.def("getOrientedBox", pybind::overload_cast<GameObject*>(&GameObject::getOrientedBox));
    gameobject.def("getOrientedBox", pybind::overload_cast<pybind::function>(&GameObject::getOrientedBox));
    gameobject.def("getOrientedBoxO", [](GameObject* self) { return GameObject::getOrientedBoxO(self); });
    gameobject.attr("getOrientedBoxA") = GameObject::getOrientedBoxA;
    gameobject.attr("getOrientedBoxN") = "getOrientedBox";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getOrientedBoxA, GameObject::getOrientedBoxH, (LPVOID*)&GameObject::getOrientedBoxO_);

    gameobject.def("addToGroup", pybind::overload_cast<GameObject*, int>(&GameObject::addToGroup));
    gameobject.def("addToGroup", pybind::overload_cast<pybind::function>(&GameObject::addToGroup));
    gameobject.def("addToGroupO", [](GameObject* self, int p0) { return GameObject::addToGroupO(self, p0); });
    gameobject.attr("addToGroupA") = GameObject::addToGroupA;
    gameobject.attr("addToGroupN") = "addToGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::addToGroupA, GameObject::addToGroupH, (LPVOID*)&GameObject::addToGroupO_);

    gameobject.def("removeFromGroup", pybind::overload_cast<GameObject*, int>(&GameObject::removeFromGroup));
    gameobject.def("removeFromGroup", pybind::overload_cast<pybind::function>(&GameObject::removeFromGroup));
    gameobject.def("removeFromGroupO", [](GameObject* self, int p0) { return GameObject::removeFromGroupO(self, p0); });
    gameobject.attr("removeFromGroupA") = GameObject::removeFromGroupA;
    gameobject.attr("removeFromGroupN") = "removeFromGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::removeFromGroupA, GameObject::removeFromGroupH, (LPVOID*)&GameObject::removeFromGroupO_);

    gameobject.def("spawnXPosition", pybind::overload_cast<GameObject*>(&GameObject::spawnXPosition));
    gameobject.def("spawnXPosition", pybind::overload_cast<pybind::function>(&GameObject::spawnXPosition));
    gameobject.def("spawnXPositionO", [](GameObject* self) { return GameObject::spawnXPositionO(self); });
    gameobject.attr("spawnXPositionA") = GameObject::spawnXPositionA;
    gameobject.attr("spawnXPositionN") = "spawnXPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::spawnXPositionA, GameObject::spawnXPositionH, (LPVOID*)&GameObject::spawnXPositionO_);

    gameobject.def("setObjectRectDirty", pybind::overload_cast<GameObject*, bool>(&GameObject::setObjectRectDirty));
    gameobject.def("setObjectRectDirty", pybind::overload_cast<pybind::function>(&GameObject::setObjectRectDirty));
    gameobject.def("setObjectRectDirtyO", [](GameObject* self, bool p0) { return GameObject::setObjectRectDirtyO(self, p0); });
    gameobject.attr("setObjectRectDirtyA") = GameObject::setObjectRectDirtyA;
    gameobject.attr("setObjectRectDirtyN") = "setObjectRectDirty";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setObjectRectDirtyA, GameObject::setObjectRectDirtyH, (LPVOID*)&GameObject::setObjectRectDirtyO_);

    gameobject.def("getOrientedRectDirty", pybind::overload_cast<GameObject*>(&GameObject::getOrientedRectDirty));
    gameobject.def("getOrientedRectDirty", pybind::overload_cast<pybind::function>(&GameObject::getOrientedRectDirty));
    gameobject.def("getOrientedRectDirtyO", [](GameObject* self) { return GameObject::getOrientedRectDirtyO(self); });
    gameobject.attr("getOrientedRectDirtyA") = GameObject::getOrientedRectDirtyA;
    gameobject.attr("getOrientedRectDirtyN") = "getOrientedRectDirty";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getOrientedRectDirtyA, GameObject::getOrientedRectDirtyH, (LPVOID*)&GameObject::getOrientedRectDirtyO_);

    gameobject.def("setOrientedRectDirty", pybind::overload_cast<GameObject*, bool>(&GameObject::setOrientedRectDirty));
    gameobject.def("setOrientedRectDirty", pybind::overload_cast<pybind::function>(&GameObject::setOrientedRectDirty));
    gameobject.def("setOrientedRectDirtyO", [](GameObject* self, bool p0) { return GameObject::setOrientedRectDirtyO(self, p0); });
    gameobject.attr("setOrientedRectDirtyA") = GameObject::setOrientedRectDirtyA;
    gameobject.attr("setOrientedRectDirtyN") = "setOrientedRectDirty";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setOrientedRectDirtyA, GameObject::setOrientedRectDirtyH, (LPVOID*)&GameObject::setOrientedRectDirtyO_);

    gameobject.def("getStartPos", pybind::overload_cast<GameObject*>(&GameObject::getStartPos));
    gameobject.def("getStartPos", pybind::overload_cast<pybind::function>(&GameObject::getStartPos));
    gameobject.def("getStartPosO", [](GameObject* self) { return GameObject::getStartPosO(self); });
    gameobject.attr("getStartPosA") = GameObject::getStartPosA;
    gameobject.attr("getStartPosN") = "getStartPos";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getStartPosA, GameObject::getStartPosH, (LPVOID*)&GameObject::getStartPosO_);

    gameobject.def("activatedByPlayer", pybind::overload_cast<GameObject*, GameObject*>(&GameObject::activatedByPlayer));
    gameobject.def("activatedByPlayer", pybind::overload_cast<pybind::function>(&GameObject::activatedByPlayer));
    gameobject.def("activatedByPlayerO", [](GameObject* self, GameObject* p0) { return GameObject::activatedByPlayerO(self, p0); });
    gameobject.attr("activatedByPlayerA") = GameObject::activatedByPlayerA;
    gameobject.attr("activatedByPlayerN") = "activatedByPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::activatedByPlayerA, GameObject::activatedByPlayerH, (LPVOID*)&GameObject::activatedByPlayerO_);

    gameobject.def("addColorSprite", pybind::overload_cast<GameObject*>(&GameObject::addColorSprite));
    gameobject.def("addColorSprite", pybind::overload_cast<pybind::function>(&GameObject::addColorSprite));
    gameobject.def("addColorSpriteO", [](GameObject* self) { return GameObject::addColorSpriteO(self); });
    gameobject.attr("addColorSpriteA") = GameObject::addColorSpriteA;
    gameobject.attr("addColorSpriteN") = "addColorSprite";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::addColorSpriteA, GameObject::addColorSpriteH, (LPVOID*)&GameObject::addColorSpriteO_);

    gameobject.def("addColorSpriteToParent", pybind::overload_cast<GameObject*, bool>(&GameObject::addColorSpriteToParent));
    gameobject.def("addColorSpriteToParent", pybind::overload_cast<pybind::function>(&GameObject::addColorSpriteToParent));
    gameobject.def("addColorSpriteToParentO", [](GameObject* self, bool p0) { return GameObject::addColorSpriteToParentO(self, p0); });
    gameobject.attr("addColorSpriteToParentA") = GameObject::addColorSpriteToParentA;
    gameobject.attr("addColorSpriteToParentN") = "addColorSpriteToParent";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::addColorSpriteToParentA, GameObject::addColorSpriteToParentH, (LPVOID*)&GameObject::addColorSpriteToParentO_);

    gameobject.def("addGlow", pybind::overload_cast<GameObject*>(&GameObject::addGlow));
    gameobject.def("addGlow", pybind::overload_cast<pybind::function>(&GameObject::addGlow));
    gameobject.def("addGlowO", [](GameObject* self) { return GameObject::addGlowO(self); });
    gameobject.attr("addGlowA") = GameObject::addGlowA;
    gameobject.attr("addGlowN") = "addGlow";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::addGlowA, GameObject::addGlowH, (LPVOID*)&GameObject::addGlowO_);

    gameobject.def("calculateOrientedBox", pybind::overload_cast<GameObject*>(&GameObject::calculateOrientedBox));
    gameobject.def("calculateOrientedBox", pybind::overload_cast<pybind::function>(&GameObject::calculateOrientedBox));
    gameobject.def("calculateOrientedBoxO", [](GameObject* self) { return GameObject::calculateOrientedBoxO(self); });
    gameobject.attr("calculateOrientedBoxA") = GameObject::calculateOrientedBoxA;
    gameobject.attr("calculateOrientedBoxN") = "calculateOrientedBox";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::calculateOrientedBoxA, GameObject::calculateOrientedBoxH, (LPVOID*)&GameObject::calculateOrientedBoxO_);

    gameobject.def("colorForMode", pybind::overload_cast<GameObject*, int, bool>(&GameObject::colorForMode));
    gameobject.def("colorForMode", pybind::overload_cast<pybind::function>(&GameObject::colorForMode));
    gameobject.def("colorForModeO", [](GameObject* self, int p0, bool p1) { return GameObject::colorForModeO(self, p0, p1); });
    gameobject.attr("colorForModeA") = GameObject::colorForModeA;
    gameobject.attr("colorForModeN") = "colorForMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::colorForModeA, GameObject::colorForModeH, (LPVOID*)&GameObject::colorForModeO_);

    gameobject.def("groupOpacityMod", pybind::overload_cast<GameObject*>(&GameObject::groupOpacityMod));
    gameobject.def("groupOpacityMod", pybind::overload_cast<pybind::function>(&GameObject::groupOpacityMod));
    gameobject.def("groupOpacityModO", [](GameObject* self) { return GameObject::groupOpacityModO(self); });
    gameobject.attr("groupOpacityModA") = GameObject::groupOpacityModA;
    gameobject.attr("groupOpacityModN") = "groupOpacityMod";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::groupOpacityModA, GameObject::groupOpacityModH, (LPVOID*)&GameObject::groupOpacityModO_);

    gameobject.def("commonSetup", pybind::overload_cast<GameObject*>(&GameObject::commonSetup));
    gameobject.def("commonSetup", pybind::overload_cast<pybind::function>(&GameObject::commonSetup));
    gameobject.def("commonSetupO", [](GameObject* self) { return GameObject::commonSetupO(self); });
    gameobject.attr("commonSetupA") = GameObject::commonSetupA;
    gameobject.attr("commonSetupN") = "commonSetup";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::commonSetupA, GameObject::commonSetupH, (LPVOID*)&GameObject::commonSetupO_);

    gameobject.def("copyGroups", pybind::overload_cast<GameObject*, GameObject*>(&GameObject::copyGroups));
    gameobject.def("copyGroups", pybind::overload_cast<pybind::function>(&GameObject::copyGroups));
    gameobject.def("copyGroupsO", [](GameObject* self, GameObject* p0) { return GameObject::copyGroupsO(self, p0); });
    gameobject.attr("copyGroupsA") = GameObject::copyGroupsA;
    gameobject.attr("copyGroupsN") = "copyGroups";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::copyGroupsA, GameObject::copyGroupsH, (LPVOID*)&GameObject::copyGroupsO_);

    gameobject.def("createWithFrame", pybind::overload_cast<const char*>(&GameObject::createWithFrame));
    gameobject.def("createWithFrame", pybind::overload_cast<pybind::function>(&GameObject::createWithFrame));
    gameobject.def("createWithFrameO", [](const char* p0) { return GameObject::createWithFrameO(p0); });
    gameobject.attr("createWithFrameA") = GameObject::createWithFrameA;
    gameobject.attr("createWithFrameN") = "createWithFrame";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::createWithFrameA, GameObject::createWithFrameH, (LPVOID*)&GameObject::createWithFrameO_);

    gameobject.def("createWithKey", pybind::overload_cast<int>(&GameObject::createWithKey));
    gameobject.def("createWithKey", pybind::overload_cast<pybind::function>(&GameObject::createWithKey));
    gameobject.def("createWithKeyO", [](int p0) { return GameObject::createWithKeyO(p0); });
    gameobject.attr("createWithKeyA") = GameObject::createWithKeyA;
    gameobject.attr("createWithKeyN") = "createWithKey";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::createWithKeyA, GameObject::createWithKeyH, (LPVOID*)&GameObject::createWithKeyO_);

    gameobject.def("determineSlopeDirection", pybind::overload_cast<GameObject*>(&GameObject::determineSlopeDirection));
    gameobject.def("determineSlopeDirection", pybind::overload_cast<pybind::function>(&GameObject::determineSlopeDirection));
    gameobject.def("determineSlopeDirectionO", [](GameObject* self) { return GameObject::determineSlopeDirectionO(self); });
    gameobject.attr("determineSlopeDirectionA") = GameObject::determineSlopeDirectionA;
    gameobject.attr("determineSlopeDirectionN") = "determineSlopeDirection";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::determineSlopeDirectionA, GameObject::determineSlopeDirectionH, (LPVOID*)&GameObject::determineSlopeDirectionO_);

    gameobject.def("getActiveColorForMode", pybind::overload_cast<GameObject*, int, bool>(&GameObject::getActiveColorForMode));
    gameobject.def("getActiveColorForMode", pybind::overload_cast<pybind::function>(&GameObject::getActiveColorForMode));
    gameobject.def("getActiveColorForModeO", [](GameObject* self, int p0, bool p1) { return GameObject::getActiveColorForModeO(self, p0, p1); });
    gameobject.attr("getActiveColorForModeA") = GameObject::getActiveColorForModeA;
    gameobject.attr("getActiveColorForModeN") = "getActiveColorForMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getActiveColorForModeA, GameObject::getActiveColorForModeH, (LPVOID*)&GameObject::getActiveColorForModeO_);

    gameobject.def("getBoxOffset", pybind::overload_cast<GameObject*>(&GameObject::getBoxOffset));
    gameobject.def("getBoxOffset", pybind::overload_cast<pybind::function>(&GameObject::getBoxOffset));
    gameobject.def("getBoxOffsetO", [](GameObject* self) { return GameObject::getBoxOffsetO(self); });
    gameobject.attr("getBoxOffsetA") = GameObject::getBoxOffsetA;
    gameobject.attr("getBoxOffsetN") = "getBoxOffset";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::getBoxOffsetA, GameObject::getBoxOffsetH, (LPVOID*)&GameObject::getBoxOffsetO_);

    gameobject.def("isSpawnableTrigger", pybind::overload_cast<GameObject*>(&GameObject::isSpawnableTrigger));
    gameobject.def("isSpawnableTrigger", pybind::overload_cast<pybind::function>(&GameObject::isSpawnableTrigger));
    gameobject.def("isSpawnableTriggerO", [](GameObject* self) { return GameObject::isSpawnableTriggerO(self); });
    gameobject.attr("isSpawnableTriggerA") = GameObject::isSpawnableTriggerA;
    gameobject.attr("isSpawnableTriggerN") = "isSpawnableTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSpawnableTriggerA, GameObject::isSpawnableTriggerH, (LPVOID*)&GameObject::isSpawnableTriggerO_);

    gameobject.def("loadGroupsFromString", pybind::overload_cast<GameObject*, gd::string>(&GameObject::loadGroupsFromString));
    gameobject.def("loadGroupsFromString", pybind::overload_cast<pybind::function>(&GameObject::loadGroupsFromString));
    gameobject.def("loadGroupsFromStringO", [](GameObject* self, gd::string str) { return GameObject::loadGroupsFromStringO(self, str); });
    gameobject.attr("loadGroupsFromStringA") = GameObject::loadGroupsFromStringA;
    gameobject.attr("loadGroupsFromStringN") = "loadGroupsFromString";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::loadGroupsFromStringA, GameObject::loadGroupsFromStringH, (LPVOID*)&GameObject::loadGroupsFromStringO_);

    gameobject.def("objectFromString", pybind::overload_cast<gd::string, bool>(&GameObject::objectFromString));
    gameobject.def("objectFromString", pybind::overload_cast<pybind::function>(&GameObject::objectFromString));
    gameobject.def("objectFromStringO", [](gd::string p0, bool p1) { return GameObject::objectFromStringO(p0, p1); });
    gameobject.attr("objectFromStringA") = GameObject::objectFromStringA;
    gameobject.attr("objectFromStringN") = "objectFromString";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::objectFromStringA, GameObject::objectFromStringH, (LPVOID*)&GameObject::objectFromStringO_);

    gameobject.def("playShineEffect", pybind::overload_cast<GameObject*>(&GameObject::playShineEffect));
    gameobject.def("playShineEffect", pybind::overload_cast<pybind::function>(&GameObject::playShineEffect));
    gameobject.def("playShineEffectO", [](GameObject* self) { return GameObject::playShineEffectO(self); });
    gameobject.attr("playShineEffectA") = GameObject::playShineEffectA;
    gameobject.attr("playShineEffectN") = "playShineEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::playShineEffectA, GameObject::playShineEffectH, (LPVOID*)&GameObject::playShineEffectO_);

    gameobject.def("saveActiveColors", pybind::overload_cast<GameObject*>(&GameObject::saveActiveColors));
    gameobject.def("saveActiveColors", pybind::overload_cast<pybind::function>(&GameObject::saveActiveColors));
    gameobject.def("saveActiveColorsO", [](GameObject* self) { return GameObject::saveActiveColorsO(self); });
    gameobject.attr("saveActiveColorsA") = GameObject::saveActiveColorsA;
    gameobject.attr("saveActiveColorsN") = "saveActiveColors";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::saveActiveColorsA, GameObject::saveActiveColorsH, (LPVOID*)&GameObject::saveActiveColorsO_);

    gameobject.def("selectObject", pybind::overload_cast<GameObject*, cocos2d::ccColor3B>(&GameObject::selectObject));
    gameobject.def("selectObject", pybind::overload_cast<pybind::function>(&GameObject::selectObject));
    gameobject.def("selectObjectO", [](GameObject* self, cocos2d::ccColor3B p0) { return GameObject::selectObjectO(self, p0); });
    gameobject.attr("selectObjectA") = GameObject::selectObjectA;
    gameobject.attr("selectObjectN") = "selectObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::selectObjectA, GameObject::selectObjectH, (LPVOID*)&GameObject::selectObjectO_);

    gameobject.def("setupCoinArt", pybind::overload_cast<GameObject*>(&GameObject::setupCoinArt));
    gameobject.def("setupCoinArt", pybind::overload_cast<pybind::function>(&GameObject::setupCoinArt));
    gameobject.def("setupCoinArtO", [](GameObject* self) { return GameObject::setupCoinArtO(self); });
    gameobject.attr("setupCoinArtA") = GameObject::setupCoinArtA;
    gameobject.attr("setupCoinArtN") = "setupCoinArt";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setupCoinArtA, GameObject::setupCoinArtH, (LPVOID*)&GameObject::setupCoinArtO_);

    gameobject.def("updateCustomScale", pybind::overload_cast<GameObject*, float>(&GameObject::updateCustomScale));
    gameobject.def("updateCustomScale", pybind::overload_cast<pybind::function>(&GameObject::updateCustomScale));
    gameobject.def("updateCustomScaleO", [](GameObject* self, float p0) { return GameObject::updateCustomScaleO(self, p0); });
    gameobject.attr("updateCustomScaleA") = GameObject::updateCustomScaleA;
    gameobject.attr("updateCustomScaleN") = "updateCustomScale";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateCustomScaleA, GameObject::updateCustomScaleH, (LPVOID*)&GameObject::updateCustomScaleO_);

    gameobject.def("updateObjectEditorColor", pybind::overload_cast<GameObject*>(&GameObject::updateObjectEditorColor));
    gameobject.def("updateObjectEditorColor", pybind::overload_cast<pybind::function>(&GameObject::updateObjectEditorColor));
    gameobject.def("updateObjectEditorColorO", [](GameObject* self) { return GameObject::updateObjectEditorColorO(self); });
    gameobject.attr("updateObjectEditorColorA") = GameObject::updateObjectEditorColorA;
    gameobject.attr("updateObjectEditorColorN") = "updateObjectEditorColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateObjectEditorColorA, GameObject::updateObjectEditorColorH, (LPVOID*)&GameObject::updateObjectEditorColorO_);

    gameobject.def("updateOrientedBox", pybind::overload_cast<GameObject*>(&GameObject::updateOrientedBox));
    gameobject.def("updateOrientedBox", pybind::overload_cast<pybind::function>(&GameObject::updateOrientedBox));
    gameobject.def("updateOrientedBoxO", [](GameObject* self) { return GameObject::updateOrientedBoxO(self); });
    gameobject.attr("updateOrientedBoxA") = GameObject::updateOrientedBoxA;
    gameobject.attr("updateOrientedBoxN") = "updateOrientedBox";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateOrientedBoxA, GameObject::updateOrientedBoxH, (LPVOID*)&GameObject::updateOrientedBoxO_);

    gameobject.def("updateStartPos", pybind::overload_cast<GameObject*>(&GameObject::updateStartPos));
    gameobject.def("updateStartPos", pybind::overload_cast<pybind::function>(&GameObject::updateStartPos));
    gameobject.def("updateStartPosO", [](GameObject* self) { return GameObject::updateStartPosO(self); });
    gameobject.attr("updateStartPosA") = GameObject::updateStartPosA;
    gameobject.attr("updateStartPosN") = "updateStartPos";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateStartPosA, GameObject::updateStartPosH, (LPVOID*)&GameObject::updateStartPosO_);

    gameobject.def("updateSyncedAnimation", pybind::overload_cast<GameObject*, float>(&GameObject::updateSyncedAnimation));
    gameobject.def("updateSyncedAnimation", pybind::overload_cast<pybind::function>(&GameObject::updateSyncedAnimation));
    gameobject.def("updateSyncedAnimationO", [](GameObject* self, float p0) { return GameObject::updateSyncedAnimationO(self, p0); });
    gameobject.attr("updateSyncedAnimationA") = GameObject::updateSyncedAnimationA;
    gameobject.attr("updateSyncedAnimationN") = "updateSyncedAnimation";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateSyncedAnimationA, GameObject::updateSyncedAnimationH, (LPVOID*)&GameObject::updateSyncedAnimationO_);

    gameobject.def("updateTextObject", pybind::overload_cast<GameObject*, gd::string, bool>(&GameObject::updateTextObject));
    gameobject.def("updateTextObject", pybind::overload_cast<pybind::function>(&GameObject::updateTextObject));
    gameobject.def("updateTextObjectO", [](GameObject* self, gd::string p0, bool p1) { return GameObject::updateTextObjectO(self, p0, p1); });
    gameobject.attr("updateTextObjectA") = GameObject::updateTextObjectA;
    gameobject.attr("updateTextObjectN") = "updateTextObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateTextObjectA, GameObject::updateTextObjectH, (LPVOID*)&GameObject::updateTextObjectO_);

    gameobject.def("deselectObject", pybind::overload_cast<GameObject*>(&GameObject::deselectObject));
    gameobject.def("deselectObject", pybind::overload_cast<pybind::function>(&GameObject::deselectObject));
    gameobject.def("deselectObjectO", [](GameObject* self) { return GameObject::deselectObjectO(self); });
    gameobject.attr("deselectObjectA") = GameObject::deselectObjectA;
    gameobject.attr("deselectObjectN") = "deselectObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::deselectObjectA, GameObject::deselectObjectH, (LPVOID*)&GameObject::deselectObjectO_);

    gameobject.def("createRotateAction", pybind::overload_cast<GameObject*, float, int>(&GameObject::createRotateAction));
    gameobject.def("createRotateAction", pybind::overload_cast<pybind::function>(&GameObject::createRotateAction));
    gameobject.def("createRotateActionO", [](GameObject* self, float f, int n) { return GameObject::createRotateActionO(self, f, n); });
    gameobject.attr("createRotateActionA") = GameObject::createRotateActionA;
    gameobject.attr("createRotateActionN") = "createRotateAction";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::createRotateActionA, GameObject::createRotateActionH, (LPVOID*)&GameObject::createRotateActionO_);

    gameobject.def("setMyAction", pybind::overload_cast<GameObject*, cocos2d::CCAction*>(&GameObject::setMyAction));
    gameobject.def("setMyAction", pybind::overload_cast<pybind::function>(&GameObject::setMyAction));
    gameobject.def("setMyActionO", [](GameObject* self, cocos2d::CCAction* pAction) { return GameObject::setMyActionO(self, pAction); });
    gameobject.attr("setMyActionA") = GameObject::setMyActionA;
    gameobject.attr("setMyActionN") = "setMyAction";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setMyActionA, GameObject::setMyActionH, (LPVOID*)&GameObject::setMyActionO_);

    gameobject.def("canAllowMultiActivate", pybind::overload_cast<GameObject*>(&GameObject::canAllowMultiActivate));
    gameobject.def("canAllowMultiActivate", pybind::overload_cast<pybind::function>(&GameObject::canAllowMultiActivate));
    gameobject.def("canAllowMultiActivateO", [](GameObject* self) { return GameObject::canAllowMultiActivateO(self); });
    gameobject.attr("canAllowMultiActivateA") = GameObject::canAllowMultiActivateA;
    gameobject.attr("canAllowMultiActivateN") = "canAllowMultiActivate";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::canAllowMultiActivateA, GameObject::canAllowMultiActivateH, (LPVOID*)&GameObject::canAllowMultiActivateO_);

    gameobject.def("createGroupContainer", pybind::overload_cast<GameObject*, int>(&GameObject::createGroupContainer));
    gameobject.def("createGroupContainer", pybind::overload_cast<pybind::function>(&GameObject::createGroupContainer));
    gameobject.def("createGroupContainerO", [](GameObject* self, int size) { return GameObject::createGroupContainerO(self, size); });
    gameobject.attr("createGroupContainerA") = GameObject::createGroupContainerA;
    gameobject.attr("createGroupContainerN") = "createGroupContainer";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::createGroupContainerA, GameObject::createGroupContainerH, (LPVOID*)&GameObject::createGroupContainerO_);

    auto animatedspritedelegate = pybind::class_<AnimatedSpriteDelegate>(m, "AnimatedSpriteDelegate");
    auto spritepartdelegate = pybind::class_<SpritePartDelegate>(m, "SpritePartDelegate");
    auto animatedgameobject = pybind::class_<AnimatedGameObject, GameObject>(m, "AnimatedGameObject");
    animatedgameobject.def("playAnimation", pybind::overload_cast<AnimatedGameObject*, int>(&AnimatedGameObject::playAnimation));
    animatedgameobject.def("playAnimation", pybind::overload_cast<pybind::function>(&AnimatedGameObject::playAnimation));
    animatedgameobject.def("playAnimationO", [](AnimatedGameObject* self, int p0) { return AnimatedGameObject::playAnimationO(self, p0); });
    animatedgameobject.attr("playAnimationA") = AnimatedGameObject::playAnimationA;
    animatedgameobject.attr("playAnimationN") = "playAnimation";
    cinnamon::hooks::hookCinnamon((PVOID)AnimatedGameObject::playAnimationA, AnimatedGameObject::playAnimationH, (LPVOID*)&AnimatedGameObject::playAnimationO_);

    animatedgameobject.def("updateChildSpriteColor", pybind::overload_cast<AnimatedGameObject*, cocos2d::_ccColor3B>(&AnimatedGameObject::updateChildSpriteColor));
    animatedgameobject.def("updateChildSpriteColor", pybind::overload_cast<pybind::function>(&AnimatedGameObject::updateChildSpriteColor));
    animatedgameobject.def("updateChildSpriteColorO", [](AnimatedGameObject* self, cocos2d::_ccColor3B p0) { return AnimatedGameObject::updateChildSpriteColorO(self, p0); });
    animatedgameobject.attr("updateChildSpriteColorA") = AnimatedGameObject::updateChildSpriteColorA;
    animatedgameobject.attr("updateChildSpriteColorN") = "updateChildSpriteColor";
    cinnamon::hooks::hookCinnamon((PVOID)AnimatedGameObject::updateChildSpriteColorA, AnimatedGameObject::updateChildSpriteColorH, (LPVOID*)&AnimatedGameObject::updateChildSpriteColorO_);

    auto ccanimatedsprite = pybind::class_<CCAnimatedSprite, cocos2d::CCSprite>(m, "CCAnimatedSprite");
    ccanimatedsprite.def("runAnimation", pybind::overload_cast<CCAnimatedSprite*, gd::string>(&CCAnimatedSprite::runAnimation));
    ccanimatedsprite.def("runAnimation", pybind::overload_cast<pybind::function>(&CCAnimatedSprite::runAnimation));
    ccanimatedsprite.def("runAnimationO", [](CCAnimatedSprite* self, gd::string p0) { return CCAnimatedSprite::runAnimationO(self, p0); });
    ccanimatedsprite.attr("runAnimationA") = CCAnimatedSprite::runAnimationA;
    ccanimatedsprite.attr("runAnimationN") = "runAnimation";
    cinnamon::hooks::hookCinnamon((PVOID)CCAnimatedSprite::runAnimationA, CCAnimatedSprite::runAnimationH, (LPVOID*)&CCAnimatedSprite::runAnimationO_);

    ccanimatedsprite.def("tweenToAnimation", pybind::overload_cast<CCAnimatedSprite*, gd::string, float>(&CCAnimatedSprite::tweenToAnimation));
    ccanimatedsprite.def("tweenToAnimation", pybind::overload_cast<pybind::function>(&CCAnimatedSprite::tweenToAnimation));
    ccanimatedsprite.def("tweenToAnimationO", [](CCAnimatedSprite* self, gd::string p0, float p1) { return CCAnimatedSprite::tweenToAnimationO(self, p0, p1); });
    ccanimatedsprite.attr("tweenToAnimationA") = CCAnimatedSprite::tweenToAnimationA;
    ccanimatedsprite.attr("tweenToAnimationN") = "tweenToAnimation";
    cinnamon::hooks::hookCinnamon((PVOID)CCAnimatedSprite::tweenToAnimationA, CCAnimatedSprite::tweenToAnimationH, (LPVOID*)&CCAnimatedSprite::tweenToAnimationO_);

    ccanimatedsprite.def("createWithType", pybind::overload_cast<const char*>(&CCAnimatedSprite::createWithType));
    ccanimatedsprite.def("createWithType", pybind::overload_cast<pybind::function>(&CCAnimatedSprite::createWithType));
    ccanimatedsprite.def("createWithTypeO", [](const char* file) { return CCAnimatedSprite::createWithTypeO(file); });
    ccanimatedsprite.attr("createWithTypeA") = CCAnimatedSprite::createWithTypeA;
    ccanimatedsprite.attr("createWithTypeN") = "createWithType";
    cinnamon::hooks::hookCinnamon((PVOID)CCAnimatedSprite::createWithTypeA, CCAnimatedSprite::createWithTypeH, (LPVOID*)&CCAnimatedSprite::createWithTypeO_);

    auto animatedshopkeeper = pybind::class_<AnimatedShopKeeper, CCAnimatedSprite>(m, "AnimatedShopKeeper");
    animatedshopkeeper.def("startAnimating", pybind::overload_cast<AnimatedShopKeeper*>(&AnimatedShopKeeper::startAnimating));
    animatedshopkeeper.def("startAnimating", pybind::overload_cast<pybind::function>(&AnimatedShopKeeper::startAnimating));
    animatedshopkeeper.def("startAnimatingO", [](AnimatedShopKeeper* self) { return AnimatedShopKeeper::startAnimatingO(self); });
    animatedshopkeeper.attr("startAnimatingA") = AnimatedShopKeeper::startAnimatingA;
    animatedshopkeeper.attr("startAnimatingN") = "startAnimating";
    cinnamon::hooks::hookCinnamon((PVOID)AnimatedShopKeeper::startAnimatingA, AnimatedShopKeeper::startAnimatingH, (LPVOID*)&AnimatedShopKeeper::startAnimatingO_);

    auto appdelegate = pybind::class_<AppDelegate, cocos2d::CCApplication>(m, "AppDelegate");
    appdelegate.def("applicationDidFinishLaunching", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationDidFinishLaunching));
    appdelegate.def("applicationDidFinishLaunching", pybind::overload_cast<pybind::function>(&AppDelegate::applicationDidFinishLaunching));
    appdelegate.def("applicationDidFinishLaunchingO", [](AppDelegate* self) { return AppDelegate::applicationDidFinishLaunchingO(self); });
    appdelegate.attr("applicationDidFinishLaunchingA") = AppDelegate::applicationDidFinishLaunchingA;
    appdelegate.attr("applicationDidFinishLaunchingN") = "applicationDidFinishLaunching";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationDidFinishLaunchingA, AppDelegate::applicationDidFinishLaunchingH, (LPVOID*)&AppDelegate::applicationDidFinishLaunchingO_);

    appdelegate.def("applicationDidEnterBackground", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationDidEnterBackground));
    appdelegate.def("applicationDidEnterBackground", pybind::overload_cast<pybind::function>(&AppDelegate::applicationDidEnterBackground));
    appdelegate.def("applicationDidEnterBackgroundO", [](AppDelegate* self) { return AppDelegate::applicationDidEnterBackgroundO(self); });
    appdelegate.attr("applicationDidEnterBackgroundA") = AppDelegate::applicationDidEnterBackgroundA;
    appdelegate.attr("applicationDidEnterBackgroundN") = "applicationDidEnterBackground";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationDidEnterBackgroundA, AppDelegate::applicationDidEnterBackgroundH, (LPVOID*)&AppDelegate::applicationDidEnterBackgroundO_);

    appdelegate.def("applicationWillEnterForeground", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillEnterForeground));
    appdelegate.def("applicationWillEnterForeground", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillEnterForeground));
    appdelegate.def("applicationWillEnterForegroundO", [](AppDelegate* self) { return AppDelegate::applicationWillEnterForegroundO(self); });
    appdelegate.attr("applicationWillEnterForegroundA") = AppDelegate::applicationWillEnterForegroundA;
    appdelegate.attr("applicationWillEnterForegroundN") = "applicationWillEnterForeground";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillEnterForegroundA, AppDelegate::applicationWillEnterForegroundH, (LPVOID*)&AppDelegate::applicationWillEnterForegroundO_);

    appdelegate.def("applicationWillBecomeActive", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillBecomeActive));
    appdelegate.def("applicationWillBecomeActive", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillBecomeActive));
    appdelegate.def("applicationWillBecomeActiveO", [](AppDelegate* self) { return AppDelegate::applicationWillBecomeActiveO(self); });
    appdelegate.attr("applicationWillBecomeActiveA") = AppDelegate::applicationWillBecomeActiveA;
    appdelegate.attr("applicationWillBecomeActiveN") = "applicationWillBecomeActive";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillBecomeActiveA, AppDelegate::applicationWillBecomeActiveH, (LPVOID*)&AppDelegate::applicationWillBecomeActiveO_);

    appdelegate.def("applicationWillResignActive", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillResignActive));
    appdelegate.def("applicationWillResignActive", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillResignActive));
    appdelegate.def("applicationWillResignActiveO", [](AppDelegate* self) { return AppDelegate::applicationWillResignActiveO(self); });
    appdelegate.attr("applicationWillResignActiveA") = AppDelegate::applicationWillResignActiveA;
    appdelegate.attr("applicationWillResignActiveN") = "applicationWillResignActive";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillResignActiveA, AppDelegate::applicationWillResignActiveH, (LPVOID*)&AppDelegate::applicationWillResignActiveO_);

    appdelegate.def("trySaveGame", pybind::overload_cast<AppDelegate*>(&AppDelegate::trySaveGame));
    appdelegate.def("trySaveGame", pybind::overload_cast<pybind::function>(&AppDelegate::trySaveGame));
    appdelegate.def("trySaveGameO", [](AppDelegate* self) { return AppDelegate::trySaveGameO(self); });
    appdelegate.attr("trySaveGameA") = AppDelegate::trySaveGameA;
    appdelegate.attr("trySaveGameN") = "trySaveGame";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::trySaveGameA, AppDelegate::trySaveGameH, (LPVOID*)&AppDelegate::trySaveGameO_);

    appdelegate.def("willSwitchToScene", pybind::overload_cast<AppDelegate*, cocos2d::CCScene*>(&AppDelegate::willSwitchToScene));
    appdelegate.def("willSwitchToScene", pybind::overload_cast<pybind::function>(&AppDelegate::willSwitchToScene));
    appdelegate.def("willSwitchToSceneO", [](AppDelegate* self, cocos2d::CCScene* p0) { return AppDelegate::willSwitchToSceneO(self, p0); });
    appdelegate.attr("willSwitchToSceneA") = AppDelegate::willSwitchToSceneA;
    appdelegate.attr("willSwitchToSceneN") = "willSwitchToScene";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::willSwitchToSceneA, AppDelegate::willSwitchToSceneH, (LPVOID*)&AppDelegate::willSwitchToSceneO_);

    appdelegate.def("musicTest", pybind::overload_cast<AppDelegate*>(&AppDelegate::musicTest));
    appdelegate.def("musicTest", pybind::overload_cast<pybind::function>(&AppDelegate::musicTest));
    appdelegate.def("musicTestO", [](AppDelegate* self) { return AppDelegate::musicTestO(self); });
    appdelegate.attr("musicTestA") = AppDelegate::musicTestA;
    appdelegate.attr("musicTestN") = "musicTest";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::musicTestA, AppDelegate::musicTestH, (LPVOID*)&AppDelegate::musicTestO_);

    appdelegate.def("pauseGame", pybind::overload_cast<AppDelegate*>(&AppDelegate::pauseGame));
    appdelegate.def("pauseGame", pybind::overload_cast<pybind::function>(&AppDelegate::pauseGame));
    appdelegate.def("pauseGameO", [](AppDelegate* self) { return AppDelegate::pauseGameO(self); });
    appdelegate.attr("pauseGameA") = AppDelegate::pauseGameA;
    appdelegate.attr("pauseGameN") = "pauseGame";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::pauseGameA, AppDelegate::pauseGameH, (LPVOID*)&AppDelegate::pauseGameO_);

    appdelegate.def("resumeSound", pybind::overload_cast<AppDelegate*>(&AppDelegate::resumeSound));
    appdelegate.def("resumeSound", pybind::overload_cast<pybind::function>(&AppDelegate::resumeSound));
    appdelegate.def("resumeSoundO", [](AppDelegate* self) { return AppDelegate::resumeSoundO(self); });
    appdelegate.attr("resumeSoundA") = AppDelegate::resumeSoundA;
    appdelegate.attr("resumeSoundN") = "resumeSound";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::resumeSoundA, AppDelegate::resumeSoundH, (LPVOID*)&AppDelegate::resumeSoundO_);

    appdelegate.def("setupGLView", pybind::overload_cast<AppDelegate*>(&AppDelegate::setupGLView));
    appdelegate.def("setupGLView", pybind::overload_cast<pybind::function>(&AppDelegate::setupGLView));
    appdelegate.def("setupGLViewO", [](AppDelegate* self) { return AppDelegate::setupGLViewO(self); });
    appdelegate.attr("setupGLViewA") = AppDelegate::setupGLViewA;
    appdelegate.attr("setupGLViewN") = "setupGLView";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::setupGLViewA, AppDelegate::setupGLViewH, (LPVOID*)&AppDelegate::setupGLViewO_);

    auto songinfoobject = pybind::class_<SongInfoObject, cocos2d::CCNode>(m, "SongInfoObject");
    songinfoobject.def("encodeWithCoder", pybind::overload_cast<SongInfoObject*, DS_Dictionary*>(&SongInfoObject::encodeWithCoder));
    songinfoobject.def("encodeWithCoder", pybind::overload_cast<pybind::function>(&SongInfoObject::encodeWithCoder));
    songinfoobject.def("encodeWithCoderO", [](SongInfoObject* self, DS_Dictionary* p0) { return SongInfoObject::encodeWithCoderO(self, p0); });
    songinfoobject.attr("encodeWithCoderA") = SongInfoObject::encodeWithCoderA;
    songinfoobject.attr("encodeWithCoderN") = "encodeWithCoder";
    cinnamon::hooks::hookCinnamon((PVOID)SongInfoObject::encodeWithCoderA, SongInfoObject::encodeWithCoderH, (LPVOID*)&SongInfoObject::encodeWithCoderO_);

    songinfoobject.def("canEncode", pybind::overload_cast<SongInfoObject*>(&SongInfoObject::canEncode));
    songinfoobject.def("canEncode", pybind::overload_cast<pybind::function>(&SongInfoObject::canEncode));
    songinfoobject.def("canEncodeO", [](SongInfoObject* self) { return SongInfoObject::canEncodeO(self); });
    songinfoobject.attr("canEncodeA") = SongInfoObject::canEncodeA;
    songinfoobject.attr("canEncodeN") = "canEncode";
    cinnamon::hooks::hookCinnamon((PVOID)SongInfoObject::canEncodeA, SongInfoObject::canEncodeH, (LPVOID*)&SongInfoObject::canEncodeO_);

    auto ccindexpath = pybind::class_<CCIndexPath, cocos2d::CCObject>(m, "CCIndexPath");
    ccindexpath.def("CCIndexPathWithSectionRow", pybind::overload_cast<int, int>(&CCIndexPath::CCIndexPathWithSectionRow));
    ccindexpath.def("CCIndexPathWithSectionRow", pybind::overload_cast<pybind::function>(&CCIndexPath::CCIndexPathWithSectionRow));
    ccindexpath.def("CCIndexPathWithSectionRowO", [](int idk1, int idk2) { return CCIndexPath::CCIndexPathWithSectionRowO(idk1, idk2); });
    ccindexpath.attr("CCIndexPathWithSectionRowA") = CCIndexPath::CCIndexPathWithSectionRowA;
    ccindexpath.attr("CCIndexPathWithSectionRowN") = "CCIndexPathWithSectionRow";
    cinnamon::hooks::hookCinnamon((PVOID)CCIndexPath::CCIndexPathWithSectionRowA, CCIndexPath::CCIndexPathWithSectionRowH, (LPVOID*)&CCIndexPath::CCIndexPathWithSectionRowO_);

    auto tableviewcell = pybind::class_<TableViewCell, cocos2d::CCLayer>(m, "TableViewCell");
    auto artistcell = pybind::class_<ArtistCell, TableViewCell>(m, "ArtistCell");
    artistcell.def("draw", pybind::overload_cast<ArtistCell*>(&ArtistCell::draw));
    artistcell.def("draw", pybind::overload_cast<pybind::function>(&ArtistCell::draw));
    artistcell.def("drawO", [](ArtistCell* self) { return ArtistCell::drawO(self); });
    artistcell.attr("drawA") = ArtistCell::drawA;
    artistcell.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)ArtistCell::drawA, ArtistCell::drawH, (LPVOID*)&ArtistCell::drawO_);

    artistcell.def("init", pybind::overload_cast<ArtistCell*>(&ArtistCell::init));
    artistcell.def("init", pybind::overload_cast<pybind::function>(&ArtistCell::init));
    artistcell.def("initO", [](ArtistCell* self) { return ArtistCell::initO(self); });
    artistcell.attr("initA") = ArtistCell::initA;
    artistcell.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ArtistCell::initA, ArtistCell::initH, (LPVOID*)&ArtistCell::initO_);

    artistcell.def("loadFromObject", pybind::overload_cast<ArtistCell*, SongInfoObject*>(&ArtistCell::loadFromObject));
    artistcell.def("loadFromObject", pybind::overload_cast<pybind::function>(&ArtistCell::loadFromObject));
    artistcell.def("loadFromObjectO", [](ArtistCell* self, SongInfoObject* p0) { return ArtistCell::loadFromObjectO(self, p0); });
    artistcell.attr("loadFromObjectA") = ArtistCell::loadFromObjectA;
    artistcell.attr("loadFromObjectN") = "loadFromObject";
    cinnamon::hooks::hookCinnamon((PVOID)ArtistCell::loadFromObjectA, ArtistCell::loadFromObjectH, (LPVOID*)&ArtistCell::loadFromObjectO_);

    artistcell.def("onNewgrounds", pybind::overload_cast<ArtistCell*, cocos2d::CCObject*>(&ArtistCell::onNewgrounds));
    artistcell.def("onNewgrounds", pybind::overload_cast<pybind::function>(&ArtistCell::onNewgrounds));
    artistcell.def("onNewgroundsO", [](ArtistCell* self, cocos2d::CCObject* p0) { return ArtistCell::onNewgroundsO(self, p0); });
    artistcell.attr("onNewgroundsA") = ArtistCell::onNewgroundsA;
    artistcell.attr("onNewgroundsN") = "onNewgrounds";
    cinnamon::hooks::hookCinnamon((PVOID)ArtistCell::onNewgroundsA, ArtistCell::onNewgroundsH, (LPVOID*)&ArtistCell::onNewgroundsO_);

    artistcell.def("updateBGColor", pybind::overload_cast<ArtistCell*, int>(&ArtistCell::updateBGColor));
    artistcell.def("updateBGColor", pybind::overload_cast<pybind::function>(&ArtistCell::updateBGColor));
    artistcell.def("updateBGColorO", [](ArtistCell* self, int p0) { return ArtistCell::updateBGColorO(self, p0); });
    artistcell.attr("updateBGColorA") = ArtistCell::updateBGColorA;
    artistcell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)ArtistCell::updateBGColorA, ArtistCell::updateBGColorH, (LPVOID*)&ArtistCell::updateBGColorO_);

    auto audioeffectslayer = pybind::class_<AudioEffectsLayer, cocos2d::CCLayerColor>(m, "AudioEffectsLayer");
    audioeffectslayer.def("audioStep", pybind::overload_cast<AudioEffectsLayer*, float>(&AudioEffectsLayer::audioStep));
    audioeffectslayer.def("audioStep", pybind::overload_cast<pybind::function>(&AudioEffectsLayer::audioStep));
    audioeffectslayer.def("audioStepO", [](AudioEffectsLayer* self, float p0) { return AudioEffectsLayer::audioStepO(self, p0); });
    audioeffectslayer.attr("audioStepA") = AudioEffectsLayer::audioStepA;
    audioeffectslayer.attr("audioStepN") = "audioStep";
    cinnamon::hooks::hookCinnamon((PVOID)AudioEffectsLayer::audioStepA, AudioEffectsLayer::audioStepH, (LPVOID*)&AudioEffectsLayer::audioStepO_);

    audioeffectslayer.def("create", pybind::overload_cast<gd::string>(&AudioEffectsLayer::create));
    audioeffectslayer.def("create", pybind::overload_cast<pybind::function>(&AudioEffectsLayer::create));
    audioeffectslayer.def("createO", [](gd::string p0) { return AudioEffectsLayer::createO(p0); });
    audioeffectslayer.attr("createA") = AudioEffectsLayer::createA;
    audioeffectslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)AudioEffectsLayer::createA, AudioEffectsLayer::createH, (LPVOID*)&AudioEffectsLayer::createO_);

    audioeffectslayer.def("resetAudioVars", pybind::overload_cast<AudioEffectsLayer*>(&AudioEffectsLayer::resetAudioVars));
    audioeffectslayer.def("resetAudioVars", pybind::overload_cast<pybind::function>(&AudioEffectsLayer::resetAudioVars));
    audioeffectslayer.def("resetAudioVarsO", [](AudioEffectsLayer* self) { return AudioEffectsLayer::resetAudioVarsO(self); });
    audioeffectslayer.attr("resetAudioVarsA") = AudioEffectsLayer::resetAudioVarsA;
    audioeffectslayer.attr("resetAudioVarsN") = "resetAudioVars";
    cinnamon::hooks::hookCinnamon((PVOID)AudioEffectsLayer::resetAudioVarsA, AudioEffectsLayer::resetAudioVarsH, (LPVOID*)&AudioEffectsLayer::resetAudioVarsO_);

    audioeffectslayer.def("goingDown", pybind::overload_cast<AudioEffectsLayer*>(&AudioEffectsLayer::goingDown));
    audioeffectslayer.def("goingDown", pybind::overload_cast<pybind::function>(&AudioEffectsLayer::goingDown));
    audioeffectslayer.def("goingDownO", [](AudioEffectsLayer* self) { return AudioEffectsLayer::goingDownO(self); });
    audioeffectslayer.attr("goingDownA") = AudioEffectsLayer::goingDownA;
    audioeffectslayer.attr("goingDownN") = "goingDown";
    cinnamon::hooks::hookCinnamon((PVOID)AudioEffectsLayer::goingDownA, AudioEffectsLayer::goingDownH, (LPVOID*)&AudioEffectsLayer::goingDownO_);

    audioeffectslayer.def("updateTweenAction", pybind::overload_cast<AudioEffectsLayer*, float, const char*>(&AudioEffectsLayer::updateTweenAction));
    audioeffectslayer.def("updateTweenAction", pybind::overload_cast<pybind::function>(&AudioEffectsLayer::updateTweenAction));
    audioeffectslayer.def("updateTweenActionO", [](AudioEffectsLayer* self, float p0, const char* p1) { return AudioEffectsLayer::updateTweenActionO(self, p0, p1); });
    audioeffectslayer.attr("updateTweenActionA") = AudioEffectsLayer::updateTweenActionA;
    audioeffectslayer.attr("updateTweenActionN") = "updateTweenAction";
    cinnamon::hooks::hookCinnamon((PVOID)AudioEffectsLayer::updateTweenActionA, AudioEffectsLayer::updateTweenActionH, (LPVOID*)&AudioEffectsLayer::updateTweenActionO_);

    auto tableviewdelegate = pybind::class_<TableViewDelegate>(m, "TableViewDelegate");
    auto tableviewdatasource = pybind::class_<TableViewDataSource>(m, "TableViewDataSource");
    auto boomlistview = pybind::class_<BoomListView, cocos2d::CCLayer>(m, "BoomListView");
    boomlistview.def("init", pybind::overload_cast<BoomListView*, cocos2d::CCArray*, float, float, int, BoomListType>(&BoomListView::init));
    boomlistview.def("init", pybind::overload_cast<pybind::function>(&BoomListView::init));
    boomlistview.def("initO", [](BoomListView* self, cocos2d::CCArray* p0, float p1, float p2, int p3, BoomListType p4) { return BoomListView::initO(self, p0, p1, p2, p3, p4); });
    boomlistview.attr("initA") = BoomListView::initA;
    boomlistview.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::initA, BoomListView::initH, (LPVOID*)&BoomListView::initO_);

    boomlistview.def("setupList", pybind::overload_cast<BoomListView*>(&BoomListView::setupList));
    boomlistview.def("setupList", pybind::overload_cast<pybind::function>(&BoomListView::setupList));
    boomlistview.def("setupListO", [](BoomListView* self) { return BoomListView::setupListO(self); });
    boomlistview.attr("setupListA") = BoomListView::setupListA;
    boomlistview.attr("setupListN") = "setupList";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::setupListA, BoomListView::setupListH, (LPVOID*)&BoomListView::setupListO_);

    boomlistview.def("cellHeightForRowAtIndexPath", pybind::overload_cast<BoomListView*, CCIndexPath&, TableView*>(&BoomListView::cellHeightForRowAtIndexPath));
    boomlistview.def("cellHeightForRowAtIndexPath", pybind::overload_cast<pybind::function>(&BoomListView::cellHeightForRowAtIndexPath));
    boomlistview.def("cellHeightForRowAtIndexPathO", [](BoomListView* self, CCIndexPath& p0, TableView* p1) { return BoomListView::cellHeightForRowAtIndexPathO(self, p0, p1); });
    boomlistview.attr("cellHeightForRowAtIndexPathA") = BoomListView::cellHeightForRowAtIndexPathA;
    boomlistview.attr("cellHeightForRowAtIndexPathN") = "cellHeightForRowAtIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::cellHeightForRowAtIndexPathA, BoomListView::cellHeightForRowAtIndexPathH, (LPVOID*)&BoomListView::cellHeightForRowAtIndexPathO_);

    boomlistview.def("numberOfRowsInSection", pybind::overload_cast<BoomListView*, unsigned int, TableView*>(&BoomListView::numberOfRowsInSection));
    boomlistview.def("numberOfRowsInSection", pybind::overload_cast<pybind::function>(&BoomListView::numberOfRowsInSection));
    boomlistview.def("numberOfRowsInSectionO", [](BoomListView* self, unsigned int p0, TableView* p1) { return BoomListView::numberOfRowsInSectionO(self, p0, p1); });
    boomlistview.attr("numberOfRowsInSectionA") = BoomListView::numberOfRowsInSectionA;
    boomlistview.attr("numberOfRowsInSectionN") = "numberOfRowsInSection";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::numberOfRowsInSectionA, BoomListView::numberOfRowsInSectionH, (LPVOID*)&BoomListView::numberOfRowsInSectionO_);

    boomlistview.def("numberOfSectionsInTableView", pybind::overload_cast<BoomListView*, TableView*>(&BoomListView::numberOfSectionsInTableView));
    boomlistview.def("numberOfSectionsInTableView", pybind::overload_cast<pybind::function>(&BoomListView::numberOfSectionsInTableView));
    boomlistview.def("numberOfSectionsInTableViewO", [](BoomListView* self, TableView* p0) { return BoomListView::numberOfSectionsInTableViewO(self, p0); });
    boomlistview.attr("numberOfSectionsInTableViewA") = BoomListView::numberOfSectionsInTableViewA;
    boomlistview.attr("numberOfSectionsInTableViewN") = "numberOfSectionsInTableView";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::numberOfSectionsInTableViewA, BoomListView::numberOfSectionsInTableViewH, (LPVOID*)&BoomListView::numberOfSectionsInTableViewO_);

    boomlistview.def("cellForRowAtIndexPath", pybind::overload_cast<BoomListView*, CCIndexPath&, TableView*>(&BoomListView::cellForRowAtIndexPath));
    boomlistview.def("cellForRowAtIndexPath", pybind::overload_cast<pybind::function>(&BoomListView::cellForRowAtIndexPath));
    boomlistview.def("cellForRowAtIndexPathO", [](BoomListView* self, CCIndexPath& p0, TableView* p1) { return BoomListView::cellForRowAtIndexPathO(self, p0, p1); });
    boomlistview.attr("cellForRowAtIndexPathA") = BoomListView::cellForRowAtIndexPathA;
    boomlistview.attr("cellForRowAtIndexPathN") = "cellForRowAtIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::cellForRowAtIndexPathA, BoomListView::cellForRowAtIndexPathH, (LPVOID*)&BoomListView::cellForRowAtIndexPathO_);

    boomlistview.def("getListCell", pybind::overload_cast<BoomListView*, const char*>(&BoomListView::getListCell));
    boomlistview.def("getListCell", pybind::overload_cast<pybind::function>(&BoomListView::getListCell));
    boomlistview.def("getListCellO", [](BoomListView* self, const char* p0) { return BoomListView::getListCellO(self, p0); });
    boomlistview.attr("getListCellA") = BoomListView::getListCellA;
    boomlistview.attr("getListCellN") = "getListCell";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::getListCellA, BoomListView::getListCellH, (LPVOID*)&BoomListView::getListCellO_);

    boomlistview.def("loadCell", pybind::overload_cast<BoomListView*, TableViewCell*, int>(&BoomListView::loadCell));
    boomlistview.def("loadCell", pybind::overload_cast<pybind::function>(&BoomListView::loadCell));
    boomlistview.def("loadCellO", [](BoomListView* self, TableViewCell* p0, int p1) { return BoomListView::loadCellO(self, p0, p1); });
    boomlistview.attr("loadCellA") = BoomListView::loadCellA;
    boomlistview.attr("loadCellN") = "loadCell";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::loadCellA, BoomListView::loadCellH, (LPVOID*)&BoomListView::loadCellO_);

    auto boomscrolllayer = pybind::class_<BoomScrollLayer, cocos2d::CCLayer>(m, "BoomScrollLayer");
    boomscrolllayer.def("instantMoveToPage", pybind::overload_cast<BoomScrollLayer*, int>(&BoomScrollLayer::instantMoveToPage));
    boomscrolllayer.def("instantMoveToPage", pybind::overload_cast<pybind::function>(&BoomScrollLayer::instantMoveToPage));
    boomscrolllayer.def("instantMoveToPageO", [](BoomScrollLayer* self, int page) { return BoomScrollLayer::instantMoveToPageO(self, page); });
    boomscrolllayer.attr("instantMoveToPageA") = BoomScrollLayer::instantMoveToPageA;
    boomscrolllayer.attr("instantMoveToPageN") = "instantMoveToPage";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::instantMoveToPageA, BoomScrollLayer::instantMoveToPageH, (LPVOID*)&BoomScrollLayer::instantMoveToPageO_);

    boomscrolllayer.def("moveToPage", pybind::overload_cast<BoomScrollLayer*, int>(&BoomScrollLayer::moveToPage));
    boomscrolllayer.def("moveToPage", pybind::overload_cast<pybind::function>(&BoomScrollLayer::moveToPage));
    boomscrolllayer.def("moveToPageO", [](BoomScrollLayer* self, int page) { return BoomScrollLayer::moveToPageO(self, page); });
    boomscrolllayer.attr("moveToPageA") = BoomScrollLayer::moveToPageA;
    boomscrolllayer.attr("moveToPageN") = "moveToPage";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::moveToPageA, BoomScrollLayer::moveToPageH, (LPVOID*)&BoomScrollLayer::moveToPageO_);

    auto buttonsprite = pybind::class_<ButtonSprite, cocos2d::CCSprite>(m, "ButtonSprite");
    buttonsprite.def("create", pybind::overload_cast<const char*, int, int, float, bool, const char*, const char*, float>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<pybind::function>(&ButtonSprite::create));
    buttonsprite.def("createO", [](const char* caption, int width, int unknown, float scale, bool absoluteWidth, const char* font, const char* texture, float height) { return ButtonSprite::createO(caption, width, unknown, scale, absoluteWidth, font, texture, height); });
    buttonsprite.attr("createA") = ButtonSprite::createA;
    buttonsprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::createA, ButtonSprite::createH, (LPVOID*)&ButtonSprite::createO_);

    buttonsprite.def("create", pybind::overload_cast<cocos2d::CCSprite*, int, int, float, float, bool, const char*, bool>(&ButtonSprite::create));
    buttonsprite.def("updateBGImage", pybind::overload_cast<ButtonSprite*, const char*>(&ButtonSprite::updateBGImage));
    buttonsprite.def("updateBGImage", pybind::overload_cast<pybind::function>(&ButtonSprite::updateBGImage));
    buttonsprite.def("updateBGImageO", [](ButtonSprite* self, const char* p0) { return ButtonSprite::updateBGImageO(self, p0); });
    buttonsprite.attr("updateBGImageA") = ButtonSprite::updateBGImageA;
    buttonsprite.attr("updateBGImageN") = "updateBGImage";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::updateBGImageA, ButtonSprite::updateBGImageH, (LPVOID*)&ButtonSprite::updateBGImageO_);

    buttonsprite.def("setString", pybind::overload_cast<ButtonSprite*, const char*>(&ButtonSprite::setString));
    buttonsprite.def("setString", pybind::overload_cast<pybind::function>(&ButtonSprite::setString));
    buttonsprite.def("setStringO", [](ButtonSprite* self, const char* txt) { return ButtonSprite::setStringO(self, txt); });
    buttonsprite.attr("setStringA") = ButtonSprite::setStringA;
    buttonsprite.attr("setStringN") = "setString";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::setStringA, ButtonSprite::setStringH, (LPVOID*)&ButtonSprite::setStringO_);

    buttonsprite.def("updateSpriteBGSize", pybind::overload_cast<ButtonSprite*>(&ButtonSprite::updateSpriteBGSize));
    buttonsprite.def("updateSpriteBGSize", pybind::overload_cast<pybind::function>(&ButtonSprite::updateSpriteBGSize));
    buttonsprite.def("updateSpriteBGSizeO", [](ButtonSprite* self) { return ButtonSprite::updateSpriteBGSizeO(self); });
    buttonsprite.attr("updateSpriteBGSizeA") = ButtonSprite::updateSpriteBGSizeA;
    buttonsprite.attr("updateSpriteBGSizeN") = "updateSpriteBGSize";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::updateSpriteBGSizeA, ButtonSprite::updateSpriteBGSizeH, (LPVOID*)&ButtonSprite::updateSpriteBGSizeO_);

    buttonsprite.def("setColor", pybind::overload_cast<ButtonSprite*, cocos2d::ccColor3B>(&ButtonSprite::setColor));
    buttonsprite.def("setColor", pybind::overload_cast<pybind::function>(&ButtonSprite::setColor));
    buttonsprite.def("setColorO", [](ButtonSprite* self, cocos2d::ccColor3B color) { return ButtonSprite::setColorO(self, color); });
    buttonsprite.attr("setColorA") = ButtonSprite::setColorA;
    buttonsprite.attr("setColorN") = "setColor";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::setColorA, ButtonSprite::setColorH, (LPVOID*)&ButtonSprite::setColorO_);

    auto ccanimateframecache = pybind::class_<CCAnimateFrameCache, cocos2d::CCObject>(m, "CCAnimateFrameCache");
    ccanimateframecache.def("sharedSpriteFrameCache", pybind::overload_cast<>(&CCAnimateFrameCache::sharedSpriteFrameCache));
    ccanimateframecache.def("sharedSpriteFrameCache", pybind::overload_cast<pybind::function>(&CCAnimateFrameCache::sharedSpriteFrameCache));
    ccanimateframecache.def("sharedSpriteFrameCacheO", []() { return CCAnimateFrameCache::sharedSpriteFrameCacheO(); });
    ccanimateframecache.attr("sharedSpriteFrameCacheA") = CCAnimateFrameCache::sharedSpriteFrameCacheA;
    ccanimateframecache.attr("sharedSpriteFrameCacheN") = "sharedSpriteFrameCache";
    cinnamon::hooks::hookCinnamon((PVOID)CCAnimateFrameCache::sharedSpriteFrameCacheA, CCAnimateFrameCache::sharedSpriteFrameCacheH, (LPVOID*)&CCAnimateFrameCache::sharedSpriteFrameCacheO_);

    ccanimateframecache.def("addSpriteFramesWithFile", pybind::overload_cast<CCAnimateFrameCache*, const char*>(&CCAnimateFrameCache::addSpriteFramesWithFile));
    ccanimateframecache.def("addSpriteFramesWithFile", pybind::overload_cast<pybind::function>(&CCAnimateFrameCache::addSpriteFramesWithFile));
    ccanimateframecache.def("addSpriteFramesWithFileO", [](CCAnimateFrameCache* self, const char* file) { return CCAnimateFrameCache::addSpriteFramesWithFileO(self, file); });
    ccanimateframecache.attr("addSpriteFramesWithFileA") = CCAnimateFrameCache::addSpriteFramesWithFileA;
    ccanimateframecache.attr("addSpriteFramesWithFileN") = "addSpriteFramesWithFile";
    cinnamon::hooks::hookCinnamon((PVOID)CCAnimateFrameCache::addSpriteFramesWithFileA, CCAnimateFrameCache::addSpriteFramesWithFileH, (LPVOID*)&CCAnimateFrameCache::addSpriteFramesWithFileO_);

    auto ccblocklayer = pybind::class_<CCBlockLayer, cocos2d::CCLayerColor>(m, "CCBlockLayer");
    ccblocklayer.def("init", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::init));
    ccblocklayer.def("init", pybind::overload_cast<pybind::function>(&CCBlockLayer::init));
    ccblocklayer.def("initO", [](CCBlockLayer* self) { return CCBlockLayer::initO(self); });
    ccblocklayer.attr("initA") = CCBlockLayer::initA;
    ccblocklayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::initA, CCBlockLayer::initH, (LPVOID*)&CCBlockLayer::initO_);

    ccblocklayer.def("draw", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::draw));
    ccblocklayer.def("draw", pybind::overload_cast<pybind::function>(&CCBlockLayer::draw));
    ccblocklayer.def("drawO", [](CCBlockLayer* self) { return CCBlockLayer::drawO(self); });
    ccblocklayer.attr("drawA") = CCBlockLayer::drawA;
    ccblocklayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::drawA, CCBlockLayer::drawH, (LPVOID*)&CCBlockLayer::drawO_);

    ccblocklayer.def("registerWithTouchDispatcher", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::registerWithTouchDispatcher));
    ccblocklayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&CCBlockLayer::registerWithTouchDispatcher));
    ccblocklayer.def("registerWithTouchDispatcherO", [](CCBlockLayer* self) { return CCBlockLayer::registerWithTouchDispatcherO(self); });
    ccblocklayer.attr("registerWithTouchDispatcherA") = CCBlockLayer::registerWithTouchDispatcherA;
    ccblocklayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::registerWithTouchDispatcherA, CCBlockLayer::registerWithTouchDispatcherH, (LPVOID*)&CCBlockLayer::registerWithTouchDispatcherO_);

    ccblocklayer.def("enterLayer", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::enterLayer));
    ccblocklayer.def("enterLayer", pybind::overload_cast<pybind::function>(&CCBlockLayer::enterLayer));
    ccblocklayer.def("enterLayerO", [](CCBlockLayer* self) { return CCBlockLayer::enterLayerO(self); });
    ccblocklayer.attr("enterLayerA") = CCBlockLayer::enterLayerA;
    ccblocklayer.attr("enterLayerN") = "enterLayer";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::enterLayerA, CCBlockLayer::enterLayerH, (LPVOID*)&CCBlockLayer::enterLayerO_);

    ccblocklayer.def("exitLayer", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::exitLayer));
    ccblocklayer.def("exitLayer", pybind::overload_cast<pybind::function>(&CCBlockLayer::exitLayer));
    ccblocklayer.def("exitLayerO", [](CCBlockLayer* self) { return CCBlockLayer::exitLayerO(self); });
    ccblocklayer.attr("exitLayerA") = CCBlockLayer::exitLayerA;
    ccblocklayer.attr("exitLayerN") = "exitLayer";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::exitLayerA, CCBlockLayer::exitLayerH, (LPVOID*)&CCBlockLayer::exitLayerO_);

    ccblocklayer.def("showLayer", pybind::overload_cast<CCBlockLayer*, bool>(&CCBlockLayer::showLayer));
    ccblocklayer.def("showLayer", pybind::overload_cast<pybind::function>(&CCBlockLayer::showLayer));
    ccblocklayer.def("showLayerO", [](CCBlockLayer* self, bool p0) { return CCBlockLayer::showLayerO(self, p0); });
    ccblocklayer.attr("showLayerA") = CCBlockLayer::showLayerA;
    ccblocklayer.attr("showLayerN") = "showLayer";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::showLayerA, CCBlockLayer::showLayerH, (LPVOID*)&CCBlockLayer::showLayerO_);

    ccblocklayer.def("hideLayer", pybind::overload_cast<CCBlockLayer*, bool>(&CCBlockLayer::hideLayer));
    ccblocklayer.def("hideLayer", pybind::overload_cast<pybind::function>(&CCBlockLayer::hideLayer));
    ccblocklayer.def("hideLayerO", [](CCBlockLayer* self, bool p0) { return CCBlockLayer::hideLayerO(self, p0); });
    ccblocklayer.attr("hideLayerA") = CCBlockLayer::hideLayerA;
    ccblocklayer.attr("hideLayerN") = "hideLayer";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::hideLayerA, CCBlockLayer::hideLayerH, (LPVOID*)&CCBlockLayer::hideLayerO_);

    ccblocklayer.def("layerVisible", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::layerVisible));
    ccblocklayer.def("layerVisible", pybind::overload_cast<pybind::function>(&CCBlockLayer::layerVisible));
    ccblocklayer.def("layerVisibleO", [](CCBlockLayer* self) { return CCBlockLayer::layerVisibleO(self); });
    ccblocklayer.attr("layerVisibleA") = CCBlockLayer::layerVisibleA;
    ccblocklayer.attr("layerVisibleN") = "layerVisible";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::layerVisibleA, CCBlockLayer::layerVisibleH, (LPVOID*)&CCBlockLayer::layerVisibleO_);

    ccblocklayer.def("layerHidden", pybind::overload_cast<CCBlockLayer*>(&CCBlockLayer::layerHidden));
    ccblocklayer.def("layerHidden", pybind::overload_cast<pybind::function>(&CCBlockLayer::layerHidden));
    ccblocklayer.def("layerHiddenO", [](CCBlockLayer* self) { return CCBlockLayer::layerHiddenO(self); });
    ccblocklayer.attr("layerHiddenA") = CCBlockLayer::layerHiddenA;
    ccblocklayer.attr("layerHiddenN") = "layerHidden";
    cinnamon::hooks::hookCinnamon((PVOID)CCBlockLayer::layerHiddenA, CCBlockLayer::layerHiddenH, (LPVOID*)&CCBlockLayer::layerHiddenO_);

    auto cccirclewave = pybind::class_<CCCircleWave, cocos2d::CCNode>(m, "CCCircleWave");
    cccirclewave.def("create", pybind::overload_cast<float, float, float, bool, bool>(&CCCircleWave::create));
    cccirclewave.def("create", pybind::overload_cast<pybind::function>(&CCCircleWave::create));
    cccirclewave.def("createO", [](float p0, float p1, float p2, bool p3, bool p4) { return CCCircleWave::createO(p0, p1, p2, p3, p4); });
    cccirclewave.attr("createA") = CCCircleWave::createA;
    cccirclewave.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::createA, CCCircleWave::createH, (LPVOID*)&CCCircleWave::createO_);

    cccirclewave.def("init", pybind::overload_cast<CCCircleWave*, float, float, float, bool, bool>(&CCCircleWave::init));
    cccirclewave.def("init", pybind::overload_cast<pybind::function>(&CCCircleWave::init));
    cccirclewave.def("initO", [](CCCircleWave* self, float p0, float p1, float p2, bool p3, bool p4) { return CCCircleWave::initO(self, p0, p1, p2, p3, p4); });
    cccirclewave.attr("initA") = CCCircleWave::initA;
    cccirclewave.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::initA, CCCircleWave::initH, (LPVOID*)&CCCircleWave::initO_);

    cccirclewave.def("followObject", pybind::overload_cast<CCCircleWave*, cocos2d::CCNode*, bool>(&CCCircleWave::followObject));
    cccirclewave.def("followObject", pybind::overload_cast<pybind::function>(&CCCircleWave::followObject));
    cccirclewave.def("followObjectO", [](CCCircleWave* self, cocos2d::CCNode* p0, bool p1) { return CCCircleWave::followObjectO(self, p0, p1); });
    cccirclewave.attr("followObjectA") = CCCircleWave::followObjectA;
    cccirclewave.attr("followObjectN") = "followObject";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::followObjectA, CCCircleWave::followObjectH, (LPVOID*)&CCCircleWave::followObjectO_);

    cccirclewave.def("updatePosition", pybind::overload_cast<CCCircleWave*, float>(&CCCircleWave::updatePosition));
    cccirclewave.def("updatePosition", pybind::overload_cast<pybind::function>(&CCCircleWave::updatePosition));
    cccirclewave.def("updatePositionO", [](CCCircleWave* self, float p0) { return CCCircleWave::updatePositionO(self, p0); });
    cccirclewave.attr("updatePositionA") = CCCircleWave::updatePositionA;
    cccirclewave.attr("updatePositionN") = "updatePosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::updatePositionA, CCCircleWave::updatePositionH, (LPVOID*)&CCCircleWave::updatePositionO_);

    cccirclewave.def("setPosition", pybind::overload_cast<CCCircleWave*, cocos2d::CCPoint const&>(&CCCircleWave::setPosition));
    cccirclewave.def("setPosition", pybind::overload_cast<pybind::function>(&CCCircleWave::setPosition));
    cccirclewave.def("setPositionO", [](CCCircleWave* self, cocos2d::CCPoint const& pos) { return CCCircleWave::setPositionO(self, pos); });
    cccirclewave.attr("setPositionA") = CCCircleWave::setPositionA;
    cccirclewave.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::setPositionA, CCCircleWave::setPositionH, (LPVOID*)&CCCircleWave::setPositionO_);

    cccirclewave.def("removeMeAndCleanup", pybind::overload_cast<CCCircleWave*>(&CCCircleWave::removeMeAndCleanup));
    cccirclewave.def("removeMeAndCleanup", pybind::overload_cast<pybind::function>(&CCCircleWave::removeMeAndCleanup));
    cccirclewave.def("removeMeAndCleanupO", [](CCCircleWave* self) { return CCCircleWave::removeMeAndCleanupO(self); });
    cccirclewave.attr("removeMeAndCleanupA") = CCCircleWave::removeMeAndCleanupA;
    cccirclewave.attr("removeMeAndCleanupN") = "removeMeAndCleanup";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::removeMeAndCleanupA, CCCircleWave::removeMeAndCleanupH, (LPVOID*)&CCCircleWave::removeMeAndCleanupO_);

    cccirclewave.def("draw", pybind::overload_cast<CCCircleWave*>(&CCCircleWave::draw));
    cccirclewave.def("draw", pybind::overload_cast<pybind::function>(&CCCircleWave::draw));
    cccirclewave.def("drawO", [](CCCircleWave* self) { return CCCircleWave::drawO(self); });
    cccirclewave.attr("drawA") = CCCircleWave::drawA;
    cccirclewave.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::drawA, CCCircleWave::drawH, (LPVOID*)&CCCircleWave::drawO_);

    cccirclewave.def("updateTweenAction", pybind::overload_cast<CCCircleWave*, float, const char*>(&CCCircleWave::updateTweenAction));
    cccirclewave.def("updateTweenAction", pybind::overload_cast<pybind::function>(&CCCircleWave::updateTweenAction));
    cccirclewave.def("updateTweenActionO", [](CCCircleWave* self, float dt, const char* key) { return CCCircleWave::updateTweenActionO(self, dt, key); });
    cccirclewave.attr("updateTweenActionA") = CCCircleWave::updateTweenActionA;
    cccirclewave.attr("updateTweenActionN") = "updateTweenAction";
    cinnamon::hooks::hookCinnamon((PVOID)CCCircleWave::updateTweenActionA, CCCircleWave::updateTweenActionH, (LPVOID*)&CCCircleWave::updateTweenActionO_);

    auto cccirclewavedelegate = pybind::class_<CCCircleWaveDelegate>(m, "CCCircleWaveDelegate");
    auto cccontentlayer = pybind::class_<CCContentLayer, cocos2d::CCLayerColor>(m, "CCContentLayer");
    cccontentlayer.def("create", pybind::overload_cast<cocos2d::ccColor4B const&, float, float>(&CCContentLayer::create));
    cccontentlayer.def("create", pybind::overload_cast<pybind::function>(&CCContentLayer::create));
    cccontentlayer.def("createO", [](cocos2d::ccColor4B const& color, float width, float height) { return CCContentLayer::createO(color, width, height); });
    cccontentlayer.attr("createA") = CCContentLayer::createA;
    cccontentlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCContentLayer::createA, CCContentLayer::createH, (LPVOID*)&CCContentLayer::createO_);

    cccontentlayer.def("setPosition", pybind::overload_cast<CCContentLayer*, cocos2d::CCPoint const&>(&CCContentLayer::setPosition));
    cccontentlayer.def("setPosition", pybind::overload_cast<pybind::function>(&CCContentLayer::setPosition));
    cccontentlayer.def("setPositionO", [](CCContentLayer* self, cocos2d::CCPoint const& pos) { return CCContentLayer::setPositionO(self, pos); });
    cccontentlayer.attr("setPositionA") = CCContentLayer::setPositionA;
    cccontentlayer.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCContentLayer::setPositionA, CCContentLayer::setPositionH, (LPVOID*)&CCContentLayer::setPositionO_);

    auto cclightflash = pybind::class_<CCLightFlash>(m, "CCLightFlash");
    cclightflash.def("create", pybind::overload_cast<>(&CCLightFlash::create));
    cclightflash.def("create", pybind::overload_cast<pybind::function>(&CCLightFlash::create));
    cclightflash.def("createO", []() { return CCLightFlash::createO(); });
    cclightflash.attr("createA") = CCLightFlash::createA;
    cclightflash.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCLightFlash::createA, CCLightFlash::createH, (LPVOID*)&CCLightFlash::createO_);

    cclightflash.def("playEffect", pybind::overload_cast<CCLightFlash*, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float>(&CCLightFlash::playEffect));
    cclightflash.def("playEffect", pybind::overload_cast<pybind::function>(&CCLightFlash::playEffect));
    cclightflash.def("playEffectO", [](CCLightFlash* self, cocos2d::CCPoint p0, cocos2d::_ccColor3B p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13, float p14, float p15, int p16, bool p17, bool p18, float p19) { return CCLightFlash::playEffectO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19); });
    cclightflash.attr("playEffectA") = CCLightFlash::playEffectA;
    cclightflash.attr("playEffectN") = "playEffect";
    cinnamon::hooks::hookCinnamon((PVOID)CCLightFlash::playEffectA, CCLightFlash::playEffectH, (LPVOID*)&CCLightFlash::playEffectO_);

    auto ccmenuitemtoggler = pybind::class_<CCMenuItemToggler, cocos2d::CCMenuItem>(m, "CCMenuItemToggler");
    ccmenuitemtoggler.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler>(&CCMenuItemToggler::create));
    ccmenuitemtoggler.def("create", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::create));
    ccmenuitemtoggler.def("createO", [](cocos2d::CCNode* offSpr, cocos2d::CCNode* onSpr, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) { return CCMenuItemToggler::createO(offSpr, onSpr, target, callback); });
    ccmenuitemtoggler.attr("createA") = CCMenuItemToggler::createA;
    ccmenuitemtoggler.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::createA, CCMenuItemToggler::createH, (LPVOID*)&CCMenuItemToggler::createO_);

    ccmenuitemtoggler.def("setSizeMult", pybind::overload_cast<CCMenuItemToggler*, float>(&CCMenuItemToggler::setSizeMult));
    ccmenuitemtoggler.def("setSizeMult", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::setSizeMult));
    ccmenuitemtoggler.def("setSizeMultO", [](CCMenuItemToggler* self, float p0) { return CCMenuItemToggler::setSizeMultO(self, p0); });
    ccmenuitemtoggler.attr("setSizeMultA") = CCMenuItemToggler::setSizeMultA;
    ccmenuitemtoggler.attr("setSizeMultN") = "setSizeMult";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::setSizeMultA, CCMenuItemToggler::setSizeMultH, (LPVOID*)&CCMenuItemToggler::setSizeMultO_);

    ccmenuitemtoggler.def("toggle", pybind::overload_cast<CCMenuItemToggler*, bool>(&CCMenuItemToggler::toggle));
    ccmenuitemtoggler.def("toggle", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::toggle));
    ccmenuitemtoggler.def("toggleO", [](CCMenuItemToggler* self, bool p0) { return CCMenuItemToggler::toggleO(self, p0); });
    ccmenuitemtoggler.attr("toggleA") = CCMenuItemToggler::toggleA;
    ccmenuitemtoggler.attr("toggleN") = "toggle";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::toggleA, CCMenuItemToggler::toggleH, (LPVOID*)&CCMenuItemToggler::toggleO_);

    ccmenuitemtoggler.def("init", pybind::overload_cast<CCMenuItemToggler*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler>(&CCMenuItemToggler::init));
    ccmenuitemtoggler.def("init", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::init));
    ccmenuitemtoggler.def("initO", [](CCMenuItemToggler* self, cocos2d::CCNode* off, cocos2d::CCNode* on, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler handler) { return CCMenuItemToggler::initO(self, off, on, target, handler); });
    ccmenuitemtoggler.attr("initA") = CCMenuItemToggler::initA;
    ccmenuitemtoggler.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::initA, CCMenuItemToggler::initH, (LPVOID*)&CCMenuItemToggler::initO_);

    ccmenuitemtoggler.def("activate", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::activate));
    ccmenuitemtoggler.def("activate", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::activate));
    ccmenuitemtoggler.def("activateO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::activateO(self); });
    ccmenuitemtoggler.attr("activateA") = CCMenuItemToggler::activateA;
    ccmenuitemtoggler.attr("activateN") = "activate";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::activateA, CCMenuItemToggler::activateH, (LPVOID*)&CCMenuItemToggler::activateO_);

    ccmenuitemtoggler.def("selected", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::selected));
    ccmenuitemtoggler.def("selected", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::selected));
    ccmenuitemtoggler.def("selectedO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::selectedO(self); });
    ccmenuitemtoggler.attr("selectedA") = CCMenuItemToggler::selectedA;
    ccmenuitemtoggler.attr("selectedN") = "selected";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::selectedA, CCMenuItemToggler::selectedH, (LPVOID*)&CCMenuItemToggler::selectedO_);

    ccmenuitemtoggler.def("unselected", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::unselected));
    ccmenuitemtoggler.def("unselected", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::unselected));
    ccmenuitemtoggler.def("unselectedO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::unselectedO(self); });
    ccmenuitemtoggler.attr("unselectedA") = CCMenuItemToggler::unselectedA;
    ccmenuitemtoggler.attr("unselectedN") = "unselected";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::unselectedA, CCMenuItemToggler::unselectedH, (LPVOID*)&CCMenuItemToggler::unselectedO_);

    ccmenuitemtoggler.def("setEnabled", pybind::overload_cast<CCMenuItemToggler*, bool>(&CCMenuItemToggler::setEnabled));
    ccmenuitemtoggler.def("setEnabled", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::setEnabled));
    ccmenuitemtoggler.def("setEnabledO", [](CCMenuItemToggler* self, bool enabled) { return CCMenuItemToggler::setEnabledO(self, enabled); });
    ccmenuitemtoggler.attr("setEnabledA") = CCMenuItemToggler::setEnabledA;
    ccmenuitemtoggler.attr("setEnabledN") = "setEnabled";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::setEnabledA, CCMenuItemToggler::setEnabledH, (LPVOID*)&CCMenuItemToggler::setEnabledO_);

    auto ccmovecnode = pybind::class_<CCMoveCNode, cocos2d::CCNode>(m, "CCMoveCNode");
    ccmovecnode.def("create", pybind::overload_cast<>(&CCMoveCNode::create));
    ccmovecnode.def("create", pybind::overload_cast<pybind::function>(&CCMoveCNode::create));
    ccmovecnode.def("createO", []() { return CCMoveCNode::createO(); });
    ccmovecnode.attr("createA") = CCMoveCNode::createA;
    ccmovecnode.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCMoveCNode::createA, CCMoveCNode::createH, (LPVOID*)&CCMoveCNode::createO_);

    auto groupcommandobject = pybind::class_<GroupCommandObject, cocos2d::CCNode>(m, "GroupCommandObject");
    auto ccnodecontainer = pybind::class_<CCNodeContainer, cocos2d::CCNode>(m, "CCNodeContainer");
    ccnodecontainer.def("create", pybind::overload_cast<>(&CCNodeContainer::create));
    ccnodecontainer.def("create", pybind::overload_cast<pybind::function>(&CCNodeContainer::create));
    ccnodecontainer.def("createO", []() { return CCNodeContainer::createO(); });
    ccnodecontainer.attr("createA") = CCNodeContainer::createA;
    ccnodecontainer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCNodeContainer::createA, CCNodeContainer::createH, (LPVOID*)&CCNodeContainer::createO_);

    ccnodecontainer.def("init", pybind::overload_cast<CCNodeContainer*>(&CCNodeContainer::init));
    ccnodecontainer.def("init", pybind::overload_cast<pybind::function>(&CCNodeContainer::init));
    ccnodecontainer.def("initO", [](CCNodeContainer* self) { return CCNodeContainer::initO(self); });
    ccnodecontainer.attr("initA") = CCNodeContainer::initA;
    ccnodecontainer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CCNodeContainer::initA, CCNodeContainer::initH, (LPVOID*)&CCNodeContainer::initO_);

    ccnodecontainer.def("visit", pybind::overload_cast<CCNodeContainer*>(&CCNodeContainer::visit));
    ccnodecontainer.def("visit", pybind::overload_cast<pybind::function>(&CCNodeContainer::visit));
    ccnodecontainer.def("visitO", [](CCNodeContainer* self) { return CCNodeContainer::visitO(self); });
    ccnodecontainer.attr("visitA") = CCNodeContainer::visitA;
    ccnodecontainer.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)CCNodeContainer::visitA, CCNodeContainer::visitH, (LPVOID*)&CCNodeContainer::visitO_);

    auto ccscrolllayerext = pybind::class_<CCScrollLayerExt, cocos2d::CCLayer>(m, "CCScrollLayerExt");
    ccscrolllayerext.def("visit", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::visit));
    ccscrolllayerext.def("visit", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::visit));
    ccscrolllayerext.def("visitO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::visitO(self); });
    ccscrolllayerext.attr("visitA") = CCScrollLayerExt::visitA;
    ccscrolllayerext.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::visitA, CCScrollLayerExt::visitH, (LPVOID*)&CCScrollLayerExt::visitO_);

    ccscrolllayerext.def("registerWithTouchDispatcher", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::registerWithTouchDispatcher));
    ccscrolllayerext.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::registerWithTouchDispatcher));
    ccscrolllayerext.def("registerWithTouchDispatcherO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::registerWithTouchDispatcherO(self); });
    ccscrolllayerext.attr("registerWithTouchDispatcherA") = CCScrollLayerExt::registerWithTouchDispatcherA;
    ccscrolllayerext.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::registerWithTouchDispatcherA, CCScrollLayerExt::registerWithTouchDispatcherH, (LPVOID*)&CCScrollLayerExt::registerWithTouchDispatcherO_);

    ccscrolllayerext.def("preVisitWithClippingRect", pybind::overload_cast<CCScrollLayerExt*, cocos2d::CCRect>(&CCScrollLayerExt::preVisitWithClippingRect));
    ccscrolllayerext.def("preVisitWithClippingRect", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::preVisitWithClippingRect));
    ccscrolllayerext.def("preVisitWithClippingRectO", [](CCScrollLayerExt* self, cocos2d::CCRect p0) { return CCScrollLayerExt::preVisitWithClippingRectO(self, p0); });
    ccscrolllayerext.attr("preVisitWithClippingRectA") = CCScrollLayerExt::preVisitWithClippingRectA;
    ccscrolllayerext.attr("preVisitWithClippingRectN") = "preVisitWithClippingRect";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::preVisitWithClippingRectA, CCScrollLayerExt::preVisitWithClippingRectH, (LPVOID*)&CCScrollLayerExt::preVisitWithClippingRectO_);

    ccscrolllayerext.def("postVisit", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::postVisit));
    ccscrolllayerext.def("postVisit", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::postVisit));
    ccscrolllayerext.def("postVisitO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::postVisitO(self); });
    ccscrolllayerext.attr("postVisitA") = CCScrollLayerExt::postVisitA;
    ccscrolllayerext.attr("postVisitN") = "postVisit";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::postVisitA, CCScrollLayerExt::postVisitH, (LPVOID*)&CCScrollLayerExt::postVisitO_);

    ccscrolllayerext.def("moveToTop", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::moveToTop));
    ccscrolllayerext.def("moveToTop", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::moveToTop));
    ccscrolllayerext.def("moveToTopO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::moveToTopO(self); });
    ccscrolllayerext.attr("moveToTopA") = CCScrollLayerExt::moveToTopA;
    ccscrolllayerext.attr("moveToTopN") = "moveToTop";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::moveToTopA, CCScrollLayerExt::moveToTopH, (LPVOID*)&CCScrollLayerExt::moveToTopO_);

    ccscrolllayerext.def("moveToTopWithOffset", pybind::overload_cast<CCScrollLayerExt*, float>(&CCScrollLayerExt::moveToTopWithOffset));
    ccscrolllayerext.def("moveToTopWithOffset", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::moveToTopWithOffset));
    ccscrolllayerext.def("moveToTopWithOffsetO", [](CCScrollLayerExt* self, float p0) { return CCScrollLayerExt::moveToTopWithOffsetO(self, p0); });
    ccscrolllayerext.attr("moveToTopWithOffsetA") = CCScrollLayerExt::moveToTopWithOffsetA;
    ccscrolllayerext.attr("moveToTopWithOffsetN") = "moveToTopWithOffset";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::moveToTopWithOffsetA, CCScrollLayerExt::moveToTopWithOffsetH, (LPVOID*)&CCScrollLayerExt::moveToTopWithOffsetO_);

    ccscrolllayerext.def("scrollLayer", pybind::overload_cast<CCScrollLayerExt*, float>(&CCScrollLayerExt::scrollLayer));
    ccscrolllayerext.def("scrollLayer", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::scrollLayer));
    ccscrolllayerext.def("scrollLayerO", [](CCScrollLayerExt* self, float scroll) { return CCScrollLayerExt::scrollLayerO(self, scroll); });
    ccscrolllayerext.attr("scrollLayerA") = CCScrollLayerExt::scrollLayerA;
    ccscrolllayerext.attr("scrollLayerN") = "scrollLayer";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::scrollLayerA, CCScrollLayerExt::scrollLayerH, (LPVOID*)&CCScrollLayerExt::scrollLayerO_);

    ccscrolllayerext.def("updateIndicators", pybind::overload_cast<CCScrollLayerExt*, float>(&CCScrollLayerExt::updateIndicators));
    ccscrolllayerext.def("updateIndicators", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::updateIndicators));
    ccscrolllayerext.def("updateIndicatorsO", [](CCScrollLayerExt* self, float unknown) { return CCScrollLayerExt::updateIndicatorsO(self, unknown); });
    ccscrolllayerext.attr("updateIndicatorsA") = CCScrollLayerExt::updateIndicatorsA;
    ccscrolllayerext.attr("updateIndicatorsN") = "updateIndicators";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::updateIndicatorsA, CCScrollLayerExt::updateIndicatorsH, (LPVOID*)&CCScrollLayerExt::updateIndicatorsO_);

    auto ccscrolllayerextdelegate = pybind::class_<CCScrollLayerExtDelegate>(m, "CCScrollLayerExtDelegate");
    auto ccspritepart = pybind::class_<CCSpritePart, CCSpritePlus>(m, "CCSpritePart");
    auto challengespage = pybind::class_<ChallengesPage>(m, "ChallengesPage");
    challengespage.def("create", pybind::overload_cast<>(&ChallengesPage::create));
    challengespage.def("create", pybind::overload_cast<pybind::function>(&ChallengesPage::create));
    challengespage.def("createO", []() { return ChallengesPage::createO(); });
    challengespage.attr("createA") = ChallengesPage::createA;
    challengespage.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ChallengesPage::createA, ChallengesPage::createH, (LPVOID*)&ChallengesPage::createO_);

    auto checkpointobject = pybind::class_<CheckpointObject, cocos2d::CCNode>(m, "CheckpointObject");
    checkpointobject.def("create", pybind::overload_cast<>(&CheckpointObject::create));
    checkpointobject.def("create", pybind::overload_cast<pybind::function>(&CheckpointObject::create));
    checkpointobject.def("createO", []() { return CheckpointObject::createO(); });
    checkpointobject.attr("createA") = CheckpointObject::createA;
    checkpointobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CheckpointObject::createA, CheckpointObject::createH, (LPVOID*)&CheckpointObject::createO_);

    auto collisionblockpopup = pybind::class_<CollisionBlockPopup>(m, "CollisionBlockPopup");
    auto collisiontriggeraction = pybind::class_<CollisionTriggerAction, cocos2d::CCNode>(m, "CollisionTriggerAction");
    auto coloraction = pybind::class_<ColorAction, cocos2d::CCNode>(m, "ColorAction");
    coloraction.def("create", pybind::overload_cast<>(&ColorAction::create));
    coloraction.def("create", pybind::overload_cast<pybind::function>(&ColorAction::create));
    coloraction.def("createO", []() { return ColorAction::createO(); });
    coloraction.attr("createA") = ColorAction::createA;
    coloraction.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ColorAction::createA, ColorAction::createH, (LPVOID*)&ColorAction::createO_);

    coloraction.def("create", pybind::overload_cast<cocos2d::ccColor3B, cocos2d::ccColor3B, float, double, bool, int, float, float>(&ColorAction::create));
    coloraction.def("getSaveString", pybind::overload_cast<ColorAction*>(&ColorAction::getSaveString));
    coloraction.def("getSaveString", pybind::overload_cast<pybind::function>(&ColorAction::getSaveString));
    coloraction.def("getSaveStringO", [](ColorAction* self) { return ColorAction::getSaveStringO(self); });
    coloraction.attr("getSaveStringA") = ColorAction::getSaveStringA;
    coloraction.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)ColorAction::getSaveStringA, ColorAction::getSaveStringH, (LPVOID*)&ColorAction::getSaveStringO_);

    coloraction.def("setupFromDict", pybind::overload_cast<ColorAction*, cocos2d::CCDictionary*>(&ColorAction::setupFromDict));
    coloraction.def("setupFromDict", pybind::overload_cast<pybind::function>(&ColorAction::setupFromDict));
    coloraction.def("setupFromDictO", [](ColorAction* self, cocos2d::CCDictionary* p0) { return ColorAction::setupFromDictO(self, p0); });
    coloraction.attr("setupFromDictA") = ColorAction::setupFromDictA;
    coloraction.attr("setupFromDictN") = "setupFromDict";
    cinnamon::hooks::hookCinnamon((PVOID)ColorAction::setupFromDictA, ColorAction::setupFromDictH, (LPVOID*)&ColorAction::setupFromDictO_);

    coloraction.def("setupFromString", pybind::overload_cast<ColorAction*, gd::string>(&ColorAction::setupFromString));
    coloraction.def("setupFromString", pybind::overload_cast<pybind::function>(&ColorAction::setupFromString));
    coloraction.def("setupFromStringO", [](ColorAction* self, gd::string p0) { return ColorAction::setupFromStringO(self, p0); });
    coloraction.attr("setupFromStringA") = ColorAction::setupFromStringA;
    coloraction.attr("setupFromStringN") = "setupFromString";
    cinnamon::hooks::hookCinnamon((PVOID)ColorAction::setupFromStringA, ColorAction::setupFromStringH, (LPVOID*)&ColorAction::setupFromStringO_);

    auto coloractionsprite = pybind::class_<ColorActionSprite, cocos2d::CCNode>(m, "ColorActionSprite");
    auto colorchannelsprite = pybind::class_<ColorChannelSprite, cocos2d::CCSprite>(m, "ColorChannelSprite");
    colorchannelsprite.def("updateBlending", pybind::overload_cast<ColorChannelSprite*, bool>(&ColorChannelSprite::updateBlending));
    colorchannelsprite.def("updateBlending", pybind::overload_cast<pybind::function>(&ColorChannelSprite::updateBlending));
    colorchannelsprite.def("updateBlendingO", [](ColorChannelSprite* self, bool p0) { return ColorChannelSprite::updateBlendingO(self, p0); });
    colorchannelsprite.attr("updateBlendingA") = ColorChannelSprite::updateBlendingA;
    colorchannelsprite.attr("updateBlendingN") = "updateBlending";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::updateBlendingA, ColorChannelSprite::updateBlendingH, (LPVOID*)&ColorChannelSprite::updateBlendingO_);

    colorchannelsprite.def("updateCopyLabel", pybind::overload_cast<ColorChannelSprite*, int, bool>(&ColorChannelSprite::updateCopyLabel));
    colorchannelsprite.def("updateCopyLabel", pybind::overload_cast<pybind::function>(&ColorChannelSprite::updateCopyLabel));
    colorchannelsprite.def("updateCopyLabelO", [](ColorChannelSprite* self, int p0, bool p1) { return ColorChannelSprite::updateCopyLabelO(self, p0, p1); });
    colorchannelsprite.attr("updateCopyLabelA") = ColorChannelSprite::updateCopyLabelA;
    colorchannelsprite.attr("updateCopyLabelN") = "updateCopyLabel";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::updateCopyLabelA, ColorChannelSprite::updateCopyLabelH, (LPVOID*)&ColorChannelSprite::updateCopyLabelO_);

    colorchannelsprite.def("updateOpacity", pybind::overload_cast<ColorChannelSprite*, float>(&ColorChannelSprite::updateOpacity));
    colorchannelsprite.def("updateOpacity", pybind::overload_cast<pybind::function>(&ColorChannelSprite::updateOpacity));
    colorchannelsprite.def("updateOpacityO", [](ColorChannelSprite* self, float p0) { return ColorChannelSprite::updateOpacityO(self, p0); });
    colorchannelsprite.attr("updateOpacityA") = ColorChannelSprite::updateOpacityA;
    colorchannelsprite.attr("updateOpacityN") = "updateOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::updateOpacityA, ColorChannelSprite::updateOpacityH, (LPVOID*)&ColorChannelSprite::updateOpacityO_);

    colorchannelsprite.def("updateValues", pybind::overload_cast<ColorChannelSprite*, ColorAction*>(&ColorChannelSprite::updateValues));
    colorchannelsprite.def("updateValues", pybind::overload_cast<pybind::function>(&ColorChannelSprite::updateValues));
    colorchannelsprite.def("updateValuesO", [](ColorChannelSprite* self, ColorAction* p0) { return ColorChannelSprite::updateValuesO(self, p0); });
    colorchannelsprite.attr("updateValuesA") = ColorChannelSprite::updateValuesA;
    colorchannelsprite.attr("updateValuesN") = "updateValues";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::updateValuesA, ColorChannelSprite::updateValuesH, (LPVOID*)&ColorChannelSprite::updateValuesO_);

    colorchannelsprite.def("create", pybind::overload_cast<>(&ColorChannelSprite::create));
    colorchannelsprite.def("create", pybind::overload_cast<pybind::function>(&ColorChannelSprite::create));
    colorchannelsprite.def("createO", []() { return ColorChannelSprite::createO(); });
    colorchannelsprite.attr("createA") = ColorChannelSprite::createA;
    colorchannelsprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::createA, ColorChannelSprite::createH, (LPVOID*)&ColorChannelSprite::createO_);

    auto colorselectdelegate = pybind::class_<ColorSelectDelegate>(m, "ColorSelectDelegate");
    auto flalertlayer = pybind::class_<FLAlertLayer, cocos2d::CCLayerColor>(m, "FLAlertLayer");
    flalertlayer.def("onEnter", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::onEnter));
    flalertlayer.def("onEnter", pybind::overload_cast<pybind::function>(&FLAlertLayer::onEnter));
    flalertlayer.def("onEnterO", [](FLAlertLayer* self) { return FLAlertLayer::onEnterO(self); });
    flalertlayer.attr("onEnterA") = FLAlertLayer::onEnterA;
    flalertlayer.attr("onEnterN") = "onEnter";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::onEnterA, FLAlertLayer::onEnterH, (LPVOID*)&FLAlertLayer::onEnterO_);

    flalertlayer.def("registerWithTouchDispatcher", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::registerWithTouchDispatcher));
    flalertlayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&FLAlertLayer::registerWithTouchDispatcher));
    flalertlayer.def("registerWithTouchDispatcherO", [](FLAlertLayer* self) { return FLAlertLayer::registerWithTouchDispatcherO(self); });
    flalertlayer.attr("registerWithTouchDispatcherA") = FLAlertLayer::registerWithTouchDispatcherA;
    flalertlayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::registerWithTouchDispatcherA, FLAlertLayer::registerWithTouchDispatcherH, (LPVOID*)&FLAlertLayer::registerWithTouchDispatcherO_);

    flalertlayer.def("keyBackClicked", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::keyBackClicked));
    flalertlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&FLAlertLayer::keyBackClicked));
    flalertlayer.def("keyBackClickedO", [](FLAlertLayer* self) { return FLAlertLayer::keyBackClickedO(self); });
    flalertlayer.attr("keyBackClickedA") = FLAlertLayer::keyBackClickedA;
    flalertlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::keyBackClickedA, FLAlertLayer::keyBackClickedH, (LPVOID*)&FLAlertLayer::keyBackClickedO_);

    flalertlayer.def("keyDown", pybind::overload_cast<FLAlertLayer*, cocos2d::enumKeyCodes>(&FLAlertLayer::keyDown));
    flalertlayer.def("keyDown", pybind::overload_cast<pybind::function>(&FLAlertLayer::keyDown));
    flalertlayer.def("keyDownO", [](FLAlertLayer* self, cocos2d::enumKeyCodes p0) { return FLAlertLayer::keyDownO(self, p0); });
    flalertlayer.attr("keyDownA") = FLAlertLayer::keyDownA;
    flalertlayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::keyDownA, FLAlertLayer::keyDownH, (LPVOID*)&FLAlertLayer::keyDownO_);

    flalertlayer.def("show", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::show));
    flalertlayer.def("show", pybind::overload_cast<pybind::function>(&FLAlertLayer::show));
    flalertlayer.def("showO", [](FLAlertLayer* self) { return FLAlertLayer::showO(self); });
    flalertlayer.attr("showA") = FLAlertLayer::showA;
    flalertlayer.attr("showN") = "show";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::showA, FLAlertLayer::showH, (LPVOID*)&FLAlertLayer::showO_);

    flalertlayer.def("init", pybind::overload_cast<FLAlertLayer*, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float>(&FLAlertLayer::init));
    flalertlayer.def("init", pybind::overload_cast<pybind::function>(&FLAlertLayer::init));
    flalertlayer.def("initO", [](FLAlertLayer* self, FLAlertLayerProtocol* protocol, char const* title, gd::string content, char const* btn1, char const* btn2, float width, bool scrollable, float height) { return FLAlertLayer::initO(self, protocol, title, content, btn1, btn2, width, scrollable, height); });
    flalertlayer.attr("initA") = FLAlertLayer::initA;
    flalertlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::initA, FLAlertLayer::initH, (LPVOID*)&FLAlertLayer::initO_);

    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*>(&FLAlertLayer::create));
    flalertlayer.def("create", pybind::overload_cast<pybind::function>(&FLAlertLayer::create));
    flalertlayer.def("createO", [](FLAlertLayerProtocol* protocol, char const* title, gd::string content, char const* btn1, char const* btn2) { return FLAlertLayer::createO(protocol, title, content, btn1, btn2); });
    flalertlayer.attr("createA") = FLAlertLayer::createA;
    flalertlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::createA, FLAlertLayer::createH, (LPVOID*)&FLAlertLayer::createO_);

    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float>(&FLAlertLayer::create));
    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float>(&FLAlertLayer::create));
    flalertlayer.def("onBtn1", pybind::overload_cast<FLAlertLayer*, cocos2d::CCObject*>(&FLAlertLayer::onBtn1));
    flalertlayer.def("onBtn1", pybind::overload_cast<pybind::function>(&FLAlertLayer::onBtn1));
    flalertlayer.def("onBtn1O", [](FLAlertLayer* self, cocos2d::CCObject* p0) { return FLAlertLayer::onBtn1O(self, p0); });
    flalertlayer.attr("onBtn1A") = FLAlertLayer::onBtn1A;
    flalertlayer.attr("onBtn1N") = "onBtn1";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::onBtn1A, FLAlertLayer::onBtn1H, (LPVOID*)&FLAlertLayer::onBtn1O_);

    flalertlayer.def("onBtn2", pybind::overload_cast<FLAlertLayer*, cocos2d::CCObject*>(&FLAlertLayer::onBtn2));
    flalertlayer.def("onBtn2", pybind::overload_cast<pybind::function>(&FLAlertLayer::onBtn2));
    flalertlayer.def("onBtn2O", [](FLAlertLayer* self, cocos2d::CCObject* p0) { return FLAlertLayer::onBtn2O(self, p0); });
    flalertlayer.attr("onBtn2A") = FLAlertLayer::onBtn2A;
    flalertlayer.attr("onBtn2N") = "onBtn2";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::onBtn2A, FLAlertLayer::onBtn2H, (LPVOID*)&FLAlertLayer::onBtn2O_);

    auto colorselectliveoverlay = pybind::class_<ColorSelectLiveOverlay, FLAlertLayer>(m, "ColorSelectLiveOverlay");
    colorselectliveoverlay.def("init", pybind::overload_cast<ColorSelectLiveOverlay*, ColorAction*, ColorAction*, EffectGameObject*>(&ColorSelectLiveOverlay::init));
    colorselectliveoverlay.def("init", pybind::overload_cast<pybind::function>(&ColorSelectLiveOverlay::init));
    colorselectliveoverlay.def("initO", [](ColorSelectLiveOverlay* self, ColorAction* p0, ColorAction* p1, EffectGameObject* p2) { return ColorSelectLiveOverlay::initO(self, p0, p1, p2); });
    colorselectliveoverlay.attr("initA") = ColorSelectLiveOverlay::initA;
    colorselectliveoverlay.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ColorSelectLiveOverlay::initA, ColorSelectLiveOverlay::initH, (LPVOID*)&ColorSelectLiveOverlay::initO_);

    colorselectliveoverlay.def("onSelectTab", pybind::overload_cast<ColorSelectLiveOverlay*, cocos2d::CCObject*>(&ColorSelectLiveOverlay::onSelectTab));
    colorselectliveoverlay.def("onSelectTab", pybind::overload_cast<pybind::function>(&ColorSelectLiveOverlay::onSelectTab));
    colorselectliveoverlay.def("onSelectTabO", [](ColorSelectLiveOverlay* self, cocos2d::CCObject* p0) { return ColorSelectLiveOverlay::onSelectTabO(self, p0); });
    colorselectliveoverlay.attr("onSelectTabA") = ColorSelectLiveOverlay::onSelectTabA;
    colorselectliveoverlay.attr("onSelectTabN") = "onSelectTab";
    cinnamon::hooks::hookCinnamon((PVOID)ColorSelectLiveOverlay::onSelectTabA, ColorSelectLiveOverlay::onSelectTabH, (LPVOID*)&ColorSelectLiveOverlay::onSelectTabO_);

    auto colorsetupdelegate = pybind::class_<ColorSetupDelegate>(m, "ColorSetupDelegate");
    auto likeitemdelegate = pybind::class_<LikeItemDelegate>(m, "LikeItemDelegate");
    auto flalertlayerprotocol = pybind::class_<FLAlertLayerProtocol>(m, "FLAlertLayerProtocol");
    auto commentcell = pybind::class_<CommentCell, TableViewCell>(m, "CommentCell");
    commentcell.def("loadFromComment", pybind::overload_cast<CommentCell*, GJComment*>(&CommentCell::loadFromComment));
    commentcell.def("loadFromComment", pybind::overload_cast<pybind::function>(&CommentCell::loadFromComment));
    commentcell.def("loadFromCommentO", [](CommentCell* self, GJComment* p0) { return CommentCell::loadFromCommentO(self, p0); });
    commentcell.attr("loadFromCommentA") = CommentCell::loadFromCommentA;
    commentcell.attr("loadFromCommentN") = "loadFromComment";
    cinnamon::hooks::hookCinnamon((PVOID)CommentCell::loadFromCommentA, CommentCell::loadFromCommentH, (LPVOID*)&CommentCell::loadFromCommentO_);

    commentcell.def("onConfirmDelete", pybind::overload_cast<CommentCell*, cocos2d::CCObject*>(&CommentCell::onConfirmDelete));
    commentcell.def("onConfirmDelete", pybind::overload_cast<pybind::function>(&CommentCell::onConfirmDelete));
    commentcell.def("onConfirmDeleteO", [](CommentCell* self, cocos2d::CCObject* sender) { return CommentCell::onConfirmDeleteO(self, sender); });
    commentcell.attr("onConfirmDeleteA") = CommentCell::onConfirmDeleteA;
    commentcell.attr("onConfirmDeleteN") = "onConfirmDelete";
    cinnamon::hooks::hookCinnamon((PVOID)CommentCell::onConfirmDeleteA, CommentCell::onConfirmDeleteH, (LPVOID*)&CommentCell::onConfirmDeleteO_);

    commentcell.def("onLike", pybind::overload_cast<CommentCell*, cocos2d::CCObject*>(&CommentCell::onLike));
    commentcell.def("onLike", pybind::overload_cast<pybind::function>(&CommentCell::onLike));
    commentcell.def("onLikeO", [](CommentCell* self, cocos2d::CCObject* sender) { return CommentCell::onLikeO(self, sender); });
    commentcell.attr("onLikeA") = CommentCell::onLikeA;
    commentcell.attr("onLikeN") = "onLike";
    cinnamon::hooks::hookCinnamon((PVOID)CommentCell::onLikeA, CommentCell::onLikeH, (LPVOID*)&CommentCell::onLikeO_);

    commentcell.def("FLAlert_Clicked", pybind::overload_cast<CommentCell*, FLAlertLayer*, bool>(&CommentCell::FLAlert_Clicked));
    commentcell.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&CommentCell::FLAlert_Clicked));
    commentcell.def("FLAlert_ClickedO", [](CommentCell* self, FLAlertLayer* layer, bool btn) { return CommentCell::FLAlert_ClickedO(self, layer, btn); });
    commentcell.attr("FLAlert_ClickedA") = CommentCell::FLAlert_ClickedA;
    commentcell.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)CommentCell::FLAlert_ClickedA, CommentCell::FLAlert_ClickedH, (LPVOID*)&CommentCell::FLAlert_ClickedO_);

    commentcell.def("likedItem", pybind::overload_cast<CommentCell*, LikeItemType, int, bool>(&CommentCell::likedItem));
    commentcell.def("likedItem", pybind::overload_cast<pybind::function>(&CommentCell::likedItem));
    commentcell.def("likedItemO", [](CommentCell* self, LikeItemType type, int id, bool special) { return CommentCell::likedItemO(self, type, id, special); });
    commentcell.attr("likedItemA") = CommentCell::likedItemA;
    commentcell.attr("likedItemN") = "likedItem";
    cinnamon::hooks::hookCinnamon((PVOID)CommentCell::likedItemA, CommentCell::likedItemH, (LPVOID*)&CommentCell::likedItemO_);

    auto commentuploaddelegate = pybind::class_<CommentUploadDelegate>(m, "CommentUploadDelegate");
    auto configurehsvwidget = pybind::class_<ConfigureHSVWidget, cocos2d::CCNode>(m, "ConfigureHSVWidget");
    auto counttriggeraction = pybind::class_<CountTriggerAction, cocos2d::CCNode>(m, "CountTriggerAction");
    auto createguidelineslayer = pybind::class_<CreateGuidelinesLayer, FLAlertLayer>(m, "CreateGuidelinesLayer");
    createguidelineslayer.def("doClearGuidelines", pybind::overload_cast<CreateGuidelinesLayer*>(&CreateGuidelinesLayer::doClearGuidelines));
    createguidelineslayer.def("doClearGuidelines", pybind::overload_cast<pybind::function>(&CreateGuidelinesLayer::doClearGuidelines));
    createguidelineslayer.def("doClearGuidelinesO", [](CreateGuidelinesLayer* self) { return CreateGuidelinesLayer::doClearGuidelinesO(self); });
    createguidelineslayer.attr("doClearGuidelinesA") = CreateGuidelinesLayer::doClearGuidelinesA;
    createguidelineslayer.attr("doClearGuidelinesN") = "doClearGuidelines";
    cinnamon::hooks::hookCinnamon((PVOID)CreateGuidelinesLayer::doClearGuidelinesA, CreateGuidelinesLayer::doClearGuidelinesH, (LPVOID*)&CreateGuidelinesLayer::doClearGuidelinesO_);

    createguidelineslayer.def("onStop", pybind::overload_cast<CreateGuidelinesLayer*, cocos2d::CCObject*>(&CreateGuidelinesLayer::onStop));
    createguidelineslayer.def("onStop", pybind::overload_cast<pybind::function>(&CreateGuidelinesLayer::onStop));
    createguidelineslayer.def("onStopO", [](CreateGuidelinesLayer* self, cocos2d::CCObject* sender) { return CreateGuidelinesLayer::onStopO(self, sender); });
    createguidelineslayer.attr("onStopA") = CreateGuidelinesLayer::onStopA;
    createguidelineslayer.attr("onStopN") = "onStop";
    cinnamon::hooks::hookCinnamon((PVOID)CreateGuidelinesLayer::onStopA, CreateGuidelinesLayer::onStopH, (LPVOID*)&CreateGuidelinesLayer::onStopO_);

    auto createmenuitem = pybind::class_<CreateMenuItem>(m, "CreateMenuItem");
    auto dialogdelegate = pybind::class_<DialogDelegate>(m, "DialogDelegate");
    auto creatorlayer = pybind::class_<CreatorLayer, cocos2d::CCLayer>(m, "CreatorLayer");
    creatorlayer.def("onBack", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onBack));
    creatorlayer.def("onBack", pybind::overload_cast<pybind::function>(&CreatorLayer::onBack));
    creatorlayer.def("onBackO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onBackO(self, p0); });
    creatorlayer.attr("onBackA") = CreatorLayer::onBackA;
    creatorlayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onBackA, CreatorLayer::onBackH, (LPVOID*)&CreatorLayer::onBackO_);

    creatorlayer.def("onChallenge", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onChallenge));
    creatorlayer.def("onChallenge", pybind::overload_cast<pybind::function>(&CreatorLayer::onChallenge));
    creatorlayer.def("onChallengeO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onChallengeO(self, p0); });
    creatorlayer.attr("onChallengeA") = CreatorLayer::onChallengeA;
    creatorlayer.attr("onChallengeN") = "onChallenge";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onChallengeA, CreatorLayer::onChallengeH, (LPVOID*)&CreatorLayer::onChallengeO_);

    creatorlayer.def("onLeaderboards", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onLeaderboards));
    creatorlayer.def("onLeaderboards", pybind::overload_cast<pybind::function>(&CreatorLayer::onLeaderboards));
    creatorlayer.def("onLeaderboardsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onLeaderboardsO(self, p0); });
    creatorlayer.attr("onLeaderboardsA") = CreatorLayer::onLeaderboardsA;
    creatorlayer.attr("onLeaderboardsN") = "onLeaderboards";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onLeaderboardsA, CreatorLayer::onLeaderboardsH, (LPVOID*)&CreatorLayer::onLeaderboardsO_);

    creatorlayer.def("onMyLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onMyLevels));
    creatorlayer.def("onMyLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onMyLevels));
    creatorlayer.def("onMyLevelsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onMyLevelsO(self, p0); });
    creatorlayer.attr("onMyLevelsA") = CreatorLayer::onMyLevelsA;
    creatorlayer.attr("onMyLevelsN") = "onMyLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onMyLevelsA, CreatorLayer::onMyLevelsH, (LPVOID*)&CreatorLayer::onMyLevelsO_);

    creatorlayer.def("onSavedLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onSavedLevels));
    creatorlayer.def("onSavedLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onSavedLevels));
    creatorlayer.def("onSavedLevelsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onSavedLevelsO(self, p0); });
    creatorlayer.attr("onSavedLevelsA") = CreatorLayer::onSavedLevelsA;
    creatorlayer.attr("onSavedLevelsN") = "onSavedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onSavedLevelsA, CreatorLayer::onSavedLevelsH, (LPVOID*)&CreatorLayer::onSavedLevelsO_);

    creatorlayer.def("onDailyLevel", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onDailyLevel));
    creatorlayer.def("onDailyLevel", pybind::overload_cast<pybind::function>(&CreatorLayer::onDailyLevel));
    creatorlayer.def("onDailyLevelO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onDailyLevelO(self, p0); });
    creatorlayer.attr("onDailyLevelA") = CreatorLayer::onDailyLevelA;
    creatorlayer.attr("onDailyLevelN") = "onDailyLevel";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onDailyLevelA, CreatorLayer::onDailyLevelH, (LPVOID*)&CreatorLayer::onDailyLevelO_);

    creatorlayer.def("onWeeklyLevel", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onWeeklyLevel));
    creatorlayer.def("onWeeklyLevel", pybind::overload_cast<pybind::function>(&CreatorLayer::onWeeklyLevel));
    creatorlayer.def("onWeeklyLevelO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onWeeklyLevelO(self, p0); });
    creatorlayer.attr("onWeeklyLevelA") = CreatorLayer::onWeeklyLevelA;
    creatorlayer.attr("onWeeklyLevelN") = "onWeeklyLevel";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onWeeklyLevelA, CreatorLayer::onWeeklyLevelH, (LPVOID*)&CreatorLayer::onWeeklyLevelO_);

    creatorlayer.def("onFeaturedLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onFeaturedLevels));
    creatorlayer.def("onFeaturedLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onFeaturedLevels));
    creatorlayer.def("onFeaturedLevelsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onFeaturedLevelsO(self, p0); });
    creatorlayer.attr("onFeaturedLevelsA") = CreatorLayer::onFeaturedLevelsA;
    creatorlayer.attr("onFeaturedLevelsN") = "onFeaturedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onFeaturedLevelsA, CreatorLayer::onFeaturedLevelsH, (LPVOID*)&CreatorLayer::onFeaturedLevelsO_);

    creatorlayer.def("onFameLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onFameLevels));
    creatorlayer.def("onFameLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onFameLevels));
    creatorlayer.def("onFameLevelsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onFameLevelsO(self, p0); });
    creatorlayer.attr("onFameLevelsA") = CreatorLayer::onFameLevelsA;
    creatorlayer.attr("onFameLevelsN") = "onFameLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onFameLevelsA, CreatorLayer::onFameLevelsH, (LPVOID*)&CreatorLayer::onFameLevelsO_);

    creatorlayer.def("onMapPacks", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onMapPacks));
    creatorlayer.def("onMapPacks", pybind::overload_cast<pybind::function>(&CreatorLayer::onMapPacks));
    creatorlayer.def("onMapPacksO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onMapPacksO(self, p0); });
    creatorlayer.attr("onMapPacksA") = CreatorLayer::onMapPacksA;
    creatorlayer.attr("onMapPacksN") = "onMapPacks";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onMapPacksA, CreatorLayer::onMapPacksH, (LPVOID*)&CreatorLayer::onMapPacksO_);

    creatorlayer.def("onOnlineLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onOnlineLevels));
    creatorlayer.def("onOnlineLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onOnlineLevels));
    creatorlayer.def("onOnlineLevelsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onOnlineLevelsO(self, p0); });
    creatorlayer.attr("onOnlineLevelsA") = CreatorLayer::onOnlineLevelsA;
    creatorlayer.attr("onOnlineLevelsN") = "onOnlineLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onOnlineLevelsA, CreatorLayer::onOnlineLevelsH, (LPVOID*)&CreatorLayer::onOnlineLevelsO_);

    creatorlayer.def("onGauntlets", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onGauntlets));
    creatorlayer.def("onGauntlets", pybind::overload_cast<pybind::function>(&CreatorLayer::onGauntlets));
    creatorlayer.def("onGauntletsO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onGauntletsO(self, p0); });
    creatorlayer.attr("onGauntletsA") = CreatorLayer::onGauntletsA;
    creatorlayer.attr("onGauntletsN") = "onGauntlets";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onGauntletsA, CreatorLayer::onGauntletsH, (LPVOID*)&CreatorLayer::onGauntletsO_);

    creatorlayer.def("onSecretVault", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onSecretVault));
    creatorlayer.def("onSecretVault", pybind::overload_cast<pybind::function>(&CreatorLayer::onSecretVault));
    creatorlayer.def("onSecretVaultO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onSecretVaultO(self, p0); });
    creatorlayer.attr("onSecretVaultA") = CreatorLayer::onSecretVaultA;
    creatorlayer.attr("onSecretVaultN") = "onSecretVault";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onSecretVaultA, CreatorLayer::onSecretVaultH, (LPVOID*)&CreatorLayer::onSecretVaultO_);

    creatorlayer.def("onTreasureRoom", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onTreasureRoom));
    creatorlayer.def("onTreasureRoom", pybind::overload_cast<pybind::function>(&CreatorLayer::onTreasureRoom));
    creatorlayer.def("onTreasureRoomO", [](CreatorLayer* self, cocos2d::CCObject* p0) { return CreatorLayer::onTreasureRoomO(self, p0); });
    creatorlayer.attr("onTreasureRoomA") = CreatorLayer::onTreasureRoomA;
    creatorlayer.attr("onTreasureRoomN") = "onTreasureRoom";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onTreasureRoomA, CreatorLayer::onTreasureRoomH, (LPVOID*)&CreatorLayer::onTreasureRoomO_);

    creatorlayer.def("sceneWillResume", pybind::overload_cast<CreatorLayer*>(&CreatorLayer::sceneWillResume));
    creatorlayer.def("sceneWillResume", pybind::overload_cast<pybind::function>(&CreatorLayer::sceneWillResume));
    creatorlayer.def("sceneWillResumeO", [](CreatorLayer* self) { return CreatorLayer::sceneWillResumeO(self); });
    creatorlayer.attr("sceneWillResumeA") = CreatorLayer::sceneWillResumeA;
    creatorlayer.attr("sceneWillResumeN") = "sceneWillResume";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::sceneWillResumeA, CreatorLayer::sceneWillResumeH, (LPVOID*)&CreatorLayer::sceneWillResumeO_);

    creatorlayer.def("init", pybind::overload_cast<CreatorLayer*>(&CreatorLayer::init));
    creatorlayer.def("init", pybind::overload_cast<pybind::function>(&CreatorLayer::init));
    creatorlayer.def("initO", [](CreatorLayer* self) { return CreatorLayer::initO(self); });
    creatorlayer.attr("initA") = CreatorLayer::initA;
    creatorlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::initA, CreatorLayer::initH, (LPVOID*)&CreatorLayer::initO_);

    creatorlayer.def("create", pybind::overload_cast<>(&CreatorLayer::create));
    creatorlayer.def("create", pybind::overload_cast<pybind::function>(&CreatorLayer::create));
    creatorlayer.def("createO", []() { return CreatorLayer::createO(); });
    creatorlayer.attr("createA") = CreatorLayer::createA;
    creatorlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::createA, CreatorLayer::createH, (LPVOID*)&CreatorLayer::createO_);

    auto currencyrewardlayer = pybind::class_<CurrencyRewardLayer, cocos2d::CCLayer>(m, "CurrencyRewardLayer");
    currencyrewardlayer.def("update", pybind::overload_cast<CurrencyRewardLayer*, float>(&CurrencyRewardLayer::update));
    currencyrewardlayer.def("update", pybind::overload_cast<pybind::function>(&CurrencyRewardLayer::update));
    currencyrewardlayer.def("updateO", [](CurrencyRewardLayer* self, float p0) { return CurrencyRewardLayer::updateO(self, p0); });
    currencyrewardlayer.attr("updateA") = CurrencyRewardLayer::updateA;
    currencyrewardlayer.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)CurrencyRewardLayer::updateA, CurrencyRewardLayer::updateH, (LPVOID*)&CurrencyRewardLayer::updateO_);

    currencyrewardlayer.def("create", pybind::overload_cast<int, int, int, CurrencySpriteType, int, CurrencySpriteType, int, cocos2d::CCPoint, CurrencyRewardType, float>(&CurrencyRewardLayer::create));
    currencyrewardlayer.def("create", pybind::overload_cast<pybind::function>(&CurrencyRewardLayer::create));
    currencyrewardlayer.def("createO", [](int p0, int p1, int p2, CurrencySpriteType p3, int p4, CurrencySpriteType p5, int p6, cocos2d::CCPoint p7, CurrencyRewardType p8, float p9) { return CurrencyRewardLayer::createO(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    currencyrewardlayer.attr("createA") = CurrencyRewardLayer::createA;
    currencyrewardlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CurrencyRewardLayer::createA, CurrencyRewardLayer::createH, (LPVOID*)&CurrencyRewardLayer::createO_);

    auto currencyrewarddelegate = pybind::class_<CurrencyRewardDelegate>(m, "CurrencyRewardDelegate");
    auto customlistview = pybind::class_<CustomListView, BoomListView>(m, "CustomListView");
    customlistview.def("create", pybind::overload_cast<cocos2d::CCArray*, float, float, int, BoomListType>(&CustomListView::create));
    customlistview.def("create", pybind::overload_cast<pybind::function>(&CustomListView::create));
    customlistview.def("createO", [](cocos2d::CCArray* p0, float p1, float p2, int p3, BoomListType p4) { return CustomListView::createO(p0, p1, p2, p3, p4); });
    customlistview.attr("createA") = CustomListView::createA;
    customlistview.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::createA, CustomListView::createH, (LPVOID*)&CustomListView::createO_);

    customlistview.def("create", pybind::overload_cast<cocos2d::CCArray*, BoomListType, float, float>(&CustomListView::create));
    customlistview.def("getListCell", pybind::overload_cast<CustomListView*, const char*>(&CustomListView::getListCell));
    customlistview.def("getListCell", pybind::overload_cast<pybind::function>(&CustomListView::getListCell));
    customlistview.def("getListCellO", [](CustomListView* self, const char* p0) { return CustomListView::getListCellO(self, p0); });
    customlistview.attr("getListCellA") = CustomListView::getListCellA;
    customlistview.attr("getListCellN") = "getListCell";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::getListCellA, CustomListView::getListCellH, (LPVOID*)&CustomListView::getListCellO_);

    customlistview.def("loadCell", pybind::overload_cast<CustomListView*, TableViewCell*, int>(&CustomListView::loadCell));
    customlistview.def("loadCell", pybind::overload_cast<pybind::function>(&CustomListView::loadCell));
    customlistview.def("loadCellO", [](CustomListView* self, TableViewCell* p0, int p1) { return CustomListView::loadCellO(self, p0, p1); });
    customlistview.attr("loadCellA") = CustomListView::loadCellA;
    customlistview.attr("loadCellN") = "loadCell";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::loadCellA, CustomListView::loadCellH, (LPVOID*)&CustomListView::loadCellO_);

    customlistview.def("setupList", pybind::overload_cast<CustomListView*>(&CustomListView::setupList));
    customlistview.def("setupList", pybind::overload_cast<pybind::function>(&CustomListView::setupList));
    customlistview.def("setupListO", [](CustomListView* self) { return CustomListView::setupListO(self); });
    customlistview.attr("setupListA") = CustomListView::setupListA;
    customlistview.attr("setupListN") = "setupList";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::setupListA, CustomListView::setupListH, (LPVOID*)&CustomListView::setupListO_);

    auto customsongcell = pybind::class_<CustomSongCell, TableViewCell>(m, "CustomSongCell");
    customsongcell.def("loadFromObject", pybind::overload_cast<CustomSongCell*, SongInfoObject*>(&CustomSongCell::loadFromObject));
    customsongcell.def("loadFromObject", pybind::overload_cast<pybind::function>(&CustomSongCell::loadFromObject));
    customsongcell.def("loadFromObjectO", [](CustomSongCell* self, SongInfoObject* p0) { return CustomSongCell::loadFromObjectO(self, p0); });
    customsongcell.attr("loadFromObjectA") = CustomSongCell::loadFromObjectA;
    customsongcell.attr("loadFromObjectN") = "loadFromObject";
    cinnamon::hooks::hookCinnamon((PVOID)CustomSongCell::loadFromObjectA, CustomSongCell::loadFromObjectH, (LPVOID*)&CustomSongCell::loadFromObjectO_);

    auto textinputdelegate = pybind::class_<TextInputDelegate>(m, "TextInputDelegate");
    auto gjdropdownlayerdelegate = pybind::class_<GJDropDownLayerDelegate>(m, "GJDropDownLayerDelegate");
    auto customsonglayer = pybind::class_<CustomSongLayer, FLAlertLayer>(m, "CustomSongLayer");
    customsonglayer.def("init", pybind::overload_cast<CustomSongLayer*, LevelSettingsObject*>(&CustomSongLayer::init));
    customsonglayer.def("init", pybind::overload_cast<pybind::function>(&CustomSongLayer::init));
    customsonglayer.def("initO", [](CustomSongLayer* self, LevelSettingsObject* p0) { return CustomSongLayer::initO(self, p0); });
    customsonglayer.attr("initA") = CustomSongLayer::initA;
    customsonglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CustomSongLayer::initA, CustomSongLayer::initH, (LPVOID*)&CustomSongLayer::initO_);

    customsonglayer.def("onSongBrowser", pybind::overload_cast<CustomSongLayer*, cocos2d::CCObject*>(&CustomSongLayer::onSongBrowser));
    customsonglayer.def("onSongBrowser", pybind::overload_cast<pybind::function>(&CustomSongLayer::onSongBrowser));
    customsonglayer.def("onSongBrowserO", [](CustomSongLayer* self, cocos2d::CCObject* p0) { return CustomSongLayer::onSongBrowserO(self, p0); });
    customsonglayer.attr("onSongBrowserA") = CustomSongLayer::onSongBrowserA;
    customsonglayer.attr("onSongBrowserN") = "onSongBrowser";
    cinnamon::hooks::hookCinnamon((PVOID)CustomSongLayer::onSongBrowserA, CustomSongLayer::onSongBrowserH, (LPVOID*)&CustomSongLayer::onSongBrowserO_);

    auto musicdownloaddelegate = pybind::class_<MusicDownloadDelegate>(m, "MusicDownloadDelegate");
    auto customsongwidget = pybind::class_<CustomSongWidget, cocos2d::CCNode>(m, "CustomSongWidget");
    customsongwidget.def("init", pybind::overload_cast<CustomSongWidget*, SongInfoObject*, LevelSettingsObject*, bool, bool, bool, bool, bool>(&CustomSongWidget::init));
    customsongwidget.def("init", pybind::overload_cast<pybind::function>(&CustomSongWidget::init));
    customsongwidget.def("initO", [](CustomSongWidget* self, SongInfoObject* p0, LevelSettingsObject* p1, bool p2, bool p3, bool p4, bool p5, bool hideBackground) { return CustomSongWidget::initO(self, p0, p1, p2, p3, p4, p5, hideBackground); });
    customsongwidget.attr("initA") = CustomSongWidget::initA;
    customsongwidget.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CustomSongWidget::initA, CustomSongWidget::initH, (LPVOID*)&CustomSongWidget::initO_);

    customsongwidget.def("updateSongObject", pybind::overload_cast<CustomSongWidget*, SongInfoObject*>(&CustomSongWidget::updateSongObject));
    customsongwidget.def("updateSongObject", pybind::overload_cast<pybind::function>(&CustomSongWidget::updateSongObject));
    customsongwidget.def("updateSongObjectO", [](CustomSongWidget* self, SongInfoObject* song) { return CustomSongWidget::updateSongObjectO(self, song); });
    customsongwidget.attr("updateSongObjectA") = CustomSongWidget::updateSongObjectA;
    customsongwidget.attr("updateSongObjectN") = "updateSongObject";
    cinnamon::hooks::hookCinnamon((PVOID)CustomSongWidget::updateSongObjectA, CustomSongWidget::updateSongObjectH, (LPVOID*)&CustomSongWidget::updateSongObjectO_);

    auto hsvwidgetpopupdelegate = pybind::class_<HSVWidgetPopupDelegate>(m, "HSVWidgetPopupDelegate");
    auto customizeobjectlayer = pybind::class_<CustomizeObjectLayer, FLAlertLayer>(m, "CustomizeObjectLayer");
    customizeobjectlayer.def("onNextColorChannel", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onNextColorChannel));
    customizeobjectlayer.def("onNextColorChannel", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onNextColorChannel));
    customizeobjectlayer.def("onNextColorChannelO", [](CustomizeObjectLayer* self, cocos2d::CCObject* sender) { return CustomizeObjectLayer::onNextColorChannelO(self, sender); });
    customizeobjectlayer.attr("onNextColorChannelA") = CustomizeObjectLayer::onNextColorChannelA;
    customizeobjectlayer.attr("onNextColorChannelN") = "onNextColorChannel";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onNextColorChannelA, CustomizeObjectLayer::onNextColorChannelH, (LPVOID*)&CustomizeObjectLayer::onNextColorChannelO_);

    customizeobjectlayer.def("onSelectColor", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onSelectColor));
    customizeobjectlayer.def("onSelectColor", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onSelectColor));
    customizeobjectlayer.def("onSelectColorO", [](CustomizeObjectLayer* self, cocos2d::CCObject* sender) { return CustomizeObjectLayer::onSelectColorO(self, sender); });
    customizeobjectlayer.attr("onSelectColorA") = CustomizeObjectLayer::onSelectColorA;
    customizeobjectlayer.attr("onSelectColorN") = "onSelectColor";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onSelectColorA, CustomizeObjectLayer::onSelectColorH, (LPVOID*)&CustomizeObjectLayer::onSelectColorO_);

    customizeobjectlayer.def("onSelectMode", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onSelectMode));
    customizeobjectlayer.def("onSelectMode", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onSelectMode));
    customizeobjectlayer.def("onSelectModeO", [](CustomizeObjectLayer* self, cocos2d::CCObject* sender) { return CustomizeObjectLayer::onSelectModeO(self, sender); });
    customizeobjectlayer.attr("onSelectModeA") = CustomizeObjectLayer::onSelectModeA;
    customizeobjectlayer.attr("onSelectModeN") = "onSelectMode";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onSelectModeA, CustomizeObjectLayer::onSelectModeH, (LPVOID*)&CustomizeObjectLayer::onSelectModeO_);

    customizeobjectlayer.def("getActiveMode", pybind::overload_cast<CustomizeObjectLayer*, bool>(&CustomizeObjectLayer::getActiveMode));
    customizeobjectlayer.def("getActiveMode", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::getActiveMode));
    customizeobjectlayer.def("getActiveModeO", [](CustomizeObjectLayer* self, bool unknown) { return CustomizeObjectLayer::getActiveModeO(self, unknown); });
    customizeobjectlayer.attr("getActiveModeA") = CustomizeObjectLayer::getActiveModeA;
    customizeobjectlayer.attr("getActiveModeN") = "getActiveMode";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::getActiveModeA, CustomizeObjectLayer::getActiveModeH, (LPVOID*)&CustomizeObjectLayer::getActiveModeO_);

    customizeobjectlayer.def("onClose", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onClose));
    customizeobjectlayer.def("onClose", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onClose));
    customizeobjectlayer.def("onCloseO", [](CustomizeObjectLayer* self, cocos2d::CCObject* p0) { return CustomizeObjectLayer::onCloseO(self, p0); });
    customizeobjectlayer.attr("onCloseA") = CustomizeObjectLayer::onCloseA;
    customizeobjectlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onCloseA, CustomizeObjectLayer::onCloseH, (LPVOID*)&CustomizeObjectLayer::onCloseO_);

    customizeobjectlayer.def("updateSelected", pybind::overload_cast<CustomizeObjectLayer*, int>(&CustomizeObjectLayer::updateSelected));
    customizeobjectlayer.def("updateSelected", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::updateSelected));
    customizeobjectlayer.def("updateSelectedO", [](CustomizeObjectLayer* self, int channelID) { return CustomizeObjectLayer::updateSelectedO(self, channelID); });
    customizeobjectlayer.attr("updateSelectedA") = CustomizeObjectLayer::updateSelectedA;
    customizeobjectlayer.attr("updateSelectedN") = "updateSelected";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::updateSelectedA, CustomizeObjectLayer::updateSelectedH, (LPVOID*)&CustomizeObjectLayer::updateSelectedO_);

    customizeobjectlayer.def("init", pybind::overload_cast<CustomizeObjectLayer*, GameObject*, cocos2d::CCArray*>(&CustomizeObjectLayer::init));
    customizeobjectlayer.def("init", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::init));
    customizeobjectlayer.def("initO", [](CustomizeObjectLayer* self, GameObject* target, cocos2d::CCArray* targets) { return CustomizeObjectLayer::initO(self, target, targets); });
    customizeobjectlayer.attr("initA") = CustomizeObjectLayer::initA;
    customizeobjectlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::initA, CustomizeObjectLayer::initH, (LPVOID*)&CustomizeObjectLayer::initO_);

    customizeobjectlayer.def("onHSV", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onHSV));
    customizeobjectlayer.def("onHSV", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onHSV));
    customizeobjectlayer.def("onHSVO", [](CustomizeObjectLayer* self, cocos2d::CCObject* sender) { return CustomizeObjectLayer::onHSVO(self, sender); });
    customizeobjectlayer.attr("onHSVA") = CustomizeObjectLayer::onHSVA;
    customizeobjectlayer.attr("onHSVN") = "onHSV";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onHSVA, CustomizeObjectLayer::onHSVH, (LPVOID*)&CustomizeObjectLayer::onHSVO_);

    customizeobjectlayer.def("toggleVisible", pybind::overload_cast<CustomizeObjectLayer*>(&CustomizeObjectLayer::toggleVisible));
    customizeobjectlayer.def("toggleVisible", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::toggleVisible));
    customizeobjectlayer.def("toggleVisibleO", [](CustomizeObjectLayer* self) { return CustomizeObjectLayer::toggleVisibleO(self); });
    customizeobjectlayer.attr("toggleVisibleA") = CustomizeObjectLayer::toggleVisibleA;
    customizeobjectlayer.attr("toggleVisibleN") = "toggleVisible";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::toggleVisibleA, CustomizeObjectLayer::toggleVisibleH, (LPVOID*)&CustomizeObjectLayer::toggleVisibleO_);

    customizeobjectlayer.def("highlightSelected", pybind::overload_cast<CustomizeObjectLayer*, ButtonSprite*>(&CustomizeObjectLayer::highlightSelected));
    customizeobjectlayer.def("highlightSelected", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::highlightSelected));
    customizeobjectlayer.def("highlightSelectedO", [](CustomizeObjectLayer* self, ButtonSprite* target) { return CustomizeObjectLayer::highlightSelectedO(self, target); });
    customizeobjectlayer.attr("highlightSelectedA") = CustomizeObjectLayer::highlightSelectedA;
    customizeobjectlayer.attr("highlightSelectedN") = "highlightSelected";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::highlightSelectedA, CustomizeObjectLayer::highlightSelectedH, (LPVOID*)&CustomizeObjectLayer::highlightSelectedO_);

    customizeobjectlayer.def("updateCustomColorLabels", pybind::overload_cast<CustomizeObjectLayer*>(&CustomizeObjectLayer::updateCustomColorLabels));
    customizeobjectlayer.def("updateCustomColorLabels", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::updateCustomColorLabels));
    customizeobjectlayer.def("updateCustomColorLabelsO", [](CustomizeObjectLayer* self) { return CustomizeObjectLayer::updateCustomColorLabelsO(self); });
    customizeobjectlayer.attr("updateCustomColorLabelsA") = CustomizeObjectLayer::updateCustomColorLabelsA;
    customizeobjectlayer.attr("updateCustomColorLabelsN") = "updateCustomColorLabels";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::updateCustomColorLabelsA, CustomizeObjectLayer::updateCustomColorLabelsH, (LPVOID*)&CustomizeObjectLayer::updateCustomColorLabelsO_);

    customizeobjectlayer.def("onUpdateCustomColor", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCObject*>(&CustomizeObjectLayer::onUpdateCustomColor));
    customizeobjectlayer.def("onUpdateCustomColor", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::onUpdateCustomColor));
    customizeobjectlayer.def("onUpdateCustomColorO", [](CustomizeObjectLayer* self, cocos2d::CCObject* sender) { return CustomizeObjectLayer::onUpdateCustomColorO(self, sender); });
    customizeobjectlayer.attr("onUpdateCustomColorA") = CustomizeObjectLayer::onUpdateCustomColorA;
    customizeobjectlayer.attr("onUpdateCustomColorN") = "onUpdateCustomColor";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::onUpdateCustomColorA, CustomizeObjectLayer::onUpdateCustomColorH, (LPVOID*)&CustomizeObjectLayer::onUpdateCustomColorO_);

    customizeobjectlayer.def("updateColorSprite", pybind::overload_cast<CustomizeObjectLayer*>(&CustomizeObjectLayer::updateColorSprite));
    customizeobjectlayer.def("updateColorSprite", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::updateColorSprite));
    customizeobjectlayer.def("updateColorSpriteO", [](CustomizeObjectLayer* self) { return CustomizeObjectLayer::updateColorSpriteO(self); });
    customizeobjectlayer.attr("updateColorSpriteA") = CustomizeObjectLayer::updateColorSpriteA;
    customizeobjectlayer.attr("updateColorSpriteN") = "updateColorSprite";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::updateColorSpriteA, CustomizeObjectLayer::updateColorSpriteH, (LPVOID*)&CustomizeObjectLayer::updateColorSpriteO_);

    customizeobjectlayer.def("updateChannelLabel", pybind::overload_cast<CustomizeObjectLayer*, int>(&CustomizeObjectLayer::updateChannelLabel));
    customizeobjectlayer.def("updateChannelLabel", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::updateChannelLabel));
    customizeobjectlayer.def("updateChannelLabelO", [](CustomizeObjectLayer* self, int channel) { return CustomizeObjectLayer::updateChannelLabelO(self, channel); });
    customizeobjectlayer.attr("updateChannelLabelA") = CustomizeObjectLayer::updateChannelLabelA;
    customizeobjectlayer.attr("updateChannelLabelN") = "updateChannelLabel";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::updateChannelLabelA, CustomizeObjectLayer::updateChannelLabelH, (LPVOID*)&CustomizeObjectLayer::updateChannelLabelO_);

    customizeobjectlayer.def("hsvPopupClosed", pybind::overload_cast<CustomizeObjectLayer*, HSVWidgetPopup*, cocos2d::ccHSVValue>(&CustomizeObjectLayer::hsvPopupClosed));
    customizeobjectlayer.def("hsvPopupClosed", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::hsvPopupClosed));
    customizeobjectlayer.def("hsvPopupClosedO", [](CustomizeObjectLayer* self, HSVWidgetPopup* popup, cocos2d::ccHSVValue value) { return CustomizeObjectLayer::hsvPopupClosedO(self, popup, value); });
    customizeobjectlayer.attr("hsvPopupClosedA") = CustomizeObjectLayer::hsvPopupClosedA;
    customizeobjectlayer.attr("hsvPopupClosedN") = "hsvPopupClosed";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::hsvPopupClosedA, CustomizeObjectLayer::hsvPopupClosedH, (LPVOID*)&CustomizeObjectLayer::hsvPopupClosedO_);

    customizeobjectlayer.def("colorSelectClosed", pybind::overload_cast<CustomizeObjectLayer*, cocos2d::CCNode*>(&CustomizeObjectLayer::colorSelectClosed));
    customizeobjectlayer.def("colorSelectClosed", pybind::overload_cast<pybind::function>(&CustomizeObjectLayer::colorSelectClosed));
    customizeobjectlayer.def("colorSelectClosedO", [](CustomizeObjectLayer* self, cocos2d::CCNode* p0) { return CustomizeObjectLayer::colorSelectClosedO(self, p0); });
    customizeobjectlayer.attr("colorSelectClosedA") = CustomizeObjectLayer::colorSelectClosedA;
    customizeobjectlayer.attr("colorSelectClosedN") = "colorSelectClosed";
    cinnamon::hooks::hookCinnamon((PVOID)CustomizeObjectLayer::colorSelectClosedA, CustomizeObjectLayer::colorSelectClosedH, (LPVOID*)&CustomizeObjectLayer::colorSelectClosedO_);

    auto gjdailyleveldelegate = pybind::class_<GJDailyLevelDelegate>(m, "GJDailyLevelDelegate");
    auto leveldownloaddelegate = pybind::class_<LevelDownloadDelegate>(m, "LevelDownloadDelegate");
    auto dailylevelpage = pybind::class_<DailyLevelPage, FLAlertLayer>(m, "DailyLevelPage");
    dailylevelpage.def("create", pybind::overload_cast<bool>(&DailyLevelPage::create));
    dailylevelpage.def("create", pybind::overload_cast<pybind::function>(&DailyLevelPage::create));
    dailylevelpage.def("createO", [](bool weekly) { return DailyLevelPage::createO(weekly); });
    dailylevelpage.attr("createA") = DailyLevelPage::createA;
    dailylevelpage.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)DailyLevelPage::createA, DailyLevelPage::createH, (LPVOID*)&DailyLevelPage::createO_);

    dailylevelpage.def("init", pybind::overload_cast<DailyLevelPage*, bool>(&DailyLevelPage::init));
    dailylevelpage.def("init", pybind::overload_cast<pybind::function>(&DailyLevelPage::init));
    dailylevelpage.def("initO", [](DailyLevelPage* self, bool weekly) { return DailyLevelPage::initO(self, weekly); });
    dailylevelpage.attr("initA") = DailyLevelPage::initA;
    dailylevelpage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DailyLevelPage::initA, DailyLevelPage::initH, (LPVOID*)&DailyLevelPage::initO_);

    dailylevelpage.def("updateTimers", pybind::overload_cast<DailyLevelPage*, float>(&DailyLevelPage::updateTimers));
    dailylevelpage.def("updateTimers", pybind::overload_cast<pybind::function>(&DailyLevelPage::updateTimers));
    dailylevelpage.def("updateTimersO", [](DailyLevelPage* self, float p0) { return DailyLevelPage::updateTimersO(self, p0); });
    dailylevelpage.attr("updateTimersA") = DailyLevelPage::updateTimersA;
    dailylevelpage.attr("updateTimersN") = "updateTimers";
    cinnamon::hooks::hookCinnamon((PVOID)DailyLevelPage::updateTimersA, DailyLevelPage::updateTimersH, (LPVOID*)&DailyLevelPage::updateTimersO_);

    dailylevelpage.def("show", pybind::overload_cast<DailyLevelPage*>(&DailyLevelPage::show));
    dailylevelpage.def("show", pybind::overload_cast<pybind::function>(&DailyLevelPage::show));
    dailylevelpage.def("showO", [](DailyLevelPage* self) { return DailyLevelPage::showO(self); });
    dailylevelpage.attr("showA") = DailyLevelPage::showA;
    dailylevelpage.attr("showN") = "show";
    cinnamon::hooks::hookCinnamon((PVOID)DailyLevelPage::showA, DailyLevelPage::showH, (LPVOID*)&DailyLevelPage::showO_);

    auto dialoglayer = pybind::class_<DialogLayer, cocos2d::CCLayerColor>(m, "DialogLayer");
    dialoglayer.def("createDialogLayer", pybind::overload_cast<DialogObject*, cocos2d::CCArray*, int>(&DialogLayer::createDialogLayer));
    dialoglayer.def("createDialogLayer", pybind::overload_cast<pybind::function>(&DialogLayer::createDialogLayer));
    dialoglayer.def("createDialogLayerO", [](DialogObject* p0, cocos2d::CCArray* p1, int p2) { return DialogLayer::createDialogLayerO(p0, p1, p2); });
    dialoglayer.attr("createDialogLayerA") = DialogLayer::createDialogLayerA;
    dialoglayer.attr("createDialogLayerN") = "createDialogLayer";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::createDialogLayerA, DialogLayer::createDialogLayerH, (LPVOID*)&DialogLayer::createDialogLayerO_);

    dialoglayer.def("init", pybind::overload_cast<DialogLayer*, DialogObject*, cocos2d::CCArray*, int>(&DialogLayer::init));
    dialoglayer.def("init", pybind::overload_cast<pybind::function>(&DialogLayer::init));
    dialoglayer.def("initO", [](DialogLayer* self, DialogObject* p0, cocos2d::CCArray* p1, int p2) { return DialogLayer::initO(self, p0, p1, p2); });
    dialoglayer.attr("initA") = DialogLayer::initA;
    dialoglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::initA, DialogLayer::initH, (LPVOID*)&DialogLayer::initO_);

    dialoglayer.def("animateIn", pybind::overload_cast<DialogLayer*, DialogAnimationType>(&DialogLayer::animateIn));
    dialoglayer.def("animateIn", pybind::overload_cast<pybind::function>(&DialogLayer::animateIn));
    dialoglayer.def("animateInO", [](DialogLayer* self, DialogAnimationType location) { return DialogLayer::animateInO(self, location); });
    dialoglayer.attr("animateInA") = DialogLayer::animateInA;
    dialoglayer.attr("animateInN") = "animateIn";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::animateInA, DialogLayer::animateInH, (LPVOID*)&DialogLayer::animateInO_);

    dialoglayer.def("onEnter", pybind::overload_cast<DialogLayer*>(&DialogLayer::onEnter));
    dialoglayer.def("onEnter", pybind::overload_cast<pybind::function>(&DialogLayer::onEnter));
    dialoglayer.def("onEnterO", [](DialogLayer* self) { return DialogLayer::onEnterO(self); });
    dialoglayer.attr("onEnterA") = DialogLayer::onEnterA;
    dialoglayer.attr("onEnterN") = "onEnter";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::onEnterA, DialogLayer::onEnterH, (LPVOID*)&DialogLayer::onEnterO_);

    dialoglayer.def("registerWithTouchDispatcher", pybind::overload_cast<DialogLayer*>(&DialogLayer::registerWithTouchDispatcher));
    dialoglayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&DialogLayer::registerWithTouchDispatcher));
    dialoglayer.def("registerWithTouchDispatcherO", [](DialogLayer* self) { return DialogLayer::registerWithTouchDispatcherO(self); });
    dialoglayer.attr("registerWithTouchDispatcherA") = DialogLayer::registerWithTouchDispatcherA;
    dialoglayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::registerWithTouchDispatcherA, DialogLayer::registerWithTouchDispatcherH, (LPVOID*)&DialogLayer::registerWithTouchDispatcherO_);

    dialoglayer.def("keyBackClicked", pybind::overload_cast<DialogLayer*>(&DialogLayer::keyBackClicked));
    dialoglayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&DialogLayer::keyBackClicked));
    dialoglayer.def("keyBackClickedO", [](DialogLayer* self) { return DialogLayer::keyBackClickedO(self); });
    dialoglayer.attr("keyBackClickedA") = DialogLayer::keyBackClickedA;
    dialoglayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::keyBackClickedA, DialogLayer::keyBackClickedH, (LPVOID*)&DialogLayer::keyBackClickedO_);

    dialoglayer.def("keyDown", pybind::overload_cast<DialogLayer*, cocos2d::enumKeyCodes>(&DialogLayer::keyDown));
    dialoglayer.def("keyDown", pybind::overload_cast<pybind::function>(&DialogLayer::keyDown));
    dialoglayer.def("keyDownO", [](DialogLayer* self, cocos2d::enumKeyCodes p0) { return DialogLayer::keyDownO(self, p0); });
    dialoglayer.attr("keyDownA") = DialogLayer::keyDownA;
    dialoglayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::keyDownA, DialogLayer::keyDownH, (LPVOID*)&DialogLayer::keyDownO_);

    dialoglayer.def("fadeInTextFinished", pybind::overload_cast<DialogLayer*, TextArea*>(&DialogLayer::fadeInTextFinished));
    dialoglayer.def("fadeInTextFinished", pybind::overload_cast<pybind::function>(&DialogLayer::fadeInTextFinished));
    dialoglayer.def("fadeInTextFinishedO", [](DialogLayer* self, TextArea* p0) { return DialogLayer::fadeInTextFinishedO(self, p0); });
    dialoglayer.attr("fadeInTextFinishedA") = DialogLayer::fadeInTextFinishedA;
    dialoglayer.attr("fadeInTextFinishedN") = "fadeInTextFinished";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::fadeInTextFinishedA, DialogLayer::fadeInTextFinishedH, (LPVOID*)&DialogLayer::fadeInTextFinishedO_);

    auto dialogobject = pybind::class_<DialogObject, cocos2d::CCObject>(m, "DialogObject");
    dialogobject.def("create", pybind::overload_cast<gd::string, gd::string, int, float, bool, cocos2d::ccColor3B>(&DialogObject::create));
    dialogobject.def("create", pybind::overload_cast<pybind::function>(&DialogObject::create));
    dialogobject.def("createO", [](gd::string title, gd::string text, int portrait, float text_scale, bool is_unskippable, cocos2d::ccColor3B text_color) { return DialogObject::createO(title, text, portrait, text_scale, is_unskippable, text_color); });
    dialogobject.attr("createA") = DialogObject::createA;
    dialogobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)DialogObject::createA, DialogObject::createH, (LPVOID*)&DialogObject::createO_);

    dialogobject.def("init", pybind::overload_cast<DialogObject*, gd::string, gd::string, int, float, bool, cocos2d::ccColor3B>(&DialogObject::init));
    dialogobject.def("init", pybind::overload_cast<pybind::function>(&DialogObject::init));
    dialogobject.def("initO", [](DialogObject* self, gd::string title, gd::string text, int portrait, float text_scale, bool is_unskippable, cocos2d::ccColor3B text_color) { return DialogObject::initO(self, title, text, portrait, text_scale, is_unskippable, text_color); });
    dialogobject.attr("initA") = DialogObject::initA;
    dialogobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DialogObject::initA, DialogObject::initH, (LPVOID*)&DialogObject::initO_);

    auto downloadmessagedelegate = pybind::class_<DownloadMessageDelegate>(m, "DownloadMessageDelegate");
    auto drawgridlayer = pybind::class_<DrawGridLayer, cocos2d::CCLayer>(m, "DrawGridLayer");
    drawgridlayer.def("init", pybind::overload_cast<DrawGridLayer*, cocos2d::CCNode*, LevelEditorLayer*>(&DrawGridLayer::init));
    drawgridlayer.def("init", pybind::overload_cast<pybind::function>(&DrawGridLayer::init));
    drawgridlayer.def("initO", [](DrawGridLayer* self, cocos2d::CCNode* grid, LevelEditorLayer* editor) { return DrawGridLayer::initO(self, grid, editor); });
    drawgridlayer.attr("initA") = DrawGridLayer::initA;
    drawgridlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DrawGridLayer::initA, DrawGridLayer::initH, (LPVOID*)&DrawGridLayer::initO_);

    drawgridlayer.def("draw", pybind::overload_cast<DrawGridLayer*>(&DrawGridLayer::draw));
    drawgridlayer.def("draw", pybind::overload_cast<pybind::function>(&DrawGridLayer::draw));
    drawgridlayer.def("drawO", [](DrawGridLayer* self) { return DrawGridLayer::drawO(self); });
    drawgridlayer.attr("drawA") = DrawGridLayer::drawA;
    drawgridlayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)DrawGridLayer::drawA, DrawGridLayer::drawH, (LPVOID*)&DrawGridLayer::drawO_);

    drawgridlayer.def("update", pybind::overload_cast<DrawGridLayer*, float>(&DrawGridLayer::update));
    drawgridlayer.def("update", pybind::overload_cast<pybind::function>(&DrawGridLayer::update));
    drawgridlayer.def("updateO", [](DrawGridLayer* self, float p0) { return DrawGridLayer::updateO(self, p0); });
    drawgridlayer.attr("updateA") = DrawGridLayer::updateA;
    drawgridlayer.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)DrawGridLayer::updateA, DrawGridLayer::updateH, (LPVOID*)&DrawGridLayer::updateO_);

    auto editbuttonbar = pybind::class_<EditButtonBar, cocos2d::CCNode>(m, "EditButtonBar");
    editbuttonbar.def("loadFromItems", pybind::overload_cast<EditButtonBar*, cocos2d::CCArray*, int, int, bool>(&EditButtonBar::loadFromItems));
    editbuttonbar.def("loadFromItems", pybind::overload_cast<pybind::function>(&EditButtonBar::loadFromItems));
    editbuttonbar.def("loadFromItemsO", [](EditButtonBar* self, cocos2d::CCArray* buttons, int rowCount, int columnCount, bool idk) { return EditButtonBar::loadFromItemsO(self, buttons, rowCount, columnCount, idk); });
    editbuttonbar.attr("loadFromItemsA") = EditButtonBar::loadFromItemsA;
    editbuttonbar.attr("loadFromItemsN") = "loadFromItems";
    cinnamon::hooks::hookCinnamon((PVOID)EditButtonBar::loadFromItemsA, EditButtonBar::loadFromItemsH, (LPVOID*)&EditButtonBar::loadFromItemsO_);

    editbuttonbar.def("create", pybind::overload_cast<cocos2d::CCArray*, cocos2d::CCPoint, int, bool, int, int>(&EditButtonBar::create));
    editbuttonbar.def("create", pybind::overload_cast<pybind::function>(&EditButtonBar::create));
    editbuttonbar.def("createO", [](cocos2d::CCArray* buttons, cocos2d::CCPoint point, int idk, bool idk0, int rowCount, int columnCount) { return EditButtonBar::createO(buttons, point, idk, idk0, rowCount, columnCount); });
    editbuttonbar.attr("createA") = EditButtonBar::createA;
    editbuttonbar.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EditButtonBar::createA, EditButtonBar::createH, (LPVOID*)&EditButtonBar::createO_);

    auto uploadactiondelegate = pybind::class_<UploadActionDelegate>(m, "UploadActionDelegate");
    auto uploadpopupdelegate = pybind::class_<UploadPopupDelegate>(m, "UploadPopupDelegate");
    auto setidpopupdelegate = pybind::class_<SetIDPopupDelegate>(m, "SetIDPopupDelegate");
    auto editlevellayer = pybind::class_<EditLevelLayer, cocos2d::CCLayer>(m, "EditLevelLayer");
    editlevellayer.def("create", pybind::overload_cast<GJGameLevel*>(&EditLevelLayer::create));
    editlevellayer.def("create", pybind::overload_cast<pybind::function>(&EditLevelLayer::create));
    editlevellayer.def("createO", [](GJGameLevel* level) { return EditLevelLayer::createO(level); });
    editlevellayer.attr("createA") = EditLevelLayer::createA;
    editlevellayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::createA, EditLevelLayer::createH, (LPVOID*)&EditLevelLayer::createO_);

    editlevellayer.def("init", pybind::overload_cast<EditLevelLayer*, GJGameLevel*>(&EditLevelLayer::init));
    editlevellayer.def("init", pybind::overload_cast<pybind::function>(&EditLevelLayer::init));
    editlevellayer.def("initO", [](EditLevelLayer* self, GJGameLevel* level) { return EditLevelLayer::initO(self, level); });
    editlevellayer.attr("initA") = EditLevelLayer::initA;
    editlevellayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::initA, EditLevelLayer::initH, (LPVOID*)&EditLevelLayer::initO_);

    editlevellayer.def("onLevelInfo", pybind::overload_cast<EditLevelLayer*, cocos2d::CCObject*>(&EditLevelLayer::onLevelInfo));
    editlevellayer.def("onLevelInfo", pybind::overload_cast<pybind::function>(&EditLevelLayer::onLevelInfo));
    editlevellayer.def("onLevelInfoO", [](EditLevelLayer* self, cocos2d::CCObject* p0) { return EditLevelLayer::onLevelInfoO(self, p0); });
    editlevellayer.attr("onLevelInfoA") = EditLevelLayer::onLevelInfoA;
    editlevellayer.attr("onLevelInfoN") = "onLevelInfo";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::onLevelInfoA, EditLevelLayer::onLevelInfoH, (LPVOID*)&EditLevelLayer::onLevelInfoO_);

    editlevellayer.def("onPlay", pybind::overload_cast<EditLevelLayer*, cocos2d::CCObject*>(&EditLevelLayer::onPlay));
    editlevellayer.def("onPlay", pybind::overload_cast<pybind::function>(&EditLevelLayer::onPlay));
    editlevellayer.def("onPlayO", [](EditLevelLayer* self, cocos2d::CCObject* p0) { return EditLevelLayer::onPlayO(self, p0); });
    editlevellayer.attr("onPlayA") = EditLevelLayer::onPlayA;
    editlevellayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::onPlayA, EditLevelLayer::onPlayH, (LPVOID*)&EditLevelLayer::onPlayO_);

    editlevellayer.def("onEdit", pybind::overload_cast<EditLevelLayer*, cocos2d::CCObject*>(&EditLevelLayer::onEdit));
    editlevellayer.def("onEdit", pybind::overload_cast<pybind::function>(&EditLevelLayer::onEdit));
    editlevellayer.def("onEditO", [](EditLevelLayer* self, cocos2d::CCObject* p0) { return EditLevelLayer::onEditO(self, p0); });
    editlevellayer.attr("onEditA") = EditLevelLayer::onEditA;
    editlevellayer.attr("onEditN") = "onEdit";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::onEditA, EditLevelLayer::onEditH, (LPVOID*)&EditLevelLayer::onEditO_);

    editlevellayer.def("onShare", pybind::overload_cast<EditLevelLayer*, cocos2d::CCObject*>(&EditLevelLayer::onShare));
    editlevellayer.def("onShare", pybind::overload_cast<pybind::function>(&EditLevelLayer::onShare));
    editlevellayer.def("onShareO", [](EditLevelLayer* self, cocos2d::CCObject* p0) { return EditLevelLayer::onShareO(self, p0); });
    editlevellayer.attr("onShareA") = EditLevelLayer::onShareA;
    editlevellayer.attr("onShareN") = "onShare";
    cinnamon::hooks::hookCinnamon((PVOID)EditLevelLayer::onShareA, EditLevelLayer::onShareH, (LPVOID*)&EditLevelLayer::onShareO_);

    auto editoroptionslayer = pybind::class_<EditorOptionsLayer>(m, "EditorOptionsLayer");
    auto editorpauselayer = pybind::class_<EditorPauseLayer, CCBlockLayer>(m, "EditorPauseLayer");
    editorpauselayer.def("keyBackClicked", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::keyBackClicked));
    editorpauselayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&EditorPauseLayer::keyBackClicked));
    editorpauselayer.def("keyBackClickedO", [](EditorPauseLayer* self) { return EditorPauseLayer::keyBackClickedO(self); });
    editorpauselayer.attr("keyBackClickedA") = EditorPauseLayer::keyBackClickedA;
    editorpauselayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::keyBackClickedA, EditorPauseLayer::keyBackClickedH, (LPVOID*)&EditorPauseLayer::keyBackClickedO_);

    editorpauselayer.def("keyDown", pybind::overload_cast<EditorPauseLayer*, cocos2d::enumKeyCodes>(&EditorPauseLayer::keyDown));
    editorpauselayer.def("keyDown", pybind::overload_cast<pybind::function>(&EditorPauseLayer::keyDown));
    editorpauselayer.def("keyDownO", [](EditorPauseLayer* self, cocos2d::enumKeyCodes p0) { return EditorPauseLayer::keyDownO(self, p0); });
    editorpauselayer.attr("keyDownA") = EditorPauseLayer::keyDownA;
    editorpauselayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::keyDownA, EditorPauseLayer::keyDownH, (LPVOID*)&EditorPauseLayer::keyDownO_);

    editorpauselayer.def("customSetup", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::customSetup));
    editorpauselayer.def("customSetup", pybind::overload_cast<pybind::function>(&EditorPauseLayer::customSetup));
    editorpauselayer.def("customSetupO", [](EditorPauseLayer* self) { return EditorPauseLayer::customSetupO(self); });
    editorpauselayer.attr("customSetupA") = EditorPauseLayer::customSetupA;
    editorpauselayer.attr("customSetupN") = "customSetup";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::customSetupA, EditorPauseLayer::customSetupH, (LPVOID*)&EditorPauseLayer::customSetupO_);

    editorpauselayer.def("FLAlert_Clicked", pybind::overload_cast<EditorPauseLayer*, FLAlertLayer*, bool>(&EditorPauseLayer::FLAlert_Clicked));
    editorpauselayer.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&EditorPauseLayer::FLAlert_Clicked));
    editorpauselayer.def("FLAlert_ClickedO", [](EditorPauseLayer* self, FLAlertLayer* p0, bool p1) { return EditorPauseLayer::FLAlert_ClickedO(self, p0, p1); });
    editorpauselayer.attr("FLAlert_ClickedA") = EditorPauseLayer::FLAlert_ClickedA;
    editorpauselayer.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::FLAlert_ClickedA, EditorPauseLayer::FLAlert_ClickedH, (LPVOID*)&EditorPauseLayer::FLAlert_ClickedO_);

    editorpauselayer.def("saveLevel", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::saveLevel));
    editorpauselayer.def("saveLevel", pybind::overload_cast<pybind::function>(&EditorPauseLayer::saveLevel));
    editorpauselayer.def("saveLevelO", [](EditorPauseLayer* self) { return EditorPauseLayer::saveLevelO(self); });
    editorpauselayer.attr("saveLevelA") = EditorPauseLayer::saveLevelA;
    editorpauselayer.attr("saveLevelN") = "saveLevel";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::saveLevelA, EditorPauseLayer::saveLevelH, (LPVOID*)&EditorPauseLayer::saveLevelO_);

    editorpauselayer.def("init", pybind::overload_cast<EditorPauseLayer*, LevelEditorLayer*>(&EditorPauseLayer::init));
    editorpauselayer.def("init", pybind::overload_cast<pybind::function>(&EditorPauseLayer::init));
    editorpauselayer.def("initO", [](EditorPauseLayer* self, LevelEditorLayer* p0) { return EditorPauseLayer::initO(self, p0); });
    editorpauselayer.attr("initA") = EditorPauseLayer::initA;
    editorpauselayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::initA, EditorPauseLayer::initH, (LPVOID*)&EditorPauseLayer::initO_);

    editorpauselayer.def("onExitEditor", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onExitEditor));
    editorpauselayer.def("onExitEditor", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onExitEditor));
    editorpauselayer.def("onExitEditorO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onExitEditorO(self, sender); });
    editorpauselayer.attr("onExitEditorA") = EditorPauseLayer::onExitEditorA;
    editorpauselayer.attr("onExitEditorN") = "onExitEditor";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onExitEditorA, EditorPauseLayer::onExitEditorH, (LPVOID*)&EditorPauseLayer::onExitEditorO_);

    editorpauselayer.def("playStep2", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::playStep2));
    editorpauselayer.def("playStep2", pybind::overload_cast<pybind::function>(&EditorPauseLayer::playStep2));
    editorpauselayer.def("playStep2O", [](EditorPauseLayer* self) { return EditorPauseLayer::playStep2O(self); });
    editorpauselayer.attr("playStep2A") = EditorPauseLayer::playStep2A;
    editorpauselayer.attr("playStep2N") = "playStep2";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::playStep2A, EditorPauseLayer::playStep2H, (LPVOID*)&EditorPauseLayer::playStep2O_);

    editorpauselayer.def("onResume", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onResume));
    editorpauselayer.def("onResume", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onResume));
    editorpauselayer.def("onResumeO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onResumeO(self, sender); });
    editorpauselayer.attr("onResumeA") = EditorPauseLayer::onResumeA;
    editorpauselayer.attr("onResumeN") = "onResume";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onResumeA, EditorPauseLayer::onResumeH, (LPVOID*)&EditorPauseLayer::onResumeO_);

    editorpauselayer.def("onSaveAndPlay", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onSaveAndPlay));
    editorpauselayer.def("onSaveAndPlay", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onSaveAndPlay));
    editorpauselayer.def("onSaveAndPlayO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onSaveAndPlayO(self, sender); });
    editorpauselayer.attr("onSaveAndPlayA") = EditorPauseLayer::onSaveAndPlayA;
    editorpauselayer.attr("onSaveAndPlayN") = "onSaveAndPlay";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onSaveAndPlayA, EditorPauseLayer::onSaveAndPlayH, (LPVOID*)&EditorPauseLayer::onSaveAndPlayO_);

    editorpauselayer.def("onSaveAndExit", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onSaveAndExit));
    editorpauselayer.def("onSaveAndExit", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onSaveAndExit));
    editorpauselayer.def("onSaveAndExitO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onSaveAndExitO(self, sender); });
    editorpauselayer.attr("onSaveAndExitA") = EditorPauseLayer::onSaveAndExitA;
    editorpauselayer.attr("onSaveAndExitN") = "onSaveAndExit";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onSaveAndExitA, EditorPauseLayer::onSaveAndExitH, (LPVOID*)&EditorPauseLayer::onSaveAndExitO_);

    editorpauselayer.def("onSave", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onSave));
    editorpauselayer.def("onSave", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onSave));
    editorpauselayer.def("onSaveO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onSaveO(self, sender); });
    editorpauselayer.attr("onSaveA") = EditorPauseLayer::onSaveA;
    editorpauselayer.attr("onSaveN") = "onSave";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onSaveA, EditorPauseLayer::onSaveH, (LPVOID*)&EditorPauseLayer::onSaveO_);

    editorpauselayer.def("onExitNoSave", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onExitNoSave));
    editorpauselayer.def("onExitNoSave", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onExitNoSave));
    editorpauselayer.def("onExitNoSaveO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onExitNoSaveO(self, sender); });
    editorpauselayer.attr("onExitNoSaveA") = EditorPauseLayer::onExitNoSaveA;
    editorpauselayer.attr("onExitNoSaveN") = "onExitNoSave";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onExitNoSaveA, EditorPauseLayer::onExitNoSaveH, (LPVOID*)&EditorPauseLayer::onExitNoSaveO_);

    editorpauselayer.def("uncheckAllPortals", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::uncheckAllPortals));
    editorpauselayer.def("uncheckAllPortals", pybind::overload_cast<pybind::function>(&EditorPauseLayer::uncheckAllPortals));
    editorpauselayer.def("uncheckAllPortalsO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::uncheckAllPortalsO(self, sender); });
    editorpauselayer.attr("uncheckAllPortalsA") = EditorPauseLayer::uncheckAllPortalsA;
    editorpauselayer.attr("uncheckAllPortalsN") = "uncheckAllPortals";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::uncheckAllPortalsA, EditorPauseLayer::uncheckAllPortalsH, (LPVOID*)&EditorPauseLayer::uncheckAllPortalsO_);

    editorpauselayer.def("onResetUnusedColors", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onResetUnusedColors));
    editorpauselayer.def("onResetUnusedColors", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onResetUnusedColors));
    editorpauselayer.def("onResetUnusedColorsO", [](EditorPauseLayer* self, cocos2d::CCObject* sender) { return EditorPauseLayer::onResetUnusedColorsO(self, sender); });
    editorpauselayer.attr("onResetUnusedColorsA") = EditorPauseLayer::onResetUnusedColorsA;
    editorpauselayer.attr("onResetUnusedColorsN") = "onResetUnusedColors";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onResetUnusedColorsA, EditorPauseLayer::onResetUnusedColorsH, (LPVOID*)&EditorPauseLayer::onResetUnusedColorsO_);

    editorpauselayer.def("doResetUnused", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::doResetUnused));
    editorpauselayer.def("doResetUnused", pybind::overload_cast<pybind::function>(&EditorPauseLayer::doResetUnused));
    editorpauselayer.def("doResetUnusedO", [](EditorPauseLayer* self) { return EditorPauseLayer::doResetUnusedO(self); });
    editorpauselayer.attr("doResetUnusedA") = EditorPauseLayer::doResetUnusedA;
    editorpauselayer.attr("doResetUnusedN") = "doResetUnused";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::doResetUnusedA, EditorPauseLayer::doResetUnusedH, (LPVOID*)&EditorPauseLayer::doResetUnusedO_);

    editorpauselayer.def("updateSongButton", pybind::overload_cast<EditorPauseLayer*>(&EditorPauseLayer::updateSongButton));
    editorpauselayer.def("updateSongButton", pybind::overload_cast<pybind::function>(&EditorPauseLayer::updateSongButton));
    editorpauselayer.def("updateSongButtonO", [](EditorPauseLayer* self) { return EditorPauseLayer::updateSongButtonO(self); });
    editorpauselayer.attr("updateSongButtonA") = EditorPauseLayer::updateSongButtonA;
    editorpauselayer.attr("updateSongButtonN") = "updateSongButton";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::updateSongButtonA, EditorPauseLayer::updateSongButtonH, (LPVOID*)&EditorPauseLayer::updateSongButtonO_);

    editorpauselayer.def("onSong", pybind::overload_cast<EditorPauseLayer*, cocos2d::CCObject*>(&EditorPauseLayer::onSong));
    editorpauselayer.def("onSong", pybind::overload_cast<pybind::function>(&EditorPauseLayer::onSong));
    editorpauselayer.def("onSongO", [](EditorPauseLayer* self, cocos2d::CCObject* p0) { return EditorPauseLayer::onSongO(self, p0); });
    editorpauselayer.attr("onSongA") = EditorPauseLayer::onSongA;
    editorpauselayer.attr("onSongN") = "onSong";
    cinnamon::hooks::hookCinnamon((PVOID)EditorPauseLayer::onSongA, EditorPauseLayer::onSongH, (LPVOID*)&EditorPauseLayer::onSongO_);

    auto gjrotationcontroldelegate = pybind::class_<GJRotationControlDelegate>(m, "GJRotationControlDelegate");
    auto gjscalecontroldelegate = pybind::class_<GJScaleControlDelegate>(m, "GJScaleControlDelegate");
    auto editorui = pybind::class_<EditorUI, cocos2d::CCLayer>(m, "EditorUI");
    editorui.def("editButton2Usable", pybind::overload_cast<EditorUI*>(&EditorUI::editButton2Usable));
    editorui.def("editButton2Usable", pybind::overload_cast<pybind::function>(&EditorUI::editButton2Usable));
    editorui.def("editButton2UsableO", [](EditorUI* self) { return EditorUI::editButton2UsableO(self); });
    editorui.attr("editButton2UsableA") = EditorUI::editButton2UsableA;
    editorui.attr("editButton2UsableN") = "editButton2Usable";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editButton2UsableA, EditorUI::editButton2UsableH, (LPVOID*)&EditorUI::editButton2UsableO_);

    editorui.def("constrainGameLayerPosition", pybind::overload_cast<EditorUI*, float, float>(&EditorUI::constrainGameLayerPosition));
    editorui.def("constrainGameLayerPosition", pybind::overload_cast<pybind::function>(&EditorUI::constrainGameLayerPosition));
    editorui.def("constrainGameLayerPositionO", [](EditorUI* self, float x, float y) { return EditorUI::constrainGameLayerPositionO(self, x, y); });
    editorui.attr("constrainGameLayerPositionA") = EditorUI::constrainGameLayerPositionA;
    editorui.attr("constrainGameLayerPositionN") = "constrainGameLayerPosition";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::constrainGameLayerPositionA, EditorUI::constrainGameLayerPositionH, (LPVOID*)&EditorUI::constrainGameLayerPositionO_);

    editorui.def("constrainGameLayerPosition", pybind::overload_cast<>(&EditorUI::constrainGameLayerPosition));
    editorui.def("create", pybind::overload_cast<EditorUI*, LevelEditorLayer*>(&EditorUI::create));
    editorui.def("create", pybind::overload_cast<pybind::function>(&EditorUI::create));
    editorui.def("createO", [](EditorUI* self, LevelEditorLayer* p0) { return EditorUI::createO(self, p0); });
    editorui.attr("createA") = EditorUI::createA;
    editorui.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createA, EditorUI::createH, (LPVOID*)&EditorUI::createO_);

    editorui.def("createCustomItems", pybind::overload_cast<EditorUI*>(&EditorUI::createCustomItems));
    editorui.def("createCustomItems", pybind::overload_cast<pybind::function>(&EditorUI::createCustomItems));
    editorui.def("createCustomItemsO", [](EditorUI* self) { return EditorUI::createCustomItemsO(self); });
    editorui.attr("createCustomItemsA") = EditorUI::createCustomItemsA;
    editorui.attr("createCustomItemsN") = "createCustomItems";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createCustomItemsA, EditorUI::createCustomItemsH, (LPVOID*)&EditorUI::createCustomItemsO_);

    editorui.def("deselectAll", pybind::overload_cast<EditorUI*>(&EditorUI::deselectAll));
    editorui.def("deselectAll", pybind::overload_cast<pybind::function>(&EditorUI::deselectAll));
    editorui.def("deselectAllO", [](EditorUI* self) { return EditorUI::deselectAllO(self); });
    editorui.attr("deselectAllA") = EditorUI::deselectAllA;
    editorui.attr("deselectAllN") = "deselectAll";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::deselectAllA, EditorUI::deselectAllH, (LPVOID*)&EditorUI::deselectAllO_);

    editorui.def("onDeselectAll", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDeselectAll));
    editorui.def("onDeselectAll", pybind::overload_cast<pybind::function>(&EditorUI::onDeselectAll));
    editorui.def("onDeselectAllO", [](EditorUI* self, cocos2d::CCObject* p0) { return EditorUI::onDeselectAllO(self, p0); });
    editorui.attr("onDeselectAllA") = EditorUI::onDeselectAllA;
    editorui.attr("onDeselectAllN") = "onDeselectAll";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDeselectAllA, EditorUI::onDeselectAllH, (LPVOID*)&EditorUI::onDeselectAllO_);

    editorui.def("disableButton", pybind::overload_cast<EditorUI*, CreateMenuItem*>(&EditorUI::disableButton));
    editorui.def("disableButton", pybind::overload_cast<pybind::function>(&EditorUI::disableButton));
    editorui.def("disableButtonO", [](EditorUI* self, CreateMenuItem* p0) { return EditorUI::disableButtonO(self, p0); });
    editorui.attr("disableButtonA") = EditorUI::disableButtonA;
    editorui.attr("disableButtonN") = "disableButton";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::disableButtonA, EditorUI::disableButtonH, (LPVOID*)&EditorUI::disableButtonO_);

    editorui.def("editButtonUsable", pybind::overload_cast<EditorUI*>(&EditorUI::editButtonUsable));
    editorui.def("editButtonUsable", pybind::overload_cast<pybind::function>(&EditorUI::editButtonUsable));
    editorui.def("editButtonUsableO", [](EditorUI* self) { return EditorUI::editButtonUsableO(self); });
    editorui.attr("editButtonUsableA") = EditorUI::editButtonUsableA;
    editorui.attr("editButtonUsableN") = "editButtonUsable";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editButtonUsableA, EditorUI::editButtonUsableH, (LPVOID*)&EditorUI::editButtonUsableO_);

    editorui.def("editObject", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::editObject));
    editorui.def("editObject", pybind::overload_cast<pybind::function>(&EditorUI::editObject));
    editorui.def("editObjectO", [](EditorUI* self, cocos2d::CCObject* p0) { return EditorUI::editObjectO(self, p0); });
    editorui.attr("editObjectA") = EditorUI::editObjectA;
    editorui.attr("editObjectN") = "editObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editObjectA, EditorUI::editObjectH, (LPVOID*)&EditorUI::editObjectO_);

    editorui.def("enableButton", pybind::overload_cast<EditorUI*, CreateMenuItem*>(&EditorUI::enableButton));
    editorui.def("enableButton", pybind::overload_cast<pybind::function>(&EditorUI::enableButton));
    editorui.def("enableButtonO", [](EditorUI* self, CreateMenuItem* p0) { return EditorUI::enableButtonO(self, p0); });
    editorui.attr("enableButtonA") = EditorUI::enableButtonA;
    editorui.attr("enableButtonN") = "enableButton";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::enableButtonA, EditorUI::enableButtonH, (LPVOID*)&EditorUI::enableButtonO_);

    editorui.def("getCreateBtn", pybind::overload_cast<EditorUI*, int, int>(&EditorUI::getCreateBtn));
    editorui.def("getCreateBtn", pybind::overload_cast<pybind::function>(&EditorUI::getCreateBtn));
    editorui.def("getCreateBtnO", [](EditorUI* self, int p0, int p1) { return EditorUI::getCreateBtnO(self, p0, p1); });
    editorui.attr("getCreateBtnA") = EditorUI::getCreateBtnA;
    editorui.attr("getCreateBtnN") = "getCreateBtn";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::getCreateBtnA, EditorUI::getCreateBtnH, (LPVOID*)&EditorUI::getCreateBtnO_);

    editorui.def("getGroupCenter", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, bool>(&EditorUI::getGroupCenter));
    editorui.def("getGroupCenter", pybind::overload_cast<pybind::function>(&EditorUI::getGroupCenter));
    editorui.def("getGroupCenterO", [](EditorUI* self, cocos2d::CCArray* p0, bool p1) { return EditorUI::getGroupCenterO(self, p0, p1); });
    editorui.attr("getGroupCenterA") = EditorUI::getGroupCenterA;
    editorui.attr("getGroupCenterN") = "getGroupCenter";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::getGroupCenterA, EditorUI::getGroupCenterH, (LPVOID*)&EditorUI::getGroupCenterO_);

    editorui.def("getSelectedObjects", pybind::overload_cast<EditorUI*>(&EditorUI::getSelectedObjects));
    editorui.def("getSelectedObjects", pybind::overload_cast<pybind::function>(&EditorUI::getSelectedObjects));
    editorui.def("getSelectedObjectsO", [](EditorUI* self) { return EditorUI::getSelectedObjectsO(self); });
    editorui.attr("getSelectedObjectsA") = EditorUI::getSelectedObjectsA;
    editorui.attr("getSelectedObjectsN") = "getSelectedObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::getSelectedObjectsA, EditorUI::getSelectedObjectsH, (LPVOID*)&EditorUI::getSelectedObjectsO_);

    editorui.def("init", pybind::overload_cast<EditorUI*, LevelEditorLayer*>(&EditorUI::init));
    editorui.def("init", pybind::overload_cast<pybind::function>(&EditorUI::init));
    editorui.def("initO", [](EditorUI* self, LevelEditorLayer* p0) { return EditorUI::initO(self, p0); });
    editorui.attr("initA") = EditorUI::initA;
    editorui.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::initA, EditorUI::initH, (LPVOID*)&EditorUI::initO_);

    editorui.def("keyDown", pybind::overload_cast<EditorUI*, cocos2d::enumKeyCodes>(&EditorUI::keyDown));
    editorui.def("keyDown", pybind::overload_cast<pybind::function>(&EditorUI::keyDown));
    editorui.def("keyDownO", [](EditorUI* self, cocos2d::enumKeyCodes p0) { return EditorUI::keyDownO(self, p0); });
    editorui.attr("keyDownA") = EditorUI::keyDownA;
    editorui.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::keyDownA, EditorUI::keyDownH, (LPVOID*)&EditorUI::keyDownO_);

    editorui.def("keyUp", pybind::overload_cast<EditorUI*, cocos2d::enumKeyCodes>(&EditorUI::keyUp));
    editorui.def("keyUp", pybind::overload_cast<pybind::function>(&EditorUI::keyUp));
    editorui.def("keyUpO", [](EditorUI* self, cocos2d::enumKeyCodes p0) { return EditorUI::keyUpO(self, p0); });
    editorui.attr("keyUpA") = EditorUI::keyUpA;
    editorui.attr("keyUpN") = "keyUp";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::keyUpA, EditorUI::keyUpH, (LPVOID*)&EditorUI::keyUpO_);

    editorui.def("menuItemFromObjectString", pybind::overload_cast<EditorUI*, gd::string, int>(&EditorUI::menuItemFromObjectString));
    editorui.def("menuItemFromObjectString", pybind::overload_cast<pybind::function>(&EditorUI::menuItemFromObjectString));
    editorui.def("menuItemFromObjectStringO", [](EditorUI* self, gd::string p0, int p1) { return EditorUI::menuItemFromObjectStringO(self, p0, p1); });
    editorui.attr("menuItemFromObjectStringA") = EditorUI::menuItemFromObjectStringA;
    editorui.attr("menuItemFromObjectStringN") = "menuItemFromObjectString";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::menuItemFromObjectStringA, EditorUI::menuItemFromObjectStringH, (LPVOID*)&EditorUI::menuItemFromObjectStringO_);

    editorui.def("moveObject", pybind::overload_cast<EditorUI*, GameObject*, cocos2d::CCPoint>(&EditorUI::moveObject));
    editorui.def("moveObject", pybind::overload_cast<pybind::function>(&EditorUI::moveObject));
    editorui.def("moveObjectO", [](EditorUI* self, GameObject* p0, cocos2d::CCPoint p1) { return EditorUI::moveObjectO(self, p0, p1); });
    editorui.attr("moveObjectA") = EditorUI::moveObjectA;
    editorui.attr("moveObjectN") = "moveObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::moveObjectA, EditorUI::moveObjectH, (LPVOID*)&EditorUI::moveObjectO_);

    editorui.def("onDuplicate", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDuplicate));
    editorui.def("onDuplicate", pybind::overload_cast<pybind::function>(&EditorUI::onDuplicate));
    editorui.def("onDuplicateO", [](EditorUI* self, cocos2d::CCObject* p0) { return EditorUI::onDuplicateO(self, p0); });
    editorui.attr("onDuplicateA") = EditorUI::onDuplicateA;
    editorui.attr("onDuplicateN") = "onDuplicate";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDuplicateA, EditorUI::onDuplicateH, (LPVOID*)&EditorUI::onDuplicateO_);

    editorui.def("onCreate", pybind::overload_cast<EditorUI*>(&EditorUI::onCreate));
    editorui.def("onCreate", pybind::overload_cast<pybind::function>(&EditorUI::onCreate));
    editorui.def("onCreateO", [](EditorUI* self) { return EditorUI::onCreateO(self); });
    editorui.attr("onCreateA") = EditorUI::onCreateA;
    editorui.attr("onCreateN") = "onCreate";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onCreateA, EditorUI::onCreateH, (LPVOID*)&EditorUI::onCreateO_);

    editorui.def("onCreateObject", pybind::overload_cast<EditorUI*, int>(&EditorUI::onCreateObject));
    editorui.def("onCreateObject", pybind::overload_cast<pybind::function>(&EditorUI::onCreateObject));
    editorui.def("onCreateObjectO", [](EditorUI* self, int p0) { return EditorUI::onCreateObjectO(self, p0); });
    editorui.attr("onCreateObjectA") = EditorUI::onCreateObjectA;
    editorui.attr("onCreateObjectN") = "onCreateObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onCreateObjectA, EditorUI::onCreateObjectH, (LPVOID*)&EditorUI::onCreateObjectO_);

    editorui.def("copyObjects", pybind::overload_cast<EditorUI*, cocos2d::CCArray*>(&EditorUI::copyObjects));
    editorui.def("copyObjects", pybind::overload_cast<pybind::function>(&EditorUI::copyObjects));
    editorui.def("copyObjectsO", [](EditorUI* self, cocos2d::CCArray* objects) { return EditorUI::copyObjectsO(self, objects); });
    editorui.attr("copyObjectsA") = EditorUI::copyObjectsA;
    editorui.attr("copyObjectsN") = "copyObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::copyObjectsA, EditorUI::copyObjectsH, (LPVOID*)&EditorUI::copyObjectsO_);

    editorui.def("pasteObjects", pybind::overload_cast<EditorUI*, gd::string>(&EditorUI::pasteObjects));
    editorui.def("pasteObjects", pybind::overload_cast<pybind::function>(&EditorUI::pasteObjects));
    editorui.def("pasteObjectsO", [](EditorUI* self, gd::string p0) { return EditorUI::pasteObjectsO(self, p0); });
    editorui.attr("pasteObjectsA") = EditorUI::pasteObjectsA;
    editorui.attr("pasteObjectsN") = "pasteObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::pasteObjectsA, EditorUI::pasteObjectsH, (LPVOID*)&EditorUI::pasteObjectsO_);

    editorui.def("playtestStopped", pybind::overload_cast<EditorUI*>(&EditorUI::playtestStopped));
    editorui.def("playtestStopped", pybind::overload_cast<pybind::function>(&EditorUI::playtestStopped));
    editorui.def("playtestStoppedO", [](EditorUI* self) { return EditorUI::playtestStoppedO(self); });
    editorui.attr("playtestStoppedA") = EditorUI::playtestStoppedA;
    editorui.attr("playtestStoppedN") = "playtestStopped";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::playtestStoppedA, EditorUI::playtestStoppedH, (LPVOID*)&EditorUI::playtestStoppedO_);

    editorui.def("redoLastAction", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::redoLastAction));
    editorui.def("redoLastAction", pybind::overload_cast<pybind::function>(&EditorUI::redoLastAction));
    editorui.def("redoLastActionO", [](EditorUI* self, cocos2d::CCObject* p0) { return EditorUI::redoLastActionO(self, p0); });
    editorui.attr("redoLastActionA") = EditorUI::redoLastActionA;
    editorui.attr("redoLastActionN") = "redoLastAction";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::redoLastActionA, EditorUI::redoLastActionH, (LPVOID*)&EditorUI::redoLastActionO_);

    editorui.def("scaleChangeBegin", pybind::overload_cast<EditorUI*>(&EditorUI::scaleChangeBegin));
    editorui.def("scaleChangeBegin", pybind::overload_cast<pybind::function>(&EditorUI::scaleChangeBegin));
    editorui.def("scaleChangeBeginO", [](EditorUI* self) { return EditorUI::scaleChangeBeginO(self); });
    editorui.attr("scaleChangeBeginA") = EditorUI::scaleChangeBeginA;
    editorui.attr("scaleChangeBeginN") = "scaleChangeBegin";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::scaleChangeBeginA, EditorUI::scaleChangeBeginH, (LPVOID*)&EditorUI::scaleChangeBeginO_);

    editorui.def("scaleChanged", pybind::overload_cast<EditorUI*, float>(&EditorUI::scaleChanged));
    editorui.def("scaleChanged", pybind::overload_cast<pybind::function>(&EditorUI::scaleChanged));
    editorui.def("scaleChangedO", [](EditorUI* self, float p0) { return EditorUI::scaleChangedO(self, p0); });
    editorui.attr("scaleChangedA") = EditorUI::scaleChangedA;
    editorui.attr("scaleChangedN") = "scaleChanged";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::scaleChangedA, EditorUI::scaleChangedH, (LPVOID*)&EditorUI::scaleChangedO_);

    editorui.def("scaleChangeEnded", pybind::overload_cast<EditorUI*>(&EditorUI::scaleChangeEnded));
    editorui.def("scaleChangeEnded", pybind::overload_cast<pybind::function>(&EditorUI::scaleChangeEnded));
    editorui.def("scaleChangeEndedO", [](EditorUI* self) { return EditorUI::scaleChangeEndedO(self); });
    editorui.attr("scaleChangeEndedA") = EditorUI::scaleChangeEndedA;
    editorui.attr("scaleChangeEndedN") = "scaleChangeEnded";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::scaleChangeEndedA, EditorUI::scaleChangeEndedH, (LPVOID*)&EditorUI::scaleChangeEndedO_);

    editorui.def("scaleObjects", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, float, cocos2d::CCPoint>(&EditorUI::scaleObjects));
    editorui.def("scaleObjects", pybind::overload_cast<pybind::function>(&EditorUI::scaleObjects));
    editorui.def("scaleObjectsO", [](EditorUI* self, cocos2d::CCArray* p0, float p1, cocos2d::CCPoint p2) { return EditorUI::scaleObjectsO(self, p0, p1, p2); });
    editorui.attr("scaleObjectsA") = EditorUI::scaleObjectsA;
    editorui.attr("scaleObjectsN") = "scaleObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::scaleObjectsA, EditorUI::scaleObjectsH, (LPVOID*)&EditorUI::scaleObjectsO_);

    editorui.def("selectObjects", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, bool>(&EditorUI::selectObjects));
    editorui.def("selectObjects", pybind::overload_cast<pybind::function>(&EditorUI::selectObjects));
    editorui.def("selectObjectsO", [](EditorUI* self, cocos2d::CCArray* objs, bool ignoreFilters) { return EditorUI::selectObjectsO(self, objs, ignoreFilters); });
    editorui.attr("selectObjectsA") = EditorUI::selectObjectsA;
    editorui.attr("selectObjectsN") = "selectObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::selectObjectsA, EditorUI::selectObjectsH, (LPVOID*)&EditorUI::selectObjectsO_);

    editorui.def("setupCreateMenu", pybind::overload_cast<EditorUI*>(&EditorUI::setupCreateMenu));
    editorui.def("setupCreateMenu", pybind::overload_cast<pybind::function>(&EditorUI::setupCreateMenu));
    editorui.def("setupCreateMenuO", [](EditorUI* self) { return EditorUI::setupCreateMenuO(self); });
    editorui.attr("setupCreateMenuA") = EditorUI::setupCreateMenuA;
    editorui.attr("setupCreateMenuN") = "setupCreateMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::setupCreateMenuA, EditorUI::setupCreateMenuH, (LPVOID*)&EditorUI::setupCreateMenuO_);

    editorui.def("undoLastAction", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::undoLastAction));
    editorui.def("undoLastAction", pybind::overload_cast<pybind::function>(&EditorUI::undoLastAction));
    editorui.def("undoLastActionO", [](EditorUI* self, cocos2d::CCObject* p0) { return EditorUI::undoLastActionO(self, p0); });
    editorui.attr("undoLastActionA") = EditorUI::undoLastActionA;
    editorui.attr("undoLastActionN") = "undoLastAction";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::undoLastActionA, EditorUI::undoLastActionH, (LPVOID*)&EditorUI::undoLastActionO_);

    editorui.def("updateButtons", pybind::overload_cast<EditorUI*>(&EditorUI::updateButtons));
    editorui.def("updateButtons", pybind::overload_cast<pybind::function>(&EditorUI::updateButtons));
    editorui.def("updateButtonsO", [](EditorUI* self) { return EditorUI::updateButtonsO(self); });
    editorui.attr("updateButtonsA") = EditorUI::updateButtonsA;
    editorui.attr("updateButtonsN") = "updateButtons";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateButtonsA, EditorUI::updateButtonsH, (LPVOID*)&EditorUI::updateButtonsO_);

    editorui.def("updateEditMenu", pybind::overload_cast<EditorUI*>(&EditorUI::updateEditMenu));
    editorui.def("updateEditMenu", pybind::overload_cast<pybind::function>(&EditorUI::updateEditMenu));
    editorui.def("updateEditMenuO", [](EditorUI* self) { return EditorUI::updateEditMenuO(self); });
    editorui.attr("updateEditMenuA") = EditorUI::updateEditMenuA;
    editorui.attr("updateEditMenuN") = "updateEditMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateEditMenuA, EditorUI::updateEditMenuH, (LPVOID*)&EditorUI::updateEditMenuO_);

    editorui.def("updateObjectInfoLabel", pybind::overload_cast<EditorUI*>(&EditorUI::updateObjectInfoLabel));
    editorui.def("updateObjectInfoLabel", pybind::overload_cast<pybind::function>(&EditorUI::updateObjectInfoLabel));
    editorui.def("updateObjectInfoLabelO", [](EditorUI* self) { return EditorUI::updateObjectInfoLabelO(self); });
    editorui.attr("updateObjectInfoLabelA") = EditorUI::updateObjectInfoLabelA;
    editorui.attr("updateObjectInfoLabelN") = "updateObjectInfoLabel";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateObjectInfoLabelA, EditorUI::updateObjectInfoLabelH, (LPVOID*)&EditorUI::updateObjectInfoLabelO_);

    editorui.def("updateSlider", pybind::overload_cast<EditorUI*>(&EditorUI::updateSlider));
    editorui.def("updateSlider", pybind::overload_cast<pybind::function>(&EditorUI::updateSlider));
    editorui.def("updateSliderO", [](EditorUI* self) { return EditorUI::updateSliderO(self); });
    editorui.attr("updateSliderA") = EditorUI::updateSliderA;
    editorui.attr("updateSliderN") = "updateSlider";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateSliderA, EditorUI::updateSliderH, (LPVOID*)&EditorUI::updateSliderO_);

    editorui.def("updateZoom", pybind::overload_cast<EditorUI*, float>(&EditorUI::updateZoom));
    editorui.def("updateZoom", pybind::overload_cast<pybind::function>(&EditorUI::updateZoom));
    editorui.def("updateZoomO", [](EditorUI* self, float p0) { return EditorUI::updateZoomO(self, p0); });
    editorui.attr("updateZoomA") = EditorUI::updateZoomA;
    editorui.attr("updateZoomN") = "updateZoom";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateZoomA, EditorUI::updateZoomH, (LPVOID*)&EditorUI::updateZoomO_);

    editorui.def("selectObject", pybind::overload_cast<EditorUI*, GameObject*, bool>(&EditorUI::selectObject));
    editorui.def("selectObject", pybind::overload_cast<pybind::function>(&EditorUI::selectObject));
    editorui.def("selectObjectO", [](EditorUI* self, GameObject* obj, bool filter) { return EditorUI::selectObjectO(self, obj, filter); });
    editorui.attr("selectObjectA") = EditorUI::selectObjectA;
    editorui.attr("selectObjectN") = "selectObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::selectObjectA, EditorUI::selectObjectH, (LPVOID*)&EditorUI::selectObjectO_);

    editorui.def("deselectObject", pybind::overload_cast<EditorUI*, GameObject*>(&EditorUI::deselectObject));
    editorui.def("deselectObject", pybind::overload_cast<pybind::function>(&EditorUI::deselectObject));
    editorui.def("deselectObjectO", [](EditorUI* self, GameObject* object) { return EditorUI::deselectObjectO(self, object); });
    editorui.attr("deselectObjectA") = EditorUI::deselectObjectA;
    editorui.attr("deselectObjectN") = "deselectObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::deselectObjectA, EditorUI::deselectObjectH, (LPVOID*)&EditorUI::deselectObjectO_);

    editorui.def("deleteObject", pybind::overload_cast<EditorUI*, GameObject*, bool>(&EditorUI::deleteObject));
    editorui.def("deleteObject", pybind::overload_cast<pybind::function>(&EditorUI::deleteObject));
    editorui.def("deleteObjectO", [](EditorUI* self, GameObject* object, bool filter) { return EditorUI::deleteObjectO(self, object, filter); });
    editorui.attr("deleteObjectA") = EditorUI::deleteObjectA;
    editorui.attr("deleteObjectN") = "deleteObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::deleteObjectA, EditorUI::deleteObjectH, (LPVOID*)&EditorUI::deleteObjectO_);

    editorui.def("selectAll", pybind::overload_cast<EditorUI*>(&EditorUI::selectAll));
    editorui.def("selectAll", pybind::overload_cast<pybind::function>(&EditorUI::selectAll));
    editorui.def("selectAllO", [](EditorUI* self) { return EditorUI::selectAllO(self); });
    editorui.attr("selectAllA") = EditorUI::selectAllA;
    editorui.attr("selectAllN") = "selectAll";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::selectAllA, EditorUI::selectAllH, (LPVOID*)&EditorUI::selectAllO_);

    editorui.def("selectAllWithDirection", pybind::overload_cast<EditorUI*, bool>(&EditorUI::selectAllWithDirection));
    editorui.def("selectAllWithDirection", pybind::overload_cast<pybind::function>(&EditorUI::selectAllWithDirection));
    editorui.def("selectAllWithDirectionO", [](EditorUI* self, bool left) { return EditorUI::selectAllWithDirectionO(self, left); });
    editorui.attr("selectAllWithDirectionA") = EditorUI::selectAllWithDirectionA;
    editorui.attr("selectAllWithDirectionN") = "selectAllWithDirection";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::selectAllWithDirectionA, EditorUI::selectAllWithDirectionH, (LPVOID*)&EditorUI::selectAllWithDirectionO_);

    editorui.def("getGridSnappedPos", pybind::overload_cast<EditorUI*, cocos2d::CCPoint>(&EditorUI::getGridSnappedPos));
    editorui.def("getGridSnappedPos", pybind::overload_cast<pybind::function>(&EditorUI::getGridSnappedPos));
    editorui.def("getGridSnappedPosO", [](EditorUI* self, cocos2d::CCPoint pos) { return EditorUI::getGridSnappedPosO(self, pos); });
    editorui.attr("getGridSnappedPosA") = EditorUI::getGridSnappedPosA;
    editorui.attr("getGridSnappedPosN") = "getGridSnappedPos";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::getGridSnappedPosA, EditorUI::getGridSnappedPosH, (LPVOID*)&EditorUI::getGridSnappedPosO_);

    editorui.def("onSelectBuildTab", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onSelectBuildTab));
    editorui.def("onSelectBuildTab", pybind::overload_cast<pybind::function>(&EditorUI::onSelectBuildTab));
    editorui.def("onSelectBuildTabO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onSelectBuildTabO(self, sender); });
    editorui.attr("onSelectBuildTabA") = EditorUI::onSelectBuildTabA;
    editorui.attr("onSelectBuildTabN") = "onSelectBuildTab";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onSelectBuildTabA, EditorUI::onSelectBuildTabH, (LPVOID*)&EditorUI::onSelectBuildTabO_);

    editorui.def("onCreateButton", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onCreateButton));
    editorui.def("onCreateButton", pybind::overload_cast<pybind::function>(&EditorUI::onCreateButton));
    editorui.def("onCreateButtonO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onCreateButtonO(self, sender); });
    editorui.attr("onCreateButtonA") = EditorUI::onCreateButtonA;
    editorui.attr("onCreateButtonN") = "onCreateButton";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onCreateButtonA, EditorUI::onCreateButtonH, (LPVOID*)&EditorUI::onCreateButtonO_);

    editorui.def("getSpriteButton", pybind::overload_cast<EditorUI*, const char*, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float>(&EditorUI::getSpriteButton));
    editorui.def("getSpriteButton", pybind::overload_cast<pybind::function>(&EditorUI::getSpriteButton));
    editorui.def("getSpriteButtonO", [](EditorUI* self, const char* sprite, cocos2d::SEL_MenuHandler callback, cocos2d::CCMenu* menu, float scale) { return EditorUI::getSpriteButtonO(self, sprite, callback, menu, scale); });
    editorui.attr("getSpriteButtonA") = EditorUI::getSpriteButtonA;
    editorui.attr("getSpriteButtonN") = "getSpriteButton";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::getSpriteButtonA, EditorUI::getSpriteButtonH, (LPVOID*)&EditorUI::getSpriteButtonO_);

    editorui.def("offsetForKey", pybind::overload_cast<EditorUI*, int>(&EditorUI::offsetForKey));
    editorui.def("offsetForKey", pybind::overload_cast<pybind::function>(&EditorUI::offsetForKey));
    editorui.def("offsetForKeyO", [](EditorUI* self, int objID) { return EditorUI::offsetForKeyO(self, objID); });
    editorui.attr("offsetForKeyA") = EditorUI::offsetForKeyA;
    editorui.attr("offsetForKeyN") = "offsetForKey";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::offsetForKeyA, EditorUI::offsetForKeyH, (LPVOID*)&EditorUI::offsetForKeyO_);

    editorui.def("updateDeleteMenu", pybind::overload_cast<EditorUI*>(&EditorUI::updateDeleteMenu));
    editorui.def("updateDeleteMenu", pybind::overload_cast<pybind::function>(&EditorUI::updateDeleteMenu));
    editorui.def("updateDeleteMenuO", [](EditorUI* self) { return EditorUI::updateDeleteMenuO(self); });
    editorui.attr("updateDeleteMenuA") = EditorUI::updateDeleteMenuA;
    editorui.attr("updateDeleteMenuN") = "updateDeleteMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateDeleteMenuA, EditorUI::updateDeleteMenuH, (LPVOID*)&EditorUI::updateDeleteMenuO_);

    editorui.def("updateCreateMenu", pybind::overload_cast<EditorUI*, bool>(&EditorUI::updateCreateMenu));
    editorui.def("updateCreateMenu", pybind::overload_cast<pybind::function>(&EditorUI::updateCreateMenu));
    editorui.def("updateCreateMenuO", [](EditorUI* self, bool updateTab) { return EditorUI::updateCreateMenuO(self, updateTab); });
    editorui.attr("updateCreateMenuA") = EditorUI::updateCreateMenuA;
    editorui.attr("updateCreateMenuN") = "updateCreateMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateCreateMenuA, EditorUI::updateCreateMenuH, (LPVOID*)&EditorUI::updateCreateMenuO_);

    editorui.def("toggleMode", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::toggleMode));
    editorui.def("toggleMode", pybind::overload_cast<pybind::function>(&EditorUI::toggleMode));
    editorui.def("toggleModeO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::toggleModeO(self, sender); });
    editorui.attr("toggleModeA") = EditorUI::toggleModeA;
    editorui.attr("toggleModeN") = "toggleMode";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::toggleModeA, EditorUI::toggleModeH, (LPVOID*)&EditorUI::toggleModeO_);

    editorui.def("zoomIn", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::zoomIn));
    editorui.def("zoomIn", pybind::overload_cast<pybind::function>(&EditorUI::zoomIn));
    editorui.def("zoomInO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::zoomInO(self, sender); });
    editorui.attr("zoomInA") = EditorUI::zoomInA;
    editorui.attr("zoomInN") = "zoomIn";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::zoomInA, EditorUI::zoomInH, (LPVOID*)&EditorUI::zoomInO_);

    editorui.def("zoomOut", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::zoomOut));
    editorui.def("zoomOut", pybind::overload_cast<pybind::function>(&EditorUI::zoomOut));
    editorui.def("zoomOutO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::zoomOutO(self, sender); });
    editorui.attr("zoomOutA") = EditorUI::zoomOutA;
    editorui.attr("zoomOutN") = "zoomOut";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::zoomOutA, EditorUI::zoomOutH, (LPVOID*)&EditorUI::zoomOutO_);

    editorui.def("rotateObjects", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, float, cocos2d::CCPoint>(&EditorUI::rotateObjects));
    editorui.def("rotateObjects", pybind::overload_cast<pybind::function>(&EditorUI::rotateObjects));
    editorui.def("rotateObjectsO", [](EditorUI* self, cocos2d::CCArray* objects, float angle, cocos2d::CCPoint center) { return EditorUI::rotateObjectsO(self, objects, angle, center); });
    editorui.attr("rotateObjectsA") = EditorUI::rotateObjectsA;
    editorui.attr("rotateObjectsN") = "rotateObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::rotateObjectsA, EditorUI::rotateObjectsH, (LPVOID*)&EditorUI::rotateObjectsO_);

    editorui.def("flipObjectsX", pybind::overload_cast<EditorUI*, cocos2d::CCArray*>(&EditorUI::flipObjectsX));
    editorui.def("flipObjectsX", pybind::overload_cast<pybind::function>(&EditorUI::flipObjectsX));
    editorui.def("flipObjectsXO", [](EditorUI* self, cocos2d::CCArray* objects) { return EditorUI::flipObjectsXO(self, objects); });
    editorui.attr("flipObjectsXA") = EditorUI::flipObjectsXA;
    editorui.attr("flipObjectsXN") = "flipObjectsX";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::flipObjectsXA, EditorUI::flipObjectsXH, (LPVOID*)&EditorUI::flipObjectsXO_);

    editorui.def("flipObjectsY", pybind::overload_cast<EditorUI*, cocos2d::CCArray*>(&EditorUI::flipObjectsY));
    editorui.def("flipObjectsY", pybind::overload_cast<pybind::function>(&EditorUI::flipObjectsY));
    editorui.def("flipObjectsYO", [](EditorUI* self, cocos2d::CCArray* objects) { return EditorUI::flipObjectsYO(self, objects); });
    editorui.attr("flipObjectsYA") = EditorUI::flipObjectsYA;
    editorui.attr("flipObjectsYN") = "flipObjectsY";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::flipObjectsYA, EditorUI::flipObjectsYH, (LPVOID*)&EditorUI::flipObjectsYO_);

    editorui.def("updateGridNodeSize", pybind::overload_cast<EditorUI*>(&EditorUI::updateGridNodeSize));
    editorui.def("updateGridNodeSize", pybind::overload_cast<pybind::function>(&EditorUI::updateGridNodeSize));
    editorui.def("updateGridNodeSizeO", [](EditorUI* self) { return EditorUI::updateGridNodeSizeO(self); });
    editorui.attr("updateGridNodeSizeA") = EditorUI::updateGridNodeSizeA;
    editorui.attr("updateGridNodeSizeN") = "updateGridNodeSize";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::updateGridNodeSizeA, EditorUI::updateGridNodeSizeH, (LPVOID*)&EditorUI::updateGridNodeSizeO_);

    editorui.def("moveGamelayer", pybind::overload_cast<EditorUI*, cocos2d::CCPoint>(&EditorUI::moveGamelayer));
    editorui.def("moveGamelayer", pybind::overload_cast<pybind::function>(&EditorUI::moveGamelayer));
    editorui.def("moveGamelayerO", [](EditorUI* self, cocos2d::CCPoint pos) { return EditorUI::moveGamelayerO(self, pos); });
    editorui.attr("moveGamelayerA") = EditorUI::moveGamelayerA;
    editorui.attr("moveGamelayerN") = "moveGamelayer";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::moveGamelayerA, EditorUI::moveGamelayerH, (LPVOID*)&EditorUI::moveGamelayerO_);

    editorui.def("showUI", pybind::overload_cast<EditorUI*, bool>(&EditorUI::showUI));
    editorui.def("showUI", pybind::overload_cast<pybind::function>(&EditorUI::showUI));
    editorui.def("showUIO", [](EditorUI* self, bool show) { return EditorUI::showUIO(self, show); });
    editorui.attr("showUIA") = EditorUI::showUIA;
    editorui.attr("showUIN") = "showUI";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::showUIA, EditorUI::showUIH, (LPVOID*)&EditorUI::showUIO_);

    editorui.def("resetUI", pybind::overload_cast<EditorUI*>(&EditorUI::resetUI));
    editorui.def("resetUI", pybind::overload_cast<pybind::function>(&EditorUI::resetUI));
    editorui.def("resetUIO", [](EditorUI* self) { return EditorUI::resetUIO(self); });
    editorui.attr("resetUIA") = EditorUI::resetUIA;
    editorui.attr("resetUIN") = "resetUI";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::resetUIA, EditorUI::resetUIH, (LPVOID*)&EditorUI::resetUIO_);

    editorui.def("editObject2", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::editObject2));
    editorui.def("editObject2", pybind::overload_cast<pybind::function>(&EditorUI::editObject2));
    editorui.def("editObject2O", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::editObject2O(self, sender); });
    editorui.attr("editObject2A") = EditorUI::editObject2A;
    editorui.attr("editObject2N") = "editObject2";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editObject2A, EditorUI::editObject2H, (LPVOID*)&EditorUI::editObject2O_);

    editorui.def("editGroup", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::editGroup));
    editorui.def("editGroup", pybind::overload_cast<pybind::function>(&EditorUI::editGroup));
    editorui.def("editGroupO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::editGroupO(self, sender); });
    editorui.attr("editGroupA") = EditorUI::editGroupA;
    editorui.attr("editGroupN") = "editGroup";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editGroupA, EditorUI::editGroupH, (LPVOID*)&EditorUI::editGroupO_);

    editorui.def("moveObjectCall", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::moveObjectCall));
    editorui.def("moveObjectCall", pybind::overload_cast<pybind::function>(&EditorUI::moveObjectCall));
    editorui.def("moveObjectCallO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::moveObjectCallO(self, sender); });
    editorui.attr("moveObjectCallA") = EditorUI::moveObjectCallA;
    editorui.attr("moveObjectCallN") = "moveObjectCall";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::moveObjectCallA, EditorUI::moveObjectCallH, (LPVOID*)&EditorUI::moveObjectCallO_);

    editorui.def("moveObjectCall", pybind::overload_cast<EditorUI*, EditCommand>(&EditorUI::moveObjectCall));
    editorui.def("transformObjectCall", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::transformObjectCall));
    editorui.def("transformObjectCall", pybind::overload_cast<pybind::function>(&EditorUI::transformObjectCall));
    editorui.def("transformObjectCallO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::transformObjectCallO(self, sender); });
    editorui.attr("transformObjectCallA") = EditorUI::transformObjectCallA;
    editorui.attr("transformObjectCallN") = "transformObjectCall";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::transformObjectCallA, EditorUI::transformObjectCallH, (LPVOID*)&EditorUI::transformObjectCallO_);

    editorui.def("transformObjectCall", pybind::overload_cast<EditorUI*, EditCommand>(&EditorUI::transformObjectCall));
    editorui.def("transformObject", pybind::overload_cast<EditorUI*, GameObject*, EditCommand, bool>(&EditorUI::transformObject));
    editorui.def("transformObject", pybind::overload_cast<pybind::function>(&EditorUI::transformObject));
    editorui.def("transformObjectO", [](EditorUI* self, GameObject* obj, EditCommand command, bool snap) { return EditorUI::transformObjectO(self, obj, command, snap); });
    editorui.attr("transformObjectA") = EditorUI::transformObjectA;
    editorui.attr("transformObjectN") = "transformObject";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::transformObjectA, EditorUI::transformObjectH, (LPVOID*)&EditorUI::transformObjectO_);

    editorui.def("onDelete", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDelete));
    editorui.def("onDelete", pybind::overload_cast<pybind::function>(&EditorUI::onDelete));
    editorui.def("onDeleteO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onDeleteO(self, sender); });
    editorui.attr("onDeleteA") = EditorUI::onDeleteA;
    editorui.attr("onDeleteN") = "onDelete";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDeleteA, EditorUI::onDeleteH, (LPVOID*)&EditorUI::onDeleteO_);

    editorui.def("onDeleteSelected", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDeleteSelected));
    editorui.def("onDeleteSelected", pybind::overload_cast<pybind::function>(&EditorUI::onDeleteSelected));
    editorui.def("onDeleteSelectedO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onDeleteSelectedO(self, sender); });
    editorui.attr("onDeleteSelectedA") = EditorUI::onDeleteSelectedA;
    editorui.attr("onDeleteSelectedN") = "onDeleteSelected";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDeleteSelectedA, EditorUI::onDeleteSelectedH, (LPVOID*)&EditorUI::onDeleteSelectedO_);

    editorui.def("onDeleteSelectedType", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDeleteSelectedType));
    editorui.def("onDeleteSelectedType", pybind::overload_cast<pybind::function>(&EditorUI::onDeleteSelectedType));
    editorui.def("onDeleteSelectedTypeO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onDeleteSelectedTypeO(self, sender); });
    editorui.attr("onDeleteSelectedTypeA") = EditorUI::onDeleteSelectedTypeA;
    editorui.attr("onDeleteSelectedTypeN") = "onDeleteSelectedType";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDeleteSelectedTypeA, EditorUI::onDeleteSelectedTypeH, (LPVOID*)&EditorUI::onDeleteSelectedTypeO_);

    editorui.def("onDeleteStartPos", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onDeleteStartPos));
    editorui.def("onDeleteStartPos", pybind::overload_cast<pybind::function>(&EditorUI::onDeleteStartPos));
    editorui.def("onDeleteStartPosO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onDeleteStartPosO(self, sender); });
    editorui.attr("onDeleteStartPosA") = EditorUI::onDeleteStartPosA;
    editorui.attr("onDeleteStartPosN") = "onDeleteStartPos";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onDeleteStartPosA, EditorUI::onDeleteStartPosH, (LPVOID*)&EditorUI::onDeleteStartPosO_);

    editorui.def("onCopy", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onCopy));
    editorui.def("onCopy", pybind::overload_cast<pybind::function>(&EditorUI::onCopy));
    editorui.def("onCopyO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onCopyO(self, sender); });
    editorui.attr("onCopyA") = EditorUI::onCopyA;
    editorui.attr("onCopyN") = "onCopy";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onCopyA, EditorUI::onCopyH, (LPVOID*)&EditorUI::onCopyO_);

    editorui.def("onPaste", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPaste));
    editorui.def("onPaste", pybind::overload_cast<pybind::function>(&EditorUI::onPaste));
    editorui.def("onPasteO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPasteO(self, sender); });
    editorui.attr("onPasteA") = EditorUI::onPasteA;
    editorui.attr("onPasteN") = "onPaste";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPasteA, EditorUI::onPasteH, (LPVOID*)&EditorUI::onPasteO_);

    editorui.def("tryUpdateTimeMarkers", pybind::overload_cast<EditorUI*>(&EditorUI::tryUpdateTimeMarkers));
    editorui.def("tryUpdateTimeMarkers", pybind::overload_cast<pybind::function>(&EditorUI::tryUpdateTimeMarkers));
    editorui.def("tryUpdateTimeMarkersO", [](EditorUI* self) { return EditorUI::tryUpdateTimeMarkersO(self); });
    editorui.attr("tryUpdateTimeMarkersA") = EditorUI::tryUpdateTimeMarkersA;
    editorui.attr("tryUpdateTimeMarkersN") = "tryUpdateTimeMarkers";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::tryUpdateTimeMarkersA, EditorUI::tryUpdateTimeMarkersH, (LPVOID*)&EditorUI::tryUpdateTimeMarkersO_);

    editorui.def("toggleEnableRotate", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::toggleEnableRotate));
    editorui.def("toggleEnableRotate", pybind::overload_cast<pybind::function>(&EditorUI::toggleEnableRotate));
    editorui.def("toggleEnableRotateO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::toggleEnableRotateO(self, sender); });
    editorui.attr("toggleEnableRotateA") = EditorUI::toggleEnableRotateA;
    editorui.attr("toggleEnableRotateN") = "toggleEnableRotate";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::toggleEnableRotateA, EditorUI::toggleEnableRotateH, (LPVOID*)&EditorUI::toggleEnableRotateO_);

    editorui.def("toggleFreeMove", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::toggleFreeMove));
    editorui.def("toggleFreeMove", pybind::overload_cast<pybind::function>(&EditorUI::toggleFreeMove));
    editorui.def("toggleFreeMoveO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::toggleFreeMoveO(self, sender); });
    editorui.attr("toggleFreeMoveA") = EditorUI::toggleFreeMoveA;
    editorui.attr("toggleFreeMoveN") = "toggleFreeMove";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::toggleFreeMoveA, EditorUI::toggleFreeMoveH, (LPVOID*)&EditorUI::toggleFreeMoveO_);

    editorui.def("toggleSwipe", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::toggleSwipe));
    editorui.def("toggleSwipe", pybind::overload_cast<pybind::function>(&EditorUI::toggleSwipe));
    editorui.def("toggleSwipeO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::toggleSwipeO(self, sender); });
    editorui.attr("toggleSwipeA") = EditorUI::toggleSwipeA;
    editorui.attr("toggleSwipeN") = "toggleSwipe";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::toggleSwipeA, EditorUI::toggleSwipeH, (LPVOID*)&EditorUI::toggleSwipeO_);

    editorui.def("toggleSnap", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::toggleSnap));
    editorui.def("toggleSnap", pybind::overload_cast<pybind::function>(&EditorUI::toggleSnap));
    editorui.def("toggleSnapO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::toggleSnapO(self, sender); });
    editorui.attr("toggleSnapA") = EditorUI::toggleSnapA;
    editorui.attr("toggleSnapN") = "toggleSnap";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::toggleSnapA, EditorUI::toggleSnapH, (LPVOID*)&EditorUI::toggleSnapO_);

    editorui.def("onPlayback", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPlayback));
    editorui.def("onPlayback", pybind::overload_cast<pybind::function>(&EditorUI::onPlayback));
    editorui.def("onPlaybackO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPlaybackO(self, sender); });
    editorui.attr("onPlaybackA") = EditorUI::onPlaybackA;
    editorui.attr("onPlaybackN") = "onPlayback";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPlaybackA, EditorUI::onPlaybackH, (LPVOID*)&EditorUI::onPlaybackO_);

    editorui.def("onPlaytest", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPlaytest));
    editorui.def("onPlaytest", pybind::overload_cast<pybind::function>(&EditorUI::onPlaytest));
    editorui.def("onPlaytestO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPlaytestO(self, sender); });
    editorui.attr("onPlaytestA") = EditorUI::onPlaytestA;
    editorui.attr("onPlaytestN") = "onPlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPlaytestA, EditorUI::onPlaytestH, (LPVOID*)&EditorUI::onPlaytestO_);

    editorui.def("onStopPlaytest", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onStopPlaytest));
    editorui.def("onStopPlaytest", pybind::overload_cast<pybind::function>(&EditorUI::onStopPlaytest));
    editorui.def("onStopPlaytestO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onStopPlaytestO(self, sender); });
    editorui.attr("onStopPlaytestA") = EditorUI::onStopPlaytestA;
    editorui.attr("onStopPlaytestN") = "onStopPlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onStopPlaytestA, EditorUI::onStopPlaytestH, (LPVOID*)&EditorUI::onStopPlaytestO_);

    editorui.def("onGroupUp", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onGroupUp));
    editorui.def("onGroupUp", pybind::overload_cast<pybind::function>(&EditorUI::onGroupUp));
    editorui.def("onGroupUpO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onGroupUpO(self, sender); });
    editorui.attr("onGroupUpA") = EditorUI::onGroupUpA;
    editorui.attr("onGroupUpN") = "onGroupUp";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onGroupUpA, EditorUI::onGroupUpH, (LPVOID*)&EditorUI::onGroupUpO_);

    editorui.def("onGroupDown", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onGroupDown));
    editorui.def("onGroupDown", pybind::overload_cast<pybind::function>(&EditorUI::onGroupDown));
    editorui.def("onGroupDownO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onGroupDownO(self, sender); });
    editorui.attr("onGroupDownA") = EditorUI::onGroupDownA;
    editorui.attr("onGroupDownN") = "onGroupDown";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onGroupDownA, EditorUI::onGroupDownH, (LPVOID*)&EditorUI::onGroupDownO_);

    editorui.def("selectBuildTab", pybind::overload_cast<EditorUI*, int>(&EditorUI::selectBuildTab));
    editorui.def("selectBuildTab", pybind::overload_cast<pybind::function>(&EditorUI::selectBuildTab));
    editorui.def("selectBuildTabO", [](EditorUI* self, int tab) { return EditorUI::selectBuildTabO(self, tab); });
    editorui.attr("selectBuildTabA") = EditorUI::selectBuildTabA;
    editorui.attr("selectBuildTabN") = "selectBuildTab";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::selectBuildTabA, EditorUI::selectBuildTabH, (LPVOID*)&EditorUI::selectBuildTabO_);

    editorui.def("onPause", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPause));
    editorui.def("onPause", pybind::overload_cast<pybind::function>(&EditorUI::onPause));
    editorui.def("onPauseO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPauseO(self, sender); });
    editorui.attr("onPauseA") = EditorUI::onPauseA;
    editorui.attr("onPauseN") = "onPause";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPauseA, EditorUI::onPauseH, (LPVOID*)&EditorUI::onPauseO_);

    editorui.def("onSettings", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onSettings));
    editorui.def("onSettings", pybind::overload_cast<pybind::function>(&EditorUI::onSettings));
    editorui.def("onSettingsO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onSettingsO(self, sender); });
    editorui.attr("onSettingsA") = EditorUI::onSettingsA;
    editorui.attr("onSettingsN") = "onSettings";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onSettingsA, EditorUI::onSettingsH, (LPVOID*)&EditorUI::onSettingsO_);

    editorui.def("activateRotationControl", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::activateRotationControl));
    editorui.def("activateRotationControl", pybind::overload_cast<pybind::function>(&EditorUI::activateRotationControl));
    editorui.def("activateRotationControlO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::activateRotationControlO(self, sender); });
    editorui.attr("activateRotationControlA") = EditorUI::activateRotationControlA;
    editorui.attr("activateRotationControlN") = "activateRotationControl";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::activateRotationControlA, EditorUI::activateRotationControlH, (LPVOID*)&EditorUI::activateRotationControlO_);

    editorui.def("activateScaleControl", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::activateScaleControl));
    editorui.def("activateScaleControl", pybind::overload_cast<pybind::function>(&EditorUI::activateScaleControl));
    editorui.def("activateScaleControlO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::activateScaleControlO(self, sender); });
    editorui.attr("activateScaleControlA") = EditorUI::activateScaleControlA;
    editorui.attr("activateScaleControlN") = "activateScaleControl";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::activateScaleControlA, EditorUI::activateScaleControlH, (LPVOID*)&EditorUI::activateScaleControlO_);

    editorui.def("dynamicGroupUpdate", pybind::overload_cast<EditorUI*, bool>(&EditorUI::dynamicGroupUpdate));
    editorui.def("dynamicGroupUpdate", pybind::overload_cast<pybind::function>(&EditorUI::dynamicGroupUpdate));
    editorui.def("dynamicGroupUpdateO", [](EditorUI* self, bool idk) { return EditorUI::dynamicGroupUpdateO(self, idk); });
    editorui.attr("dynamicGroupUpdateA") = EditorUI::dynamicGroupUpdateA;
    editorui.attr("dynamicGroupUpdateN") = "dynamicGroupUpdate";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::dynamicGroupUpdateA, EditorUI::dynamicGroupUpdateH, (LPVOID*)&EditorUI::dynamicGroupUpdateO_);

    editorui.def("createRockOutline", pybind::overload_cast<EditorUI*>(&EditorUI::createRockOutline));
    editorui.def("createRockOutline", pybind::overload_cast<pybind::function>(&EditorUI::createRockOutline));
    editorui.def("createRockOutlineO", [](EditorUI* self) { return EditorUI::createRockOutlineO(self); });
    editorui.attr("createRockOutlineA") = EditorUI::createRockOutlineA;
    editorui.attr("createRockOutlineN") = "createRockOutline";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createRockOutlineA, EditorUI::createRockOutlineH, (LPVOID*)&EditorUI::createRockOutlineO_);

    editorui.def("createRockEdges", pybind::overload_cast<EditorUI*>(&EditorUI::createRockEdges));
    editorui.def("createRockEdges", pybind::overload_cast<pybind::function>(&EditorUI::createRockEdges));
    editorui.def("createRockEdgesO", [](EditorUI* self) { return EditorUI::createRockEdgesO(self); });
    editorui.attr("createRockEdgesA") = EditorUI::createRockEdgesA;
    editorui.attr("createRockEdgesN") = "createRockEdges";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createRockEdgesA, EditorUI::createRockEdgesH, (LPVOID*)&EditorUI::createRockEdgesO_);

    editorui.def("createRockBase", pybind::overload_cast<EditorUI*>(&EditorUI::createRockBase));
    editorui.def("createRockBase", pybind::overload_cast<pybind::function>(&EditorUI::createRockBase));
    editorui.def("createRockBaseO", [](EditorUI* self) { return EditorUI::createRockBaseO(self); });
    editorui.attr("createRockBaseA") = EditorUI::createRockBaseA;
    editorui.attr("createRockBaseN") = "createRockBase";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createRockBaseA, EditorUI::createRockBaseH, (LPVOID*)&EditorUI::createRockBaseO_);

    editorui.def("onCopyState", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onCopyState));
    editorui.def("onCopyState", pybind::overload_cast<pybind::function>(&EditorUI::onCopyState));
    editorui.def("onCopyStateO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onCopyStateO(self, sender); });
    editorui.attr("onCopyStateA") = EditorUI::onCopyStateA;
    editorui.attr("onCopyStateN") = "onCopyState";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onCopyStateA, EditorUI::onCopyStateH, (LPVOID*)&EditorUI::onCopyStateO_);

    editorui.def("onPasteColor", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPasteColor));
    editorui.def("onPasteColor", pybind::overload_cast<pybind::function>(&EditorUI::onPasteColor));
    editorui.def("onPasteColorO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPasteColorO(self, sender); });
    editorui.attr("onPasteColorA") = EditorUI::onPasteColorA;
    editorui.attr("onPasteColorN") = "onPasteColor";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPasteColorA, EditorUI::onPasteColorH, (LPVOID*)&EditorUI::onPasteColorO_);

    editorui.def("onPasteState", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onPasteState));
    editorui.def("onPasteState", pybind::overload_cast<pybind::function>(&EditorUI::onPasteState));
    editorui.def("onPasteStateO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onPasteStateO(self, sender); });
    editorui.attr("onPasteStateA") = EditorUI::onPasteStateA;
    editorui.attr("onPasteStateN") = "onPasteState";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onPasteStateA, EditorUI::onPasteStateH, (LPVOID*)&EditorUI::onPasteStateO_);

    editorui.def("onGroupSticky", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onGroupSticky));
    editorui.def("onGroupSticky", pybind::overload_cast<pybind::function>(&EditorUI::onGroupSticky));
    editorui.def("onGroupStickyO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onGroupStickyO(self, sender); });
    editorui.attr("onGroupStickyA") = EditorUI::onGroupStickyA;
    editorui.attr("onGroupStickyN") = "onGroupSticky";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onGroupStickyA, EditorUI::onGroupStickyH, (LPVOID*)&EditorUI::onGroupStickyO_);

    editorui.def("onUngroupSticky", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onUngroupSticky));
    editorui.def("onUngroupSticky", pybind::overload_cast<pybind::function>(&EditorUI::onUngroupSticky));
    editorui.def("onUngroupStickyO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onUngroupStickyO(self, sender); });
    editorui.attr("onUngroupStickyA") = EditorUI::onUngroupStickyA;
    editorui.attr("onUngroupStickyN") = "onUngroupSticky";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onUngroupStickyA, EditorUI::onUngroupStickyH, (LPVOID*)&EditorUI::onUngroupStickyO_);

    editorui.def("onGoToLayer", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onGoToLayer));
    editorui.def("onGoToLayer", pybind::overload_cast<pybind::function>(&EditorUI::onGoToLayer));
    editorui.def("onGoToLayerO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onGoToLayerO(self, sender); });
    editorui.attr("onGoToLayerA") = EditorUI::onGoToLayerA;
    editorui.attr("onGoToLayerN") = "onGoToLayer";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onGoToLayerA, EditorUI::onGoToLayerH, (LPVOID*)&EditorUI::onGoToLayerO_);

    editorui.def("onGoToBaseLayer", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onGoToBaseLayer));
    editorui.def("onGoToBaseLayer", pybind::overload_cast<pybind::function>(&EditorUI::onGoToBaseLayer));
    editorui.def("onGoToBaseLayerO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onGoToBaseLayerO(self, sender); });
    editorui.attr("onGoToBaseLayerA") = EditorUI::onGoToBaseLayerA;
    editorui.attr("onGoToBaseLayerN") = "onGoToBaseLayer";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onGoToBaseLayerA, EditorUI::onGoToBaseLayerH, (LPVOID*)&EditorUI::onGoToBaseLayerO_);

    editorui.def("onToggleGuide", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::onToggleGuide));
    editorui.def("onToggleGuide", pybind::overload_cast<pybind::function>(&EditorUI::onToggleGuide));
    editorui.def("onToggleGuideO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::onToggleGuideO(self, sender); });
    editorui.attr("onToggleGuideA") = EditorUI::onToggleGuideA;
    editorui.attr("onToggleGuideN") = "onToggleGuide";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::onToggleGuideA, EditorUI::onToggleGuideH, (LPVOID*)&EditorUI::onToggleGuideO_);

    editorui.def("editColor", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::editColor));
    editorui.def("editColor", pybind::overload_cast<pybind::function>(&EditorUI::editColor));
    editorui.def("editColorO", [](EditorUI* self, cocos2d::CCObject* sender) { return EditorUI::editColorO(self, sender); });
    editorui.attr("editColorA") = EditorUI::editColorA;
    editorui.attr("editColorN") = "editColor";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::editColorA, EditorUI::editColorH, (LPVOID*)&EditorUI::editColorO_);

    editorui.def("alignObjects", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, bool>(&EditorUI::alignObjects));
    editorui.def("alignObjects", pybind::overload_cast<pybind::function>(&EditorUI::alignObjects));
    editorui.def("alignObjectsO", [](EditorUI* self, cocos2d::CCArray* objs, bool alignY) { return EditorUI::alignObjectsO(self, objs, alignY); });
    editorui.attr("alignObjectsA") = EditorUI::alignObjectsA;
    editorui.attr("alignObjectsN") = "alignObjects";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::alignObjectsA, EditorUI::alignObjectsH, (LPVOID*)&EditorUI::alignObjectsO_);

    editorui.def("scrollWheel", pybind::overload_cast<EditorUI*, float, float>(&EditorUI::scrollWheel));
    editorui.def("scrollWheel", pybind::overload_cast<pybind::function>(&EditorUI::scrollWheel));
    editorui.def("scrollWheelO", [](EditorUI* self, float vertical, float horizontal) { return EditorUI::scrollWheelO(self, vertical, horizontal); });
    editorui.attr("scrollWheelA") = EditorUI::scrollWheelA;
    editorui.attr("scrollWheelN") = "scrollWheel";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::scrollWheelA, EditorUI::scrollWheelH, (LPVOID*)&EditorUI::scrollWheelO_);

    editorui.def("createMoveMenu", pybind::overload_cast<EditorUI*>(&EditorUI::createMoveMenu));
    editorui.def("createMoveMenu", pybind::overload_cast<pybind::function>(&EditorUI::createMoveMenu));
    editorui.def("createMoveMenuO", [](EditorUI* self) { return EditorUI::createMoveMenuO(self); });
    editorui.attr("createMoveMenuA") = EditorUI::createMoveMenuA;
    editorui.attr("createMoveMenuN") = "createMoveMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::createMoveMenuA, EditorUI::createMoveMenuH, (LPVOID*)&EditorUI::createMoveMenuO_);

    editorui.def("sliderChanged", pybind::overload_cast<EditorUI*, cocos2d::CCObject*>(&EditorUI::sliderChanged));
    editorui.def("sliderChanged", pybind::overload_cast<pybind::function>(&EditorUI::sliderChanged));
    editorui.def("sliderChangedO", [](EditorUI* self, cocos2d::CCObject* slider) { return EditorUI::sliderChangedO(self, slider); });
    editorui.attr("sliderChangedA") = EditorUI::sliderChangedA;
    editorui.attr("sliderChangedN") = "sliderChanged";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::sliderChangedA, EditorUI::sliderChangedH, (LPVOID*)&EditorUI::sliderChangedO_);

    editorui.def("repositionObjectsToCenter", pybind::overload_cast<EditorUI*, cocos2d::CCArray*, cocos2d::CCPoint, bool>(&EditorUI::repositionObjectsToCenter));
    editorui.def("repositionObjectsToCenter", pybind::overload_cast<pybind::function>(&EditorUI::repositionObjectsToCenter));
    editorui.def("repositionObjectsToCenterO", [](EditorUI* self, cocos2d::CCArray* objs, cocos2d::CCPoint center, bool ignoreGroupParent) { return EditorUI::repositionObjectsToCenterO(self, objs, center, ignoreGroupParent); });
    editorui.attr("repositionObjectsToCenterA") = EditorUI::repositionObjectsToCenterA;
    editorui.attr("repositionObjectsToCenterN") = "repositionObjectsToCenter";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::repositionObjectsToCenterA, EditorUI::repositionObjectsToCenterH, (LPVOID*)&EditorUI::repositionObjectsToCenterO_);

    editorui.def("draw", pybind::overload_cast<EditorUI*>(&EditorUI::draw));
    editorui.def("draw", pybind::overload_cast<pybind::function>(&EditorUI::draw));
    editorui.def("drawO", [](EditorUI* self) { return EditorUI::drawO(self); });
    editorui.attr("drawA") = EditorUI::drawA;
    editorui.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)EditorUI::drawA, EditorUI::drawH, (LPVOID*)&EditorUI::drawO_);

    auto effectgameobject = pybind::class_<EffectGameObject, GameObject>(m, "EffectGameObject");
    effectgameobject.def("create", pybind::overload_cast<const char*>(&EffectGameObject::create));
    effectgameobject.def("create", pybind::overload_cast<pybind::function>(&EffectGameObject::create));
    effectgameobject.def("createO", [](const char* p0) { return EffectGameObject::createO(p0); });
    effectgameobject.attr("createA") = EffectGameObject::createA;
    effectgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::createA, EffectGameObject::createH, (LPVOID*)&EffectGameObject::createO_);

    effectgameobject.def("init", pybind::overload_cast<EffectGameObject*, char const*>(&EffectGameObject::init));
    effectgameobject.def("init", pybind::overload_cast<pybind::function>(&EffectGameObject::init));
    effectgameobject.def("initO", [](EffectGameObject* self, char const* p0) { return EffectGameObject::initO(self, p0); });
    effectgameobject.attr("initA") = EffectGameObject::initA;
    effectgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::initA, EffectGameObject::initH, (LPVOID*)&EffectGameObject::initO_);

    effectgameobject.def("getSaveString", pybind::overload_cast<EffectGameObject*>(&EffectGameObject::getSaveString));
    effectgameobject.def("getSaveString", pybind::overload_cast<pybind::function>(&EffectGameObject::getSaveString));
    effectgameobject.def("getSaveStringO", [](EffectGameObject* self) { return EffectGameObject::getSaveStringO(self); });
    effectgameobject.attr("getSaveStringA") = EffectGameObject::getSaveStringA;
    effectgameobject.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::getSaveStringA, EffectGameObject::getSaveStringH, (LPVOID*)&EffectGameObject::getSaveStringO_);

    effectgameobject.def("updateSpecialColor", pybind::overload_cast<EffectGameObject*>(&EffectGameObject::updateSpecialColor));
    effectgameobject.def("updateSpecialColor", pybind::overload_cast<pybind::function>(&EffectGameObject::updateSpecialColor));
    effectgameobject.def("updateSpecialColorO", [](EffectGameObject* self) { return EffectGameObject::updateSpecialColorO(self); });
    effectgameobject.attr("updateSpecialColorA") = EffectGameObject::updateSpecialColorA;
    effectgameobject.attr("updateSpecialColorN") = "updateSpecialColor";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::updateSpecialColorA, EffectGameObject::updateSpecialColorH, (LPVOID*)&EffectGameObject::updateSpecialColorO_);

    effectgameobject.def("spawnXPosition", pybind::overload_cast<EffectGameObject*>(&EffectGameObject::spawnXPosition));
    effectgameobject.def("spawnXPosition", pybind::overload_cast<pybind::function>(&EffectGameObject::spawnXPosition));
    effectgameobject.def("spawnXPositionO", [](EffectGameObject* self) { return EffectGameObject::spawnXPositionO(self); });
    effectgameobject.attr("spawnXPositionA") = EffectGameObject::spawnXPositionA;
    effectgameobject.attr("spawnXPositionN") = "spawnXPosition";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::spawnXPositionA, EffectGameObject::spawnXPositionH, (LPVOID*)&EffectGameObject::spawnXPositionO_);

    effectgameobject.def("triggerActivated", pybind::overload_cast<EffectGameObject*, float>(&EffectGameObject::triggerActivated));
    effectgameobject.def("triggerActivated", pybind::overload_cast<pybind::function>(&EffectGameObject::triggerActivated));
    effectgameobject.def("triggerActivatedO", [](EffectGameObject* self, float p0) { return EffectGameObject::triggerActivatedO(self, p0); });
    effectgameobject.attr("triggerActivatedA") = EffectGameObject::triggerActivatedA;
    effectgameobject.attr("triggerActivatedN") = "triggerActivated";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::triggerActivatedA, EffectGameObject::triggerActivatedH, (LPVOID*)&EffectGameObject::triggerActivatedO_);

    auto endlevellayer = pybind::class_<EndLevelLayer>(m, "EndLevelLayer");
    endlevellayer.def("create", pybind::overload_cast<>(&EndLevelLayer::create));
    endlevellayer.def("create", pybind::overload_cast<pybind::function>(&EndLevelLayer::create));
    endlevellayer.def("createO", []() { return EndLevelLayer::createO(); });
    endlevellayer.attr("createA") = EndLevelLayer::createA;
    endlevellayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EndLevelLayer::createA, EndLevelLayer::createH, (LPVOID*)&EndLevelLayer::createO_);

    endlevellayer.def("onMenu", pybind::overload_cast<EndLevelLayer*, cocos2d::CCObject*>(&EndLevelLayer::onMenu));
    endlevellayer.def("onMenu", pybind::overload_cast<pybind::function>(&EndLevelLayer::onMenu));
    endlevellayer.def("onMenuO", [](EndLevelLayer* self, cocos2d::CCObject* sender) { return EndLevelLayer::onMenuO(self, sender); });
    endlevellayer.attr("onMenuA") = EndLevelLayer::onMenuA;
    endlevellayer.attr("onMenuN") = "onMenu";
    cinnamon::hooks::hookCinnamon((PVOID)EndLevelLayer::onMenuA, EndLevelLayer::onMenuH, (LPVOID*)&EndLevelLayer::onMenuO_);

    endlevellayer.def("onEdit", pybind::overload_cast<EndLevelLayer*, cocos2d::CCObject*>(&EndLevelLayer::onEdit));
    endlevellayer.def("onEdit", pybind::overload_cast<pybind::function>(&EndLevelLayer::onEdit));
    endlevellayer.def("onEditO", [](EndLevelLayer* self, cocos2d::CCObject* sender) { return EndLevelLayer::onEditO(self, sender); });
    endlevellayer.attr("onEditA") = EndLevelLayer::onEditA;
    endlevellayer.attr("onEditN") = "onEdit";
    cinnamon::hooks::hookCinnamon((PVOID)EndLevelLayer::onEditA, EndLevelLayer::onEditH, (LPVOID*)&EndLevelLayer::onEditO_);

    auto endportalobject = pybind::class_<EndPortalObject, GameObject>(m, "EndPortalObject");
    endportalobject.def("create", pybind::overload_cast<>(&EndPortalObject::create));
    endportalobject.def("create", pybind::overload_cast<pybind::function>(&EndPortalObject::create));
    endportalobject.def("createO", []() { return EndPortalObject::createO(); });
    endportalobject.attr("createA") = EndPortalObject::createA;
    endportalobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EndPortalObject::createA, EndPortalObject::createH, (LPVOID*)&EndPortalObject::createO_);

    endportalobject.def("updateColors", pybind::overload_cast<EndPortalObject*, cocos2d::_ccColor3B>(&EndPortalObject::updateColors));
    endportalobject.def("updateColors", pybind::overload_cast<pybind::function>(&EndPortalObject::updateColors));
    endportalobject.def("updateColorsO", [](EndPortalObject* self, cocos2d::_ccColor3B p0) { return EndPortalObject::updateColorsO(self, p0); });
    endportalobject.attr("updateColorsA") = EndPortalObject::updateColorsA;
    endportalobject.attr("updateColorsN") = "updateColors";
    cinnamon::hooks::hookCinnamon((PVOID)EndPortalObject::updateColorsA, EndPortalObject::updateColorsH, (LPVOID*)&EndPortalObject::updateColorsO_);

    auto extendedlayer = pybind::class_<ExtendedLayer>(m, "ExtendedLayer");
    auto fmodaudioengine = pybind::class_<FMODAudioEngine, cocos2d::CCNode>(m, "FMODAudioEngine");
    fmodaudioengine.def("sharedEngine", pybind::overload_cast<>(&FMODAudioEngine::sharedEngine));
    fmodaudioengine.def("sharedEngine", pybind::overload_cast<pybind::function>(&FMODAudioEngine::sharedEngine));
    fmodaudioengine.def("sharedEngineO", []() { return FMODAudioEngine::sharedEngineO(); });
    fmodaudioengine.attr("sharedEngineA") = FMODAudioEngine::sharedEngineA;
    fmodaudioengine.attr("sharedEngineN") = "sharedEngine";
    cinnamon::hooks::hookCinnamon((PVOID)FMODAudioEngine::sharedEngineA, FMODAudioEngine::sharedEngineH, (LPVOID*)&FMODAudioEngine::sharedEngineO_);

    fmodaudioengine.def("preloadEffect", pybind::overload_cast<FMODAudioEngine*, gd::string>(&FMODAudioEngine::preloadEffect));
    fmodaudioengine.def("preloadEffect", pybind::overload_cast<pybind::function>(&FMODAudioEngine::preloadEffect));
    fmodaudioengine.def("preloadEffectO", [](FMODAudioEngine* self, gd::string filename) { return FMODAudioEngine::preloadEffectO(self, filename); });
    fmodaudioengine.attr("preloadEffectA") = FMODAudioEngine::preloadEffectA;
    fmodaudioengine.attr("preloadEffectN") = "preloadEffect";
    cinnamon::hooks::hookCinnamon((PVOID)FMODAudioEngine::preloadEffectA, FMODAudioEngine::preloadEffectH, (LPVOID*)&FMODAudioEngine::preloadEffectO_);

    fmodaudioengine.def("isBackgroundMusicPlaying", pybind::overload_cast<FMODAudioEngine*>(&FMODAudioEngine::isBackgroundMusicPlaying));
    fmodaudioengine.def("isBackgroundMusicPlaying", pybind::overload_cast<pybind::function>(&FMODAudioEngine::isBackgroundMusicPlaying));
    fmodaudioengine.def("isBackgroundMusicPlayingO", [](FMODAudioEngine* self) { return FMODAudioEngine::isBackgroundMusicPlayingO(self); });
    fmodaudioengine.attr("isBackgroundMusicPlayingA") = FMODAudioEngine::isBackgroundMusicPlayingA;
    fmodaudioengine.attr("isBackgroundMusicPlayingN") = "isBackgroundMusicPlaying";
    cinnamon::hooks::hookCinnamon((PVOID)FMODAudioEngine::isBackgroundMusicPlayingA, FMODAudioEngine::isBackgroundMusicPlayingH, (LPVOID*)&FMODAudioEngine::isBackgroundMusicPlayingO_);

    fmodaudioengine.def("isBackgroundMusicPlaying", pybind::overload_cast<FMODAudioEngine*, gd::string>(&FMODAudioEngine::isBackgroundMusicPlaying));
    fmodaudioengine.def("playBackgroundMusic", pybind::overload_cast<FMODAudioEngine*, gd::string, bool, bool>(&FMODAudioEngine::playBackgroundMusic));
    fmodaudioengine.def("playBackgroundMusic", pybind::overload_cast<pybind::function>(&FMODAudioEngine::playBackgroundMusic));
    fmodaudioengine.def("playBackgroundMusicO", [](FMODAudioEngine* self, gd::string path, bool fade, bool paused) { return FMODAudioEngine::playBackgroundMusicO(self, path, fade, paused); });
    fmodaudioengine.attr("playBackgroundMusicA") = FMODAudioEngine::playBackgroundMusicA;
    fmodaudioengine.attr("playBackgroundMusicN") = "playBackgroundMusic";
    cinnamon::hooks::hookCinnamon((PVOID)FMODAudioEngine::playBackgroundMusicA, FMODAudioEngine::playBackgroundMusicH, (LPVOID*)&FMODAudioEngine::playBackgroundMusicO_);

    fmodaudioengine.def("update", pybind::overload_cast<FMODAudioEngine*, float>(&FMODAudioEngine::update));
    fmodaudioengine.def("update", pybind::overload_cast<pybind::function>(&FMODAudioEngine::update));
    fmodaudioengine.def("updateO", [](FMODAudioEngine* self, float p0) { return FMODAudioEngine::updateO(self, p0); });
    fmodaudioengine.attr("updateA") = FMODAudioEngine::updateA;
    fmodaudioengine.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)FMODAudioEngine::updateA, FMODAudioEngine::updateH, (LPVOID*)&FMODAudioEngine::updateO_);

    auto fmodsound = pybind::class_<FMODSound, cocos2d::CCNode>(m, "FMODSound");
    auto friendrequestdelegate = pybind::class_<FriendRequestDelegate>(m, "FriendRequestDelegate");
    auto userlistdelegate = pybind::class_<UserListDelegate>(m, "UserListDelegate");
    auto friendsprofilepage = pybind::class_<FriendsProfilePage, FLAlertLayer>(m, "FriendsProfilePage");
    friendsprofilepage.def("create", pybind::overload_cast<UserListType>(&FriendsProfilePage::create));
    friendsprofilepage.def("create", pybind::overload_cast<pybind::function>(&FriendsProfilePage::create));
    friendsprofilepage.def("createO", [](UserListType p0) { return FriendsProfilePage::createO(p0); });
    friendsprofilepage.attr("createA") = FriendsProfilePage::createA;
    friendsprofilepage.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)FriendsProfilePage::createA, FriendsProfilePage::createH, (LPVOID*)&FriendsProfilePage::createO_);

    friendsprofilepage.def("init", pybind::overload_cast<FriendsProfilePage*, UserListType>(&FriendsProfilePage::init));
    friendsprofilepage.def("init", pybind::overload_cast<pybind::function>(&FriendsProfilePage::init));
    friendsprofilepage.def("initO", [](FriendsProfilePage* self, UserListType p0) { return FriendsProfilePage::initO(self, p0); });
    friendsprofilepage.attr("initA") = FriendsProfilePage::initA;
    friendsprofilepage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)FriendsProfilePage::initA, FriendsProfilePage::initH, (LPVOID*)&FriendsProfilePage::initO_);

    auto gjaccountbackupdelegate = pybind::class_<GJAccountBackupDelegate>(m, "GJAccountBackupDelegate");
    auto gjaccountdelegate = pybind::class_<GJAccountDelegate>(m, "GJAccountDelegate");
    auto gjaccountlogindelegate = pybind::class_<GJAccountLoginDelegate>(m, "GJAccountLoginDelegate");
    auto gjaccountmanager = pybind::class_<GJAccountManager, cocos2d::CCNode>(m, "GJAccountManager");
    gjaccountmanager.def("sharedState", pybind::overload_cast<>(&GJAccountManager::sharedState));
    gjaccountmanager.def("sharedState", pybind::overload_cast<pybind::function>(&GJAccountManager::sharedState));
    gjaccountmanager.def("sharedStateO", []() { return GJAccountManager::sharedStateO(); });
    gjaccountmanager.attr("sharedStateA") = GJAccountManager::sharedStateA;
    gjaccountmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GJAccountManager::sharedStateA, GJAccountManager::sharedStateH, (LPVOID*)&GJAccountManager::sharedStateO_);

    auto gjaccountsyncdelegate = pybind::class_<GJAccountSyncDelegate>(m, "GJAccountSyncDelegate");
    auto triggereffectdelegate = pybind::class_<TriggerEffectDelegate>(m, "TriggerEffectDelegate");
    auto gjbasegamelayer = pybind::class_<GJBaseGameLayer, cocos2d::CCLayer>(m, "GJBaseGameLayer");
    gjbasegamelayer.def("objectsCollided", pybind::overload_cast<GJBaseGameLayer*, int, int>(&GJBaseGameLayer::objectsCollided));
    gjbasegamelayer.def("objectsCollided", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::objectsCollided));
    gjbasegamelayer.def("objectsCollidedO", [](GJBaseGameLayer* self, int p0, int p1) { return GJBaseGameLayer::objectsCollidedO(self, p0, p1); });
    gjbasegamelayer.attr("objectsCollidedA") = GJBaseGameLayer::objectsCollidedA;
    gjbasegamelayer.attr("objectsCollidedN") = "objectsCollided";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::objectsCollidedA, GJBaseGameLayer::objectsCollidedH, (LPVOID*)&GJBaseGameLayer::objectsCollidedO_);

    gjbasegamelayer.def("createMoveCommand", pybind::overload_cast<GJBaseGameLayer*, cocos2d::CCPoint, int, float, int, float, bool, bool, int>(&GJBaseGameLayer::createMoveCommand));
    gjbasegamelayer.def("createMoveCommand", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::createMoveCommand));
    gjbasegamelayer.def("createMoveCommandO", [](GJBaseGameLayer* self, cocos2d::CCPoint p0, int p1, float p2, int p3, float p4, bool p5, bool p6, int p7) { return GJBaseGameLayer::createMoveCommandO(self, p0, p1, p2, p3, p4, p5, p6, p7); });
    gjbasegamelayer.attr("createMoveCommandA") = GJBaseGameLayer::createMoveCommandA;
    gjbasegamelayer.attr("createMoveCommandN") = "createMoveCommand";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::createMoveCommandA, GJBaseGameLayer::createMoveCommandH, (LPVOID*)&GJBaseGameLayer::createMoveCommandO_);

    gjbasegamelayer.def("updateColor", pybind::overload_cast<GJBaseGameLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*>(&GJBaseGameLayer::updateColor));
    gjbasegamelayer.def("updateColor", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateColor));
    gjbasegamelayer.def("updateColorO", [](GJBaseGameLayer* self, cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) { return GJBaseGameLayer::updateColorO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    gjbasegamelayer.attr("updateColorA") = GJBaseGameLayer::updateColorA;
    gjbasegamelayer.attr("updateColorN") = "updateColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateColorA, GJBaseGameLayer::updateColorH, (LPVOID*)&GJBaseGameLayer::updateColorO_);

    gjbasegamelayer.def("calculateColorValues", pybind::overload_cast<GJBaseGameLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*>(&GJBaseGameLayer::calculateColorValues));
    gjbasegamelayer.def("calculateColorValues", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::calculateColorValues));
    gjbasegamelayer.def("calculateColorValuesO", [](GJBaseGameLayer* self, EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) { return GJBaseGameLayer::calculateColorValuesO(self, p0, p1, p2, p3, p4, p5); });
    gjbasegamelayer.attr("calculateColorValuesA") = GJBaseGameLayer::calculateColorValuesA;
    gjbasegamelayer.attr("calculateColorValuesN") = "calculateColorValues";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::calculateColorValuesA, GJBaseGameLayer::calculateColorValuesH, (LPVOID*)&GJBaseGameLayer::calculateColorValuesO_);

    gjbasegamelayer.def("toggleGroupTriggered", pybind::overload_cast<GJBaseGameLayer*, int, bool>(&GJBaseGameLayer::toggleGroupTriggered));
    gjbasegamelayer.def("toggleGroupTriggered", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::toggleGroupTriggered));
    gjbasegamelayer.def("toggleGroupTriggeredO", [](GJBaseGameLayer* self, int p0, bool p1) { return GJBaseGameLayer::toggleGroupTriggeredO(self, p0, p1); });
    gjbasegamelayer.attr("toggleGroupTriggeredA") = GJBaseGameLayer::toggleGroupTriggeredA;
    gjbasegamelayer.attr("toggleGroupTriggeredN") = "toggleGroupTriggered";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::toggleGroupTriggeredA, GJBaseGameLayer::toggleGroupTriggeredH, (LPVOID*)&GJBaseGameLayer::toggleGroupTriggeredO_);

    gjbasegamelayer.def("spawnGroup", pybind::overload_cast<GJBaseGameLayer*, int>(&GJBaseGameLayer::spawnGroup));
    gjbasegamelayer.def("spawnGroup", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::spawnGroup));
    gjbasegamelayer.def("spawnGroupO", [](GJBaseGameLayer* self, int p0) { return GJBaseGameLayer::spawnGroupO(self, p0); });
    gjbasegamelayer.attr("spawnGroupA") = GJBaseGameLayer::spawnGroupA;
    gjbasegamelayer.attr("spawnGroupN") = "spawnGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::spawnGroupA, GJBaseGameLayer::spawnGroupH, (LPVOID*)&GJBaseGameLayer::spawnGroupO_);

    gjbasegamelayer.def("addToSection", pybind::overload_cast<GJBaseGameLayer*, GameObject*>(&GJBaseGameLayer::addToSection));
    gjbasegamelayer.def("addToSection", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::addToSection));
    gjbasegamelayer.def("addToSectionO", [](GJBaseGameLayer* self, GameObject* p0) { return GJBaseGameLayer::addToSectionO(self, p0); });
    gjbasegamelayer.attr("addToSectionA") = GJBaseGameLayer::addToSectionA;
    gjbasegamelayer.attr("addToSectionN") = "addToSection";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::addToSectionA, GJBaseGameLayer::addToSectionH, (LPVOID*)&GJBaseGameLayer::addToSectionO_);

    gjbasegamelayer.def("addToGroup", pybind::overload_cast<GJBaseGameLayer*, GameObject*, int, bool>(&GJBaseGameLayer::addToGroup));
    gjbasegamelayer.def("addToGroup", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::addToGroup));
    gjbasegamelayer.def("addToGroupO", [](GJBaseGameLayer* self, GameObject* p0, int p1, bool p2) { return GJBaseGameLayer::addToGroupO(self, p0, p1, p2); });
    gjbasegamelayer.attr("addToGroupA") = GJBaseGameLayer::addToGroupA;
    gjbasegamelayer.attr("addToGroupN") = "addToGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::addToGroupA, GJBaseGameLayer::addToGroupH, (LPVOID*)&GJBaseGameLayer::addToGroupO_);

    gjbasegamelayer.def("removeFromGroup", pybind::overload_cast<GJBaseGameLayer*, GameObject*, int>(&GJBaseGameLayer::removeFromGroup));
    gjbasegamelayer.def("removeFromGroup", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::removeFromGroup));
    gjbasegamelayer.def("removeFromGroupO", [](GJBaseGameLayer* self, GameObject* p0, int p1) { return GJBaseGameLayer::removeFromGroupO(self, p0, p1); });
    gjbasegamelayer.attr("removeFromGroupA") = GJBaseGameLayer::removeFromGroupA;
    gjbasegamelayer.attr("removeFromGroupN") = "removeFromGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::removeFromGroupA, GJBaseGameLayer::removeFromGroupH, (LPVOID*)&GJBaseGameLayer::removeFromGroupO_);

    gjbasegamelayer.def("init", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::init));
    gjbasegamelayer.def("init", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::init));
    gjbasegamelayer.def("initO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::initO(self); });
    gjbasegamelayer.attr("initA") = GJBaseGameLayer::initA;
    gjbasegamelayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::initA, GJBaseGameLayer::initH, (LPVOID*)&GJBaseGameLayer::initO_);

    gjbasegamelayer.def("addToGroups", pybind::overload_cast<GJBaseGameLayer*, GameObject*, bool>(&GJBaseGameLayer::addToGroups));
    gjbasegamelayer.def("addToGroups", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::addToGroups));
    gjbasegamelayer.def("addToGroupsO", [](GJBaseGameLayer* self, GameObject* p0, bool p1) { return GJBaseGameLayer::addToGroupsO(self, p0, p1); });
    gjbasegamelayer.attr("addToGroupsA") = GJBaseGameLayer::addToGroupsA;
    gjbasegamelayer.attr("addToGroupsN") = "addToGroups";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::addToGroupsA, GJBaseGameLayer::addToGroupsH, (LPVOID*)&GJBaseGameLayer::addToGroupsO_);

    gjbasegamelayer.def("bumpPlayer", pybind::overload_cast<GJBaseGameLayer*, PlayerObject*, GameObject*>(&GJBaseGameLayer::bumpPlayer));
    gjbasegamelayer.def("bumpPlayer", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::bumpPlayer));
    gjbasegamelayer.def("bumpPlayerO", [](GJBaseGameLayer* self, PlayerObject* p0, GameObject* p1) { return GJBaseGameLayer::bumpPlayerO(self, p0, p1); });
    gjbasegamelayer.attr("bumpPlayerA") = GJBaseGameLayer::bumpPlayerA;
    gjbasegamelayer.attr("bumpPlayerN") = "bumpPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::bumpPlayerA, GJBaseGameLayer::bumpPlayerH, (LPVOID*)&GJBaseGameLayer::bumpPlayerO_);

    gjbasegamelayer.def("checkSpawnObjects", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::checkSpawnObjects));
    gjbasegamelayer.def("checkSpawnObjects", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::checkSpawnObjects));
    gjbasegamelayer.def("checkSpawnObjectsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::checkSpawnObjectsO(self); });
    gjbasegamelayer.attr("checkSpawnObjectsA") = GJBaseGameLayer::checkSpawnObjectsA;
    gjbasegamelayer.attr("checkSpawnObjectsN") = "checkSpawnObjects";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::checkSpawnObjectsA, GJBaseGameLayer::checkSpawnObjectsH, (LPVOID*)&GJBaseGameLayer::checkSpawnObjectsO_);

    gjbasegamelayer.def("collectItem", pybind::overload_cast<GJBaseGameLayer*, int, int>(&GJBaseGameLayer::collectItem));
    gjbasegamelayer.def("collectItem", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::collectItem));
    gjbasegamelayer.def("collectItemO", [](GJBaseGameLayer* self, int p0, int p1) { return GJBaseGameLayer::collectItemO(self, p0, p1); });
    gjbasegamelayer.attr("collectItemA") = GJBaseGameLayer::collectItemA;
    gjbasegamelayer.attr("collectItemN") = "collectItem";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::collectItemA, GJBaseGameLayer::collectItemH, (LPVOID*)&GJBaseGameLayer::collectItemO_);

    gjbasegamelayer.def("collectedObject", pybind::overload_cast<GJBaseGameLayer*, EffectGameObject*>(&GJBaseGameLayer::collectedObject));
    gjbasegamelayer.def("collectedObject", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::collectedObject));
    gjbasegamelayer.def("collectedObjectO", [](GJBaseGameLayer* self, EffectGameObject* p0) { return GJBaseGameLayer::collectedObjectO(self, p0); });
    gjbasegamelayer.attr("collectedObjectA") = GJBaseGameLayer::collectedObjectA;
    gjbasegamelayer.attr("collectedObjectN") = "collectedObject";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::collectedObjectA, GJBaseGameLayer::collectedObjectH, (LPVOID*)&GJBaseGameLayer::collectedObjectO_);

    gjbasegamelayer.def("createTextLayers", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::createTextLayers));
    gjbasegamelayer.def("createTextLayers", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::createTextLayers));
    gjbasegamelayer.def("createTextLayersO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::createTextLayersO(self); });
    gjbasegamelayer.attr("createTextLayersA") = GJBaseGameLayer::createTextLayersA;
    gjbasegamelayer.attr("createTextLayersN") = "createTextLayers";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::createTextLayersA, GJBaseGameLayer::createTextLayersH, (LPVOID*)&GJBaseGameLayer::createTextLayersO_);

    gjbasegamelayer.def("damagingObjectsInRect", pybind::overload_cast<GJBaseGameLayer*, cocos2d::CCRect>(&GJBaseGameLayer::damagingObjectsInRect));
    gjbasegamelayer.def("damagingObjectsInRect", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::damagingObjectsInRect));
    gjbasegamelayer.def("damagingObjectsInRectO", [](GJBaseGameLayer* self, cocos2d::CCRect p0) { return GJBaseGameLayer::damagingObjectsInRectO(self, p0); });
    gjbasegamelayer.attr("damagingObjectsInRectA") = GJBaseGameLayer::damagingObjectsInRectA;
    gjbasegamelayer.attr("damagingObjectsInRectN") = "damagingObjectsInRect";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::damagingObjectsInRectA, GJBaseGameLayer::damagingObjectsInRectH, (LPVOID*)&GJBaseGameLayer::damagingObjectsInRectO_);

    gjbasegamelayer.def("enableHighCapacityMode", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::enableHighCapacityMode));
    gjbasegamelayer.def("enableHighCapacityMode", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::enableHighCapacityMode));
    gjbasegamelayer.def("enableHighCapacityModeO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::enableHighCapacityModeO(self); });
    gjbasegamelayer.attr("enableHighCapacityModeA") = GJBaseGameLayer::enableHighCapacityModeA;
    gjbasegamelayer.attr("enableHighCapacityModeN") = "enableHighCapacityMode";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::enableHighCapacityModeA, GJBaseGameLayer::enableHighCapacityModeH, (LPVOID*)&GJBaseGameLayer::enableHighCapacityModeO_);

    gjbasegamelayer.def("getCapacityString", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::getCapacityString));
    gjbasegamelayer.def("getCapacityString", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::getCapacityString));
    gjbasegamelayer.def("getCapacityStringO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::getCapacityStringO(self); });
    gjbasegamelayer.attr("getCapacityStringA") = GJBaseGameLayer::getCapacityStringA;
    gjbasegamelayer.attr("getCapacityStringN") = "getCapacityString";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::getCapacityStringA, GJBaseGameLayer::getCapacityStringH, (LPVOID*)&GJBaseGameLayer::getCapacityStringO_);

    gjbasegamelayer.def("getGroup", pybind::overload_cast<GJBaseGameLayer*, int>(&GJBaseGameLayer::getGroup));
    gjbasegamelayer.def("getGroup", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::getGroup));
    gjbasegamelayer.def("getGroupO", [](GJBaseGameLayer* self, int p0) { return GJBaseGameLayer::getGroupO(self, p0); });
    gjbasegamelayer.attr("getGroupA") = GJBaseGameLayer::getGroupA;
    gjbasegamelayer.attr("getGroupN") = "getGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::getGroupA, GJBaseGameLayer::getGroupH, (LPVOID*)&GJBaseGameLayer::getGroupO_);

    gjbasegamelayer.def("loadUpToPosition", pybind::overload_cast<GJBaseGameLayer*, float>(&GJBaseGameLayer::loadUpToPosition));
    gjbasegamelayer.def("loadUpToPosition", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::loadUpToPosition));
    gjbasegamelayer.def("loadUpToPositionO", [](GJBaseGameLayer* self, float p0) { return GJBaseGameLayer::loadUpToPositionO(self, p0); });
    gjbasegamelayer.attr("loadUpToPositionA") = GJBaseGameLayer::loadUpToPositionA;
    gjbasegamelayer.attr("loadUpToPositionN") = "loadUpToPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::loadUpToPositionA, GJBaseGameLayer::loadUpToPositionH, (LPVOID*)&GJBaseGameLayer::loadUpToPositionO_);

    gjbasegamelayer.def("objectIntersectsCircle", pybind::overload_cast<GJBaseGameLayer*, GameObject*, GameObject*>(&GJBaseGameLayer::objectIntersectsCircle));
    gjbasegamelayer.def("objectIntersectsCircle", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::objectIntersectsCircle));
    gjbasegamelayer.def("objectIntersectsCircleO", [](GJBaseGameLayer* self, GameObject* p0, GameObject* p1) { return GJBaseGameLayer::objectIntersectsCircleO(self, p0, p1); });
    gjbasegamelayer.attr("objectIntersectsCircleA") = GJBaseGameLayer::objectIntersectsCircleA;
    gjbasegamelayer.attr("objectIntersectsCircleN") = "objectIntersectsCircle";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::objectIntersectsCircleA, GJBaseGameLayer::objectIntersectsCircleH, (LPVOID*)&GJBaseGameLayer::objectIntersectsCircleO_);

    gjbasegamelayer.def("optimizeMoveGroups", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::optimizeMoveGroups));
    gjbasegamelayer.def("optimizeMoveGroups", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::optimizeMoveGroups));
    gjbasegamelayer.def("optimizeMoveGroupsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::optimizeMoveGroupsO(self); });
    gjbasegamelayer.attr("optimizeMoveGroupsA") = GJBaseGameLayer::optimizeMoveGroupsA;
    gjbasegamelayer.attr("optimizeMoveGroupsN") = "optimizeMoveGroups";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::optimizeMoveGroupsA, GJBaseGameLayer::optimizeMoveGroupsH, (LPVOID*)&GJBaseGameLayer::optimizeMoveGroupsO_);

    gjbasegamelayer.def("parentForZLayer", pybind::overload_cast<GJBaseGameLayer*, int, bool, int>(&GJBaseGameLayer::parentForZLayer));
    gjbasegamelayer.def("parentForZLayer", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::parentForZLayer));
    gjbasegamelayer.def("parentForZLayerO", [](GJBaseGameLayer* self, int p0, bool p1, int p2) { return GJBaseGameLayer::parentForZLayerO(self, p0, p1, p2); });
    gjbasegamelayer.attr("parentForZLayerA") = GJBaseGameLayer::parentForZLayerA;
    gjbasegamelayer.attr("parentForZLayerN") = "parentForZLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::parentForZLayerA, GJBaseGameLayer::parentForZLayerH, (LPVOID*)&GJBaseGameLayer::parentForZLayerO_);

    gjbasegamelayer.def("processFollowActions", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::processFollowActions));
    gjbasegamelayer.def("processFollowActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processFollowActions));
    gjbasegamelayer.def("processFollowActionsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::processFollowActionsO(self); });
    gjbasegamelayer.attr("processFollowActionsA") = GJBaseGameLayer::processFollowActionsA;
    gjbasegamelayer.attr("processFollowActionsN") = "processFollowActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processFollowActionsA, GJBaseGameLayer::processFollowActionsH, (LPVOID*)&GJBaseGameLayer::processFollowActionsO_);

    gjbasegamelayer.def("processMoveActions", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::processMoveActions));
    gjbasegamelayer.def("processMoveActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processMoveActions));
    gjbasegamelayer.def("processMoveActionsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::processMoveActionsO(self); });
    gjbasegamelayer.attr("processMoveActionsA") = GJBaseGameLayer::processMoveActionsA;
    gjbasegamelayer.attr("processMoveActionsN") = "processMoveActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processMoveActionsA, GJBaseGameLayer::processMoveActionsH, (LPVOID*)&GJBaseGameLayer::processMoveActionsO_);

    gjbasegamelayer.def("processMoveActionsStep", pybind::overload_cast<GJBaseGameLayer*, float>(&GJBaseGameLayer::processMoveActionsStep));
    gjbasegamelayer.def("processMoveActionsStep", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processMoveActionsStep));
    gjbasegamelayer.def("processMoveActionsStepO", [](GJBaseGameLayer* self, float p0) { return GJBaseGameLayer::processMoveActionsStepO(self, p0); });
    gjbasegamelayer.attr("processMoveActionsStepA") = GJBaseGameLayer::processMoveActionsStepA;
    gjbasegamelayer.attr("processMoveActionsStepN") = "processMoveActionsStep";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processMoveActionsStepA, GJBaseGameLayer::processMoveActionsStepH, (LPVOID*)&GJBaseGameLayer::processMoveActionsStepO_);

    gjbasegamelayer.def("processPlayerFollowActions", pybind::overload_cast<GJBaseGameLayer*, float>(&GJBaseGameLayer::processPlayerFollowActions));
    gjbasegamelayer.def("processPlayerFollowActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processPlayerFollowActions));
    gjbasegamelayer.def("processPlayerFollowActionsO", [](GJBaseGameLayer* self, float p0) { return GJBaseGameLayer::processPlayerFollowActionsO(self, p0); });
    gjbasegamelayer.attr("processPlayerFollowActionsA") = GJBaseGameLayer::processPlayerFollowActionsA;
    gjbasegamelayer.attr("processPlayerFollowActionsN") = "processPlayerFollowActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processPlayerFollowActionsA, GJBaseGameLayer::processPlayerFollowActionsH, (LPVOID*)&GJBaseGameLayer::processPlayerFollowActionsO_);

    gjbasegamelayer.def("processRotationActions", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::processRotationActions));
    gjbasegamelayer.def("processRotationActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processRotationActions));
    gjbasegamelayer.def("processRotationActionsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::processRotationActionsO(self); });
    gjbasegamelayer.attr("processRotationActionsA") = GJBaseGameLayer::processRotationActionsA;
    gjbasegamelayer.attr("processRotationActionsN") = "processRotationActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processRotationActionsA, GJBaseGameLayer::processRotationActionsH, (LPVOID*)&GJBaseGameLayer::processRotationActionsO_);

    gjbasegamelayer.def("pushButton", pybind::overload_cast<GJBaseGameLayer*, int, bool>(&GJBaseGameLayer::pushButton));
    gjbasegamelayer.def("pushButton", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::pushButton));
    gjbasegamelayer.def("pushButtonO", [](GJBaseGameLayer* self, int p0, bool p1) { return GJBaseGameLayer::pushButtonO(self, p0, p1); });
    gjbasegamelayer.attr("pushButtonA") = GJBaseGameLayer::pushButtonA;
    gjbasegamelayer.attr("pushButtonN") = "pushButton";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::pushButtonA, GJBaseGameLayer::pushButtonH, (LPVOID*)&GJBaseGameLayer::pushButtonO_);

    gjbasegamelayer.def("rectIntersectsCircle", pybind::overload_cast<GJBaseGameLayer*, cocos2d::CCRect, cocos2d::CCPoint, float>(&GJBaseGameLayer::rectIntersectsCircle));
    gjbasegamelayer.def("rectIntersectsCircle", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::rectIntersectsCircle));
    gjbasegamelayer.def("rectIntersectsCircleO", [](GJBaseGameLayer* self, cocos2d::CCRect p0, cocos2d::CCPoint p1, float p2) { return GJBaseGameLayer::rectIntersectsCircleO(self, p0, p1, p2); });
    gjbasegamelayer.attr("rectIntersectsCircleA") = GJBaseGameLayer::rectIntersectsCircleA;
    gjbasegamelayer.attr("rectIntersectsCircleN") = "rectIntersectsCircle";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::rectIntersectsCircleA, GJBaseGameLayer::rectIntersectsCircleH, (LPVOID*)&GJBaseGameLayer::rectIntersectsCircleO_);

    gjbasegamelayer.def("refreshCounterLabels", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::refreshCounterLabels));
    gjbasegamelayer.def("refreshCounterLabels", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::refreshCounterLabels));
    gjbasegamelayer.def("refreshCounterLabelsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::refreshCounterLabelsO(self); });
    gjbasegamelayer.attr("refreshCounterLabelsA") = GJBaseGameLayer::refreshCounterLabelsA;
    gjbasegamelayer.attr("refreshCounterLabelsN") = "refreshCounterLabels";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::refreshCounterLabelsA, GJBaseGameLayer::refreshCounterLabelsH, (LPVOID*)&GJBaseGameLayer::refreshCounterLabelsO_);

    gjbasegamelayer.def("releaseButton", pybind::overload_cast<GJBaseGameLayer*, int, bool>(&GJBaseGameLayer::releaseButton));
    gjbasegamelayer.def("releaseButton", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::releaseButton));
    gjbasegamelayer.def("releaseButtonO", [](GJBaseGameLayer* self, int p0, bool p1) { return GJBaseGameLayer::releaseButtonO(self, p0, p1); });
    gjbasegamelayer.attr("releaseButtonA") = GJBaseGameLayer::releaseButtonA;
    gjbasegamelayer.attr("releaseButtonN") = "releaseButton";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::releaseButtonA, GJBaseGameLayer::releaseButtonH, (LPVOID*)&GJBaseGameLayer::releaseButtonO_);

    gjbasegamelayer.def("removeFromGroups", pybind::overload_cast<GJBaseGameLayer*, GameObject*>(&GJBaseGameLayer::removeFromGroups));
    gjbasegamelayer.def("removeFromGroups", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::removeFromGroups));
    gjbasegamelayer.def("removeFromGroupsO", [](GJBaseGameLayer* self, GameObject* p0) { return GJBaseGameLayer::removeFromGroupsO(self, p0); });
    gjbasegamelayer.attr("removeFromGroupsA") = GJBaseGameLayer::removeFromGroupsA;
    gjbasegamelayer.attr("removeFromGroupsN") = "removeFromGroups";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::removeFromGroupsA, GJBaseGameLayer::removeFromGroupsH, (LPVOID*)&GJBaseGameLayer::removeFromGroupsO_);

    gjbasegamelayer.def("removeObjectFromSection", pybind::overload_cast<GJBaseGameLayer*, GameObject*>(&GJBaseGameLayer::removeObjectFromSection));
    gjbasegamelayer.def("removeObjectFromSection", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::removeObjectFromSection));
    gjbasegamelayer.def("removeObjectFromSectionO", [](GJBaseGameLayer* self, GameObject* p0) { return GJBaseGameLayer::removeObjectFromSectionO(self, p0); });
    gjbasegamelayer.attr("removeObjectFromSectionA") = GJBaseGameLayer::removeObjectFromSectionA;
    gjbasegamelayer.attr("removeObjectFromSectionN") = "removeObjectFromSection";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::removeObjectFromSectionA, GJBaseGameLayer::removeObjectFromSectionH, (LPVOID*)&GJBaseGameLayer::removeObjectFromSectionO_);

    gjbasegamelayer.def("reorderObjectSection", pybind::overload_cast<GJBaseGameLayer*, GameObject*>(&GJBaseGameLayer::reorderObjectSection));
    gjbasegamelayer.def("reorderObjectSection", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::reorderObjectSection));
    gjbasegamelayer.def("reorderObjectSectionO", [](GJBaseGameLayer* self, GameObject* p0) { return GJBaseGameLayer::reorderObjectSectionO(self, p0); });
    gjbasegamelayer.attr("reorderObjectSectionA") = GJBaseGameLayer::reorderObjectSectionA;
    gjbasegamelayer.attr("reorderObjectSectionN") = "reorderObjectSection";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::reorderObjectSectionA, GJBaseGameLayer::reorderObjectSectionH, (LPVOID*)&GJBaseGameLayer::reorderObjectSectionO_);

    gjbasegamelayer.def("resetGroupCounters", pybind::overload_cast<GJBaseGameLayer*, bool>(&GJBaseGameLayer::resetGroupCounters));
    gjbasegamelayer.def("resetGroupCounters", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::resetGroupCounters));
    gjbasegamelayer.def("resetGroupCountersO", [](GJBaseGameLayer* self, bool p0) { return GJBaseGameLayer::resetGroupCountersO(self, p0); });
    gjbasegamelayer.attr("resetGroupCountersA") = GJBaseGameLayer::resetGroupCountersA;
    gjbasegamelayer.attr("resetGroupCountersN") = "resetGroupCounters";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::resetGroupCountersA, GJBaseGameLayer::resetGroupCountersH, (LPVOID*)&GJBaseGameLayer::resetGroupCountersO_);

    gjbasegamelayer.def("setupLayers", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::setupLayers));
    gjbasegamelayer.def("setupLayers", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::setupLayers));
    gjbasegamelayer.def("setupLayersO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::setupLayersO(self); });
    gjbasegamelayer.attr("setupLayersA") = GJBaseGameLayer::setupLayersA;
    gjbasegamelayer.attr("setupLayersN") = "setupLayers";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::setupLayersA, GJBaseGameLayer::setupLayersH, (LPVOID*)&GJBaseGameLayer::setupLayersO_);

    gjbasegamelayer.def("shouldExitHackedLevel", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::shouldExitHackedLevel));
    gjbasegamelayer.def("shouldExitHackedLevel", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::shouldExitHackedLevel));
    gjbasegamelayer.def("shouldExitHackedLevelO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::shouldExitHackedLevelO(self); });
    gjbasegamelayer.attr("shouldExitHackedLevelA") = GJBaseGameLayer::shouldExitHackedLevelA;
    gjbasegamelayer.attr("shouldExitHackedLevelN") = "shouldExitHackedLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::shouldExitHackedLevelA, GJBaseGameLayer::shouldExitHackedLevelH, (LPVOID*)&GJBaseGameLayer::shouldExitHackedLevelO_);

    gjbasegamelayer.def("toggleGroup", pybind::overload_cast<GJBaseGameLayer*, int, bool>(&GJBaseGameLayer::toggleGroup));
    gjbasegamelayer.def("toggleGroup", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::toggleGroup));
    gjbasegamelayer.def("toggleGroupO", [](GJBaseGameLayer* self, int p0, bool p1) { return GJBaseGameLayer::toggleGroupO(self, p0, p1); });
    gjbasegamelayer.attr("toggleGroupA") = GJBaseGameLayer::toggleGroupA;
    gjbasegamelayer.attr("toggleGroupN") = "toggleGroup";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::toggleGroupA, GJBaseGameLayer::toggleGroupH, (LPVOID*)&GJBaseGameLayer::toggleGroupO_);

    gjbasegamelayer.def("togglePlayerVisibility", pybind::overload_cast<GJBaseGameLayer*, bool>(&GJBaseGameLayer::togglePlayerVisibility));
    gjbasegamelayer.def("togglePlayerVisibility", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::togglePlayerVisibility));
    gjbasegamelayer.def("togglePlayerVisibilityO", [](GJBaseGameLayer* self, bool p0) { return GJBaseGameLayer::togglePlayerVisibilityO(self, p0); });
    gjbasegamelayer.attr("togglePlayerVisibilityA") = GJBaseGameLayer::togglePlayerVisibilityA;
    gjbasegamelayer.attr("togglePlayerVisibilityN") = "togglePlayerVisibility";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::togglePlayerVisibilityA, GJBaseGameLayer::togglePlayerVisibilityH, (LPVOID*)&GJBaseGameLayer::togglePlayerVisibilityO_);

    gjbasegamelayer.def("updateCollisionBlocks", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::updateCollisionBlocks));
    gjbasegamelayer.def("updateCollisionBlocks", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateCollisionBlocks));
    gjbasegamelayer.def("updateCollisionBlocksO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::updateCollisionBlocksO(self); });
    gjbasegamelayer.attr("updateCollisionBlocksA") = GJBaseGameLayer::updateCollisionBlocksA;
    gjbasegamelayer.attr("updateCollisionBlocksN") = "updateCollisionBlocks";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateCollisionBlocksA, GJBaseGameLayer::updateCollisionBlocksH, (LPVOID*)&GJBaseGameLayer::updateCollisionBlocksO_);

    gjbasegamelayer.def("updateCounters", pybind::overload_cast<GJBaseGameLayer*, int, int>(&GJBaseGameLayer::updateCounters));
    gjbasegamelayer.def("updateCounters", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateCounters));
    gjbasegamelayer.def("updateCountersO", [](GJBaseGameLayer* self, int p0, int p1) { return GJBaseGameLayer::updateCountersO(self, p0, p1); });
    gjbasegamelayer.attr("updateCountersA") = GJBaseGameLayer::updateCountersA;
    gjbasegamelayer.attr("updateCountersN") = "updateCounters";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateCountersA, GJBaseGameLayer::updateCountersH, (LPVOID*)&GJBaseGameLayer::updateCountersO_);

    gjbasegamelayer.def("updateDisabledObjectsLastPos", pybind::overload_cast<GJBaseGameLayer*, cocos2d::CCArray*>(&GJBaseGameLayer::updateDisabledObjectsLastPos));
    gjbasegamelayer.def("updateDisabledObjectsLastPos", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateDisabledObjectsLastPos));
    gjbasegamelayer.def("updateDisabledObjectsLastPosO", [](GJBaseGameLayer* self, cocos2d::CCArray* p0) { return GJBaseGameLayer::updateDisabledObjectsLastPosO(self, p0); });
    gjbasegamelayer.attr("updateDisabledObjectsLastPosA") = GJBaseGameLayer::updateDisabledObjectsLastPosA;
    gjbasegamelayer.attr("updateDisabledObjectsLastPosN") = "updateDisabledObjectsLastPos";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateDisabledObjectsLastPosA, GJBaseGameLayer::updateDisabledObjectsLastPosH, (LPVOID*)&GJBaseGameLayer::updateDisabledObjectsLastPosO_);

    gjbasegamelayer.def("updateLayerCapacity", pybind::overload_cast<GJBaseGameLayer*, gd::string>(&GJBaseGameLayer::updateLayerCapacity));
    gjbasegamelayer.def("updateLayerCapacity", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateLayerCapacity));
    gjbasegamelayer.def("updateLayerCapacityO", [](GJBaseGameLayer* self, gd::string p0) { return GJBaseGameLayer::updateLayerCapacityO(self, p0); });
    gjbasegamelayer.attr("updateLayerCapacityA") = GJBaseGameLayer::updateLayerCapacityA;
    gjbasegamelayer.attr("updateLayerCapacityN") = "updateLayerCapacity";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateLayerCapacityA, GJBaseGameLayer::updateLayerCapacityH, (LPVOID*)&GJBaseGameLayer::updateLayerCapacityO_);

    gjbasegamelayer.def("updateLegacyLayerCapacity", pybind::overload_cast<GJBaseGameLayer*, int, int, int, int>(&GJBaseGameLayer::updateLegacyLayerCapacity));
    gjbasegamelayer.def("updateLegacyLayerCapacity", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateLegacyLayerCapacity));
    gjbasegamelayer.def("updateLegacyLayerCapacityO", [](GJBaseGameLayer* self, int p0, int p1, int p2, int p3) { return GJBaseGameLayer::updateLegacyLayerCapacityO(self, p0, p1, p2, p3); });
    gjbasegamelayer.attr("updateLegacyLayerCapacityA") = GJBaseGameLayer::updateLegacyLayerCapacityA;
    gjbasegamelayer.attr("updateLegacyLayerCapacityN") = "updateLegacyLayerCapacity";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateLegacyLayerCapacityA, GJBaseGameLayer::updateLegacyLayerCapacityH, (LPVOID*)&GJBaseGameLayer::updateLegacyLayerCapacityO_);

    gjbasegamelayer.def("updateQueuedLabels", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::updateQueuedLabels));
    gjbasegamelayer.def("updateQueuedLabels", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::updateQueuedLabels));
    gjbasegamelayer.def("updateQueuedLabelsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::updateQueuedLabelsO(self); });
    gjbasegamelayer.attr("updateQueuedLabelsA") = GJBaseGameLayer::updateQueuedLabelsA;
    gjbasegamelayer.attr("updateQueuedLabelsN") = "updateQueuedLabels";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::updateQueuedLabelsA, GJBaseGameLayer::updateQueuedLabelsH, (LPVOID*)&GJBaseGameLayer::updateQueuedLabelsO_);

    auto gjchallengedelegate = pybind::class_<GJChallengeDelegate>(m, "GJChallengeDelegate");
    auto gjchallengeitem = pybind::class_<GJChallengeItem, cocos2d::CCObject>(m, "GJChallengeItem");
    auto gjcolorsetuplayer = pybind::class_<GJColorSetupLayer>(m, "GJColorSetupLayer");
    auto gjcomment = pybind::class_<GJComment, cocos2d::CCNode>(m, "GJComment");
    gjcomment.def("init", pybind::overload_cast<GJComment*>(&GJComment::init));
    gjcomment.def("init", pybind::overload_cast<pybind::function>(&GJComment::init));
    gjcomment.def("initO", [](GJComment* self) { return GJComment::initO(self); });
    gjcomment.attr("initA") = GJComment::initA;
    gjcomment.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJComment::initA, GJComment::initH, (LPVOID*)&GJComment::initO_);

    gjcomment.def("create", pybind::overload_cast<cocos2d::CCDictionary*>(&GJComment::create));
    gjcomment.def("create", pybind::overload_cast<pybind::function>(&GJComment::create));
    gjcomment.def("createO", [](cocos2d::CCDictionary* dict) { return GJComment::createO(dict); });
    gjcomment.attr("createA") = GJComment::createA;
    gjcomment.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJComment::createA, GJComment::createH, (LPVOID*)&GJComment::createO_);

    auto gjcommentlistlayer = pybind::class_<GJCommentListLayer, cocos2d::CCLayerColor>(m, "GJCommentListLayer");
    gjcommentlistlayer.def("create", pybind::overload_cast<BoomListView*, char const*, cocos2d::_ccColor4B, float, float, bool>(&GJCommentListLayer::create));
    gjcommentlistlayer.def("create", pybind::overload_cast<pybind::function>(&GJCommentListLayer::create));
    gjcommentlistlayer.def("createO", [](BoomListView* p0, char const* p1, cocos2d::_ccColor4B p2, float p3, float p4, bool p5) { return GJCommentListLayer::createO(p0, p1, p2, p3, p4, p5); });
    gjcommentlistlayer.attr("createA") = GJCommentListLayer::createA;
    gjcommentlistlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJCommentListLayer::createA, GJCommentListLayer::createH, (LPVOID*)&GJCommentListLayer::createO_);

    auto gjeffectmanager = pybind::class_<GJEffectManager, cocos2d::CCNode>(m, "GJEffectManager");
    gjeffectmanager.def("init", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::init));
    gjeffectmanager.def("init", pybind::overload_cast<pybind::function>(&GJEffectManager::init));
    gjeffectmanager.def("initO", [](GJEffectManager* self) { return GJEffectManager::initO(self); });
    gjeffectmanager.attr("initA") = GJEffectManager::initA;
    gjeffectmanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::initA, GJEffectManager::initH, (LPVOID*)&GJEffectManager::initO_);

    gjeffectmanager.def("activeColorForIndex", pybind::overload_cast<GJEffectManager*, int>(&GJEffectManager::activeColorForIndex));
    gjeffectmanager.def("activeColorForIndex", pybind::overload_cast<pybind::function>(&GJEffectManager::activeColorForIndex));
    gjeffectmanager.def("activeColorForIndexO", [](GJEffectManager* self, int p0) { return GJEffectManager::activeColorForIndexO(self, p0); });
    gjeffectmanager.attr("activeColorForIndexA") = GJEffectManager::activeColorForIndexA;
    gjeffectmanager.attr("activeColorForIndexN") = "activeColorForIndex";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::activeColorForIndexA, GJEffectManager::activeColorForIndexH, (LPVOID*)&GJEffectManager::activeColorForIndexO_);

    gjeffectmanager.def("calculateBaseActiveColors", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::calculateBaseActiveColors));
    gjeffectmanager.def("calculateBaseActiveColors", pybind::overload_cast<pybind::function>(&GJEffectManager::calculateBaseActiveColors));
    gjeffectmanager.def("calculateBaseActiveColorsO", [](GJEffectManager* self) { return GJEffectManager::calculateBaseActiveColorsO(self); });
    gjeffectmanager.attr("calculateBaseActiveColorsA") = GJEffectManager::calculateBaseActiveColorsA;
    gjeffectmanager.attr("calculateBaseActiveColorsN") = "calculateBaseActiveColors";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::calculateBaseActiveColorsA, GJEffectManager::calculateBaseActiveColorsH, (LPVOID*)&GJEffectManager::calculateBaseActiveColorsO_);

    gjeffectmanager.def("calculateInheritedColor", pybind::overload_cast<GJEffectManager*, int, ColorAction*>(&GJEffectManager::calculateInheritedColor));
    gjeffectmanager.def("calculateInheritedColor", pybind::overload_cast<pybind::function>(&GJEffectManager::calculateInheritedColor));
    gjeffectmanager.def("calculateInheritedColorO", [](GJEffectManager* self, int p0, ColorAction* p1) { return GJEffectManager::calculateInheritedColorO(self, p0, p1); });
    gjeffectmanager.attr("calculateInheritedColorA") = GJEffectManager::calculateInheritedColorA;
    gjeffectmanager.attr("calculateInheritedColorN") = "calculateInheritedColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::calculateInheritedColorA, GJEffectManager::calculateInheritedColorH, (LPVOID*)&GJEffectManager::calculateInheritedColorO_);

    gjeffectmanager.def("calculateLightBGColor", pybind::overload_cast<GJEffectManager*, cocos2d::_ccColor3B>(&GJEffectManager::calculateLightBGColor));
    gjeffectmanager.def("calculateLightBGColor", pybind::overload_cast<pybind::function>(&GJEffectManager::calculateLightBGColor));
    gjeffectmanager.def("calculateLightBGColorO", [](GJEffectManager* self, cocos2d::_ccColor3B p0) { return GJEffectManager::calculateLightBGColorO(self, p0); });
    gjeffectmanager.attr("calculateLightBGColorA") = GJEffectManager::calculateLightBGColorA;
    gjeffectmanager.attr("calculateLightBGColorN") = "calculateLightBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::calculateLightBGColorA, GJEffectManager::calculateLightBGColorH, (LPVOID*)&GJEffectManager::calculateLightBGColorO_);

    gjeffectmanager.def("colorForPulseEffect", pybind::overload_cast<GJEffectManager*, cocos2d::_ccColor3B const&, PulseEffectAction*>(&GJEffectManager::colorForPulseEffect));
    gjeffectmanager.def("colorForPulseEffect", pybind::overload_cast<pybind::function>(&GJEffectManager::colorForPulseEffect));
    gjeffectmanager.def("colorForPulseEffectO", [](GJEffectManager* self, cocos2d::_ccColor3B const& p0, PulseEffectAction* p1) { return GJEffectManager::colorForPulseEffectO(self, p0, p1); });
    gjeffectmanager.attr("colorForPulseEffectA") = GJEffectManager::colorForPulseEffectA;
    gjeffectmanager.attr("colorForPulseEffectN") = "colorForPulseEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::colorForPulseEffectA, GJEffectManager::colorForPulseEffectH, (LPVOID*)&GJEffectManager::colorForPulseEffectO_);

    gjeffectmanager.def("countChangedForItem", pybind::overload_cast<GJEffectManager*, int>(&GJEffectManager::countChangedForItem));
    gjeffectmanager.def("countChangedForItem", pybind::overload_cast<pybind::function>(&GJEffectManager::countChangedForItem));
    gjeffectmanager.def("countChangedForItemO", [](GJEffectManager* self, int p0) { return GJEffectManager::countChangedForItemO(self, p0); });
    gjeffectmanager.attr("countChangedForItemA") = GJEffectManager::countChangedForItemA;
    gjeffectmanager.attr("countChangedForItemN") = "countChangedForItem";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::countChangedForItemA, GJEffectManager::countChangedForItemH, (LPVOID*)&GJEffectManager::countChangedForItemO_);

    gjeffectmanager.def("create", pybind::overload_cast<>(&GJEffectManager::create));
    gjeffectmanager.def("create", pybind::overload_cast<pybind::function>(&GJEffectManager::create));
    gjeffectmanager.def("createO", []() { return GJEffectManager::createO(); });
    gjeffectmanager.attr("createA") = GJEffectManager::createA;
    gjeffectmanager.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::createA, GJEffectManager::createH, (LPVOID*)&GJEffectManager::createO_);

    gjeffectmanager.def("createMoveCommand", pybind::overload_cast<GJEffectManager*, cocos2d::CCPoint, int, float, int, float, bool, bool, int>(&GJEffectManager::createMoveCommand));
    gjeffectmanager.def("createMoveCommand", pybind::overload_cast<pybind::function>(&GJEffectManager::createMoveCommand));
    gjeffectmanager.def("createMoveCommandO", [](GJEffectManager* self, cocos2d::CCPoint p0, int p1, float p2, int p3, float p4, bool p5, bool p6, int p7) { return GJEffectManager::createMoveCommandO(self, p0, p1, p2, p3, p4, p5, p6, p7); });
    gjeffectmanager.attr("createMoveCommandA") = GJEffectManager::createMoveCommandA;
    gjeffectmanager.attr("createMoveCommandN") = "createMoveCommand";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::createMoveCommandA, GJEffectManager::createMoveCommandH, (LPVOID*)&GJEffectManager::createMoveCommandO_);

    gjeffectmanager.def("getAllColorActions", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::getAllColorActions));
    gjeffectmanager.def("getAllColorActions", pybind::overload_cast<pybind::function>(&GJEffectManager::getAllColorActions));
    gjeffectmanager.def("getAllColorActionsO", [](GJEffectManager* self) { return GJEffectManager::getAllColorActionsO(self); });
    gjeffectmanager.attr("getAllColorActionsA") = GJEffectManager::getAllColorActionsA;
    gjeffectmanager.attr("getAllColorActionsN") = "getAllColorActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::getAllColorActionsA, GJEffectManager::getAllColorActionsH, (LPVOID*)&GJEffectManager::getAllColorActionsO_);

    gjeffectmanager.def("getColorAction", pybind::overload_cast<GJEffectManager*, int>(&GJEffectManager::getColorAction));
    gjeffectmanager.def("getColorAction", pybind::overload_cast<pybind::function>(&GJEffectManager::getColorAction));
    gjeffectmanager.def("getColorActionO", [](GJEffectManager* self, int p0) { return GJEffectManager::getColorActionO(self, p0); });
    gjeffectmanager.attr("getColorActionA") = GJEffectManager::getColorActionA;
    gjeffectmanager.attr("getColorActionN") = "getColorAction";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::getColorActionA, GJEffectManager::getColorActionH, (LPVOID*)&GJEffectManager::getColorActionO_);

    gjeffectmanager.def("getColorSprite", pybind::overload_cast<GJEffectManager*, int>(&GJEffectManager::getColorSprite));
    gjeffectmanager.def("getColorSprite", pybind::overload_cast<pybind::function>(&GJEffectManager::getColorSprite));
    gjeffectmanager.def("getColorSpriteO", [](GJEffectManager* self, int p0) { return GJEffectManager::getColorSpriteO(self, p0); });
    gjeffectmanager.attr("getColorSpriteA") = GJEffectManager::getColorSpriteA;
    gjeffectmanager.attr("getColorSpriteN") = "getColorSprite";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::getColorSpriteA, GJEffectManager::getColorSpriteH, (LPVOID*)&GJEffectManager::getColorSpriteO_);

    gjeffectmanager.def("getCurrentStateString", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::getCurrentStateString));
    gjeffectmanager.def("getCurrentStateString", pybind::overload_cast<pybind::function>(&GJEffectManager::getCurrentStateString));
    gjeffectmanager.def("getCurrentStateStringO", [](GJEffectManager* self) { return GJEffectManager::getCurrentStateStringO(self); });
    gjeffectmanager.attr("getCurrentStateStringA") = GJEffectManager::getCurrentStateStringA;
    gjeffectmanager.attr("getCurrentStateStringN") = "getCurrentStateString";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::getCurrentStateStringA, GJEffectManager::getCurrentStateStringH, (LPVOID*)&GJEffectManager::getCurrentStateStringO_);

    gjeffectmanager.def("getMixedColor", pybind::overload_cast<cocos2d::_ccColor3B, cocos2d::_ccColor3B, float>(&GJEffectManager::getMixedColor));
    gjeffectmanager.def("getMixedColor", pybind::overload_cast<pybind::function>(&GJEffectManager::getMixedColor));
    gjeffectmanager.def("getMixedColorO", [](cocos2d::_ccColor3B p0, cocos2d::_ccColor3B p1, float p2) { return GJEffectManager::getMixedColorO(p0, p1, p2); });
    gjeffectmanager.attr("getMixedColorA") = GJEffectManager::getMixedColorA;
    gjeffectmanager.attr("getMixedColorN") = "getMixedColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::getMixedColorA, GJEffectManager::getMixedColorH, (LPVOID*)&GJEffectManager::getMixedColorO_);

    gjeffectmanager.def("handleObjectCollision", pybind::overload_cast<GJEffectManager*, bool, int, int>(&GJEffectManager::handleObjectCollision));
    gjeffectmanager.def("handleObjectCollision", pybind::overload_cast<pybind::function>(&GJEffectManager::handleObjectCollision));
    gjeffectmanager.def("handleObjectCollisionO", [](GJEffectManager* self, bool p0, int p1, int p2) { return GJEffectManager::handleObjectCollisionO(self, p0, p1, p2); });
    gjeffectmanager.attr("handleObjectCollisionA") = GJEffectManager::handleObjectCollisionA;
    gjeffectmanager.attr("handleObjectCollisionN") = "handleObjectCollision";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::handleObjectCollisionA, GJEffectManager::handleObjectCollisionH, (LPVOID*)&GJEffectManager::handleObjectCollisionO_);

    gjeffectmanager.def("loadState", pybind::overload_cast<GJEffectManager*, gd::string>(&GJEffectManager::loadState));
    gjeffectmanager.def("loadState", pybind::overload_cast<pybind::function>(&GJEffectManager::loadState));
    gjeffectmanager.def("loadStateO", [](GJEffectManager* self, gd::string p0) { return GJEffectManager::loadStateO(self, p0); });
    gjeffectmanager.attr("loadStateA") = GJEffectManager::loadStateA;
    gjeffectmanager.attr("loadStateN") = "loadState";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::loadStateA, GJEffectManager::loadStateH, (LPVOID*)&GJEffectManager::loadStateO_);

    gjeffectmanager.def("objectsCollided", pybind::overload_cast<GJEffectManager*, int, int>(&GJEffectManager::objectsCollided));
    gjeffectmanager.def("objectsCollided", pybind::overload_cast<pybind::function>(&GJEffectManager::objectsCollided));
    gjeffectmanager.def("objectsCollidedO", [](GJEffectManager* self, int p0, int p1) { return GJEffectManager::objectsCollidedO(self, p0, p1); });
    gjeffectmanager.attr("objectsCollidedA") = GJEffectManager::objectsCollidedA;
    gjeffectmanager.attr("objectsCollidedN") = "objectsCollided";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::objectsCollidedA, GJEffectManager::objectsCollidedH, (LPVOID*)&GJEffectManager::objectsCollidedO_);

    gjeffectmanager.def("playerButton", pybind::overload_cast<GJEffectManager*, bool, bool>(&GJEffectManager::playerButton));
    gjeffectmanager.def("playerButton", pybind::overload_cast<pybind::function>(&GJEffectManager::playerButton));
    gjeffectmanager.def("playerButtonO", [](GJEffectManager* self, bool p0, bool p1) { return GJEffectManager::playerButtonO(self, p0, p1); });
    gjeffectmanager.attr("playerButtonA") = GJEffectManager::playerButtonA;
    gjeffectmanager.attr("playerButtonN") = "playerButton";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::playerButtonA, GJEffectManager::playerButtonH, (LPVOID*)&GJEffectManager::playerButtonO_);

    gjeffectmanager.def("postCollisionCheck", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::postCollisionCheck));
    gjeffectmanager.def("postCollisionCheck", pybind::overload_cast<pybind::function>(&GJEffectManager::postCollisionCheck));
    gjeffectmanager.def("postCollisionCheckO", [](GJEffectManager* self) { return GJEffectManager::postCollisionCheckO(self); });
    gjeffectmanager.attr("postCollisionCheckA") = GJEffectManager::postCollisionCheckA;
    gjeffectmanager.attr("postCollisionCheckN") = "postCollisionCheck";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::postCollisionCheckA, GJEffectManager::postCollisionCheckH, (LPVOID*)&GJEffectManager::postCollisionCheckO_);

    gjeffectmanager.def("preCollisionCheck", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::preCollisionCheck));
    gjeffectmanager.def("preCollisionCheck", pybind::overload_cast<pybind::function>(&GJEffectManager::preCollisionCheck));
    gjeffectmanager.def("preCollisionCheckO", [](GJEffectManager* self) { return GJEffectManager::preCollisionCheckO(self); });
    gjeffectmanager.attr("preCollisionCheckA") = GJEffectManager::preCollisionCheckA;
    gjeffectmanager.attr("preCollisionCheckN") = "preCollisionCheck";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::preCollisionCheckA, GJEffectManager::preCollisionCheckH, (LPVOID*)&GJEffectManager::preCollisionCheckO_);

    gjeffectmanager.def("prepareMoveActions", pybind::overload_cast<GJEffectManager*, float, bool>(&GJEffectManager::prepareMoveActions));
    gjeffectmanager.def("prepareMoveActions", pybind::overload_cast<pybind::function>(&GJEffectManager::prepareMoveActions));
    gjeffectmanager.def("prepareMoveActionsO", [](GJEffectManager* self, float p0, bool p1) { return GJEffectManager::prepareMoveActionsO(self, p0, p1); });
    gjeffectmanager.attr("prepareMoveActionsA") = GJEffectManager::prepareMoveActionsA;
    gjeffectmanager.attr("prepareMoveActionsN") = "prepareMoveActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::prepareMoveActionsA, GJEffectManager::prepareMoveActionsH, (LPVOID*)&GJEffectManager::prepareMoveActionsO_);

    gjeffectmanager.def("processCopyColorPulseActions", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::processCopyColorPulseActions));
    gjeffectmanager.def("processCopyColorPulseActions", pybind::overload_cast<pybind::function>(&GJEffectManager::processCopyColorPulseActions));
    gjeffectmanager.def("processCopyColorPulseActionsO", [](GJEffectManager* self) { return GJEffectManager::processCopyColorPulseActionsO(self); });
    gjeffectmanager.attr("processCopyColorPulseActionsA") = GJEffectManager::processCopyColorPulseActionsA;
    gjeffectmanager.attr("processCopyColorPulseActionsN") = "processCopyColorPulseActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::processCopyColorPulseActionsA, GJEffectManager::processCopyColorPulseActionsH, (LPVOID*)&GJEffectManager::processCopyColorPulseActionsO_);

    gjeffectmanager.def("processInheritedColors", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::processInheritedColors));
    gjeffectmanager.def("processInheritedColors", pybind::overload_cast<pybind::function>(&GJEffectManager::processInheritedColors));
    gjeffectmanager.def("processInheritedColorsO", [](GJEffectManager* self) { return GJEffectManager::processInheritedColorsO(self); });
    gjeffectmanager.attr("processInheritedColorsA") = GJEffectManager::processInheritedColorsA;
    gjeffectmanager.attr("processInheritedColorsN") = "processInheritedColors";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::processInheritedColorsA, GJEffectManager::processInheritedColorsH, (LPVOID*)&GJEffectManager::processInheritedColorsO_);

    gjeffectmanager.def("processPulseActions", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::processPulseActions));
    gjeffectmanager.def("processPulseActions", pybind::overload_cast<pybind::function>(&GJEffectManager::processPulseActions));
    gjeffectmanager.def("processPulseActionsO", [](GJEffectManager* self) { return GJEffectManager::processPulseActionsO(self); });
    gjeffectmanager.attr("processPulseActionsA") = GJEffectManager::processPulseActionsA;
    gjeffectmanager.attr("processPulseActionsN") = "processPulseActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::processPulseActionsA, GJEffectManager::processPulseActionsH, (LPVOID*)&GJEffectManager::processPulseActionsO_);

    gjeffectmanager.def("reset", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::reset));
    gjeffectmanager.def("reset", pybind::overload_cast<pybind::function>(&GJEffectManager::reset));
    gjeffectmanager.def("resetO", [](GJEffectManager* self) { return GJEffectManager::resetO(self); });
    gjeffectmanager.attr("resetA") = GJEffectManager::resetA;
    gjeffectmanager.attr("resetN") = "reset";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::resetA, GJEffectManager::resetH, (LPVOID*)&GJEffectManager::resetO_);

    gjeffectmanager.def("resetEffects", pybind::overload_cast<GJEffectManager*>(&GJEffectManager::resetEffects));
    gjeffectmanager.def("resetEffects", pybind::overload_cast<pybind::function>(&GJEffectManager::resetEffects));
    gjeffectmanager.def("resetEffectsO", [](GJEffectManager* self) { return GJEffectManager::resetEffectsO(self); });
    gjeffectmanager.attr("resetEffectsA") = GJEffectManager::resetEffectsA;
    gjeffectmanager.attr("resetEffectsN") = "resetEffects";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::resetEffectsA, GJEffectManager::resetEffectsH, (LPVOID*)&GJEffectManager::resetEffectsO_);

    gjeffectmanager.def("runPulseEffect", pybind::overload_cast<GJEffectManager*, int, bool, float, float, float, PulseEffectType, cocos2d::_ccColor3B, cocos2d::_ccHSVValue, int, bool, bool, bool, int>(&GJEffectManager::runPulseEffect));
    gjeffectmanager.def("runPulseEffect", pybind::overload_cast<pybind::function>(&GJEffectManager::runPulseEffect));
    gjeffectmanager.def("runPulseEffectO", [](GJEffectManager* self, int p0, bool p1, float p2, float p3, float p4, PulseEffectType p5, cocos2d::_ccColor3B p6, cocos2d::_ccHSVValue p7, int p8, bool p9, bool p10, bool p11, int p12) { return GJEffectManager::runPulseEffectO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); });
    gjeffectmanager.attr("runPulseEffectA") = GJEffectManager::runPulseEffectA;
    gjeffectmanager.attr("runPulseEffectN") = "runPulseEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::runPulseEffectA, GJEffectManager::runPulseEffectH, (LPVOID*)&GJEffectManager::runPulseEffectO_);

    gjeffectmanager.def("setColorAction", pybind::overload_cast<GJEffectManager*, ColorAction*, int>(&GJEffectManager::setColorAction));
    gjeffectmanager.def("setColorAction", pybind::overload_cast<pybind::function>(&GJEffectManager::setColorAction));
    gjeffectmanager.def("setColorActionO", [](GJEffectManager* self, ColorAction* p0, int p1) { return GJEffectManager::setColorActionO(self, p0, p1); });
    gjeffectmanager.attr("setColorActionA") = GJEffectManager::setColorActionA;
    gjeffectmanager.attr("setColorActionN") = "setColorAction";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::setColorActionA, GJEffectManager::setColorActionH, (LPVOID*)&GJEffectManager::setColorActionO_);

    gjeffectmanager.def("setupFromString", pybind::overload_cast<GJEffectManager*, gd::string>(&GJEffectManager::setupFromString));
    gjeffectmanager.def("setupFromString", pybind::overload_cast<pybind::function>(&GJEffectManager::setupFromString));
    gjeffectmanager.def("setupFromStringO", [](GJEffectManager* self, gd::string p0) { return GJEffectManager::setupFromStringO(self, p0); });
    gjeffectmanager.attr("setupFromStringA") = GJEffectManager::setupFromStringA;
    gjeffectmanager.attr("setupFromStringN") = "setupFromString";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::setupFromStringA, GJEffectManager::setupFromStringH, (LPVOID*)&GJEffectManager::setupFromStringO_);

    gjeffectmanager.def("traverseInheritanceChain", pybind::overload_cast<GJEffectManager*, InheritanceNode*>(&GJEffectManager::traverseInheritanceChain));
    gjeffectmanager.def("traverseInheritanceChain", pybind::overload_cast<pybind::function>(&GJEffectManager::traverseInheritanceChain));
    gjeffectmanager.def("traverseInheritanceChainO", [](GJEffectManager* self, InheritanceNode* p0) { return GJEffectManager::traverseInheritanceChainO(self, p0); });
    gjeffectmanager.attr("traverseInheritanceChainA") = GJEffectManager::traverseInheritanceChainA;
    gjeffectmanager.attr("traverseInheritanceChainN") = "traverseInheritanceChain";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::traverseInheritanceChainA, GJEffectManager::traverseInheritanceChainH, (LPVOID*)&GJEffectManager::traverseInheritanceChainO_);

    gjeffectmanager.def("updateColorEffects", pybind::overload_cast<GJEffectManager*, float>(&GJEffectManager::updateColorEffects));
    gjeffectmanager.def("updateColorEffects", pybind::overload_cast<pybind::function>(&GJEffectManager::updateColorEffects));
    gjeffectmanager.def("updateColorEffectsO", [](GJEffectManager* self, float p0) { return GJEffectManager::updateColorEffectsO(self, p0); });
    gjeffectmanager.attr("updateColorEffectsA") = GJEffectManager::updateColorEffectsA;
    gjeffectmanager.attr("updateColorEffectsN") = "updateColorEffects";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::updateColorEffectsA, GJEffectManager::updateColorEffectsH, (LPVOID*)&GJEffectManager::updateColorEffectsO_);

    gjeffectmanager.def("updateColors", pybind::overload_cast<GJEffectManager*, cocos2d::_ccColor3B, cocos2d::_ccColor3B>(&GJEffectManager::updateColors));
    gjeffectmanager.def("updateColors", pybind::overload_cast<pybind::function>(&GJEffectManager::updateColors));
    gjeffectmanager.def("updateColorsO", [](GJEffectManager* self, cocos2d::_ccColor3B p0, cocos2d::_ccColor3B p1) { return GJEffectManager::updateColorsO(self, p0, p1); });
    gjeffectmanager.attr("updateColorsA") = GJEffectManager::updateColorsA;
    gjeffectmanager.attr("updateColorsN") = "updateColors";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::updateColorsA, GJEffectManager::updateColorsH, (LPVOID*)&GJEffectManager::updateColorsO_);

    gjeffectmanager.def("updateOpacityEffects", pybind::overload_cast<GJEffectManager*, float>(&GJEffectManager::updateOpacityEffects));
    gjeffectmanager.def("updateOpacityEffects", pybind::overload_cast<pybind::function>(&GJEffectManager::updateOpacityEffects));
    gjeffectmanager.def("updateOpacityEffectsO", [](GJEffectManager* self, float p0) { return GJEffectManager::updateOpacityEffectsO(self, p0); });
    gjeffectmanager.attr("updateOpacityEffectsA") = GJEffectManager::updateOpacityEffectsA;
    gjeffectmanager.attr("updateOpacityEffectsN") = "updateOpacityEffects";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::updateOpacityEffectsA, GJEffectManager::updateOpacityEffectsH, (LPVOID*)&GJEffectManager::updateOpacityEffectsO_);

    gjeffectmanager.def("updatePulseEffects", pybind::overload_cast<GJEffectManager*, float>(&GJEffectManager::updatePulseEffects));
    gjeffectmanager.def("updatePulseEffects", pybind::overload_cast<pybind::function>(&GJEffectManager::updatePulseEffects));
    gjeffectmanager.def("updatePulseEffectsO", [](GJEffectManager* self, float p0) { return GJEffectManager::updatePulseEffectsO(self, p0); });
    gjeffectmanager.attr("updatePulseEffectsA") = GJEffectManager::updatePulseEffectsA;
    gjeffectmanager.attr("updatePulseEffectsN") = "updatePulseEffects";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::updatePulseEffectsA, GJEffectManager::updatePulseEffectsH, (LPVOID*)&GJEffectManager::updatePulseEffectsO_);

    gjeffectmanager.def("updateSpawnTriggers", pybind::overload_cast<GJEffectManager*, float>(&GJEffectManager::updateSpawnTriggers));
    gjeffectmanager.def("updateSpawnTriggers", pybind::overload_cast<pybind::function>(&GJEffectManager::updateSpawnTriggers));
    gjeffectmanager.def("updateSpawnTriggersO", [](GJEffectManager* self, float p0) { return GJEffectManager::updateSpawnTriggersO(self, p0); });
    gjeffectmanager.attr("updateSpawnTriggersA") = GJEffectManager::updateSpawnTriggersA;
    gjeffectmanager.attr("updateSpawnTriggersN") = "updateSpawnTriggers";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::updateSpawnTriggersA, GJEffectManager::updateSpawnTriggersH, (LPVOID*)&GJEffectManager::updateSpawnTriggersO_);

    gjeffectmanager.def("wouldCreateLoop", pybind::overload_cast<GJEffectManager*, InheritanceNode*, int>(&GJEffectManager::wouldCreateLoop));
    gjeffectmanager.def("wouldCreateLoop", pybind::overload_cast<pybind::function>(&GJEffectManager::wouldCreateLoop));
    gjeffectmanager.def("wouldCreateLoopO", [](GJEffectManager* self, InheritanceNode* p0, int p1) { return GJEffectManager::wouldCreateLoopO(self, p0, p1); });
    gjeffectmanager.attr("wouldCreateLoopA") = GJEffectManager::wouldCreateLoopA;
    gjeffectmanager.attr("wouldCreateLoopN") = "wouldCreateLoop";
    cinnamon::hooks::hookCinnamon((PVOID)GJEffectManager::wouldCreateLoopA, GJEffectManager::wouldCreateLoopH, (LPVOID*)&GJEffectManager::wouldCreateLoopO_);

    auto gjgamelevel = pybind::class_<GJGameLevel, cocos2d::CCNode>(m, "GJGameLevel");
    gjgamelevel.def("encodeWithCoder", pybind::overload_cast<GJGameLevel*, DS_Dictionary*>(&GJGameLevel::encodeWithCoder));
    gjgamelevel.def("encodeWithCoder", pybind::overload_cast<pybind::function>(&GJGameLevel::encodeWithCoder));
    gjgamelevel.def("encodeWithCoderO", [](GJGameLevel* self, DS_Dictionary* p0) { return GJGameLevel::encodeWithCoderO(self, p0); });
    gjgamelevel.attr("encodeWithCoderA") = GJGameLevel::encodeWithCoderA;
    gjgamelevel.attr("encodeWithCoderN") = "encodeWithCoder";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::encodeWithCoderA, GJGameLevel::encodeWithCoderH, (LPVOID*)&GJGameLevel::encodeWithCoderO_);

    gjgamelevel.def("canEncode", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::canEncode));
    gjgamelevel.def("canEncode", pybind::overload_cast<pybind::function>(&GJGameLevel::canEncode));
    gjgamelevel.def("canEncodeO", [](GJGameLevel* self) { return GJGameLevel::canEncodeO(self); });
    gjgamelevel.attr("canEncodeA") = GJGameLevel::canEncodeA;
    gjgamelevel.attr("canEncodeN") = "canEncode";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::canEncodeA, GJGameLevel::canEncodeH, (LPVOID*)&GJGameLevel::canEncodeO_);

    gjgamelevel.def("init", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::init));
    gjgamelevel.def("init", pybind::overload_cast<pybind::function>(&GJGameLevel::init));
    gjgamelevel.def("initO", [](GJGameLevel* self) { return GJGameLevel::initO(self); });
    gjgamelevel.attr("initA") = GJGameLevel::initA;
    gjgamelevel.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::initA, GJGameLevel::initH, (LPVOID*)&GJGameLevel::initO_);

    gjgamelevel.def("create", pybind::overload_cast<>(&GJGameLevel::create));
    gjgamelevel.def("create", pybind::overload_cast<pybind::function>(&GJGameLevel::create));
    gjgamelevel.def("createO", []() { return GJGameLevel::createO(); });
    gjgamelevel.attr("createA") = GJGameLevel::createA;
    gjgamelevel.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::createA, GJGameLevel::createH, (LPVOID*)&GJGameLevel::createO_);

    gjgamelevel.def("getAudioFileName", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::getAudioFileName));
    gjgamelevel.def("getAudioFileName", pybind::overload_cast<pybind::function>(&GJGameLevel::getAudioFileName));
    gjgamelevel.def("getAudioFileNameO", [](GJGameLevel* self) { return GJGameLevel::getAudioFileNameO(self); });
    gjgamelevel.attr("getAudioFileNameA") = GJGameLevel::getAudioFileNameA;
    gjgamelevel.attr("getAudioFileNameN") = "getAudioFileName";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::getAudioFileNameA, GJGameLevel::getAudioFileNameH, (LPVOID*)&GJGameLevel::getAudioFileNameO_);

    gjgamelevel.def("levelWasAltered", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::levelWasAltered));
    gjgamelevel.def("levelWasAltered", pybind::overload_cast<pybind::function>(&GJGameLevel::levelWasAltered));
    gjgamelevel.def("levelWasAlteredO", [](GJGameLevel* self) { return GJGameLevel::levelWasAlteredO(self); });
    gjgamelevel.attr("levelWasAlteredA") = GJGameLevel::levelWasAlteredA;
    gjgamelevel.attr("levelWasAlteredN") = "levelWasAltered";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::levelWasAlteredA, GJGameLevel::levelWasAlteredH, (LPVOID*)&GJGameLevel::levelWasAlteredO_);

    gjgamelevel.def("dataLoaded", pybind::overload_cast<GJGameLevel*, DS_Dictionary*>(&GJGameLevel::dataLoaded));
    gjgamelevel.def("dataLoaded", pybind::overload_cast<pybind::function>(&GJGameLevel::dataLoaded));
    gjgamelevel.def("dataLoadedO", [](GJGameLevel* self, DS_Dictionary* dict) { return GJGameLevel::dataLoadedO(self, dict); });
    gjgamelevel.attr("dataLoadedA") = GJGameLevel::dataLoadedA;
    gjgamelevel.attr("dataLoadedN") = "dataLoaded";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::dataLoadedA, GJGameLevel::dataLoadedH, (LPVOID*)&GJGameLevel::dataLoadedO_);

    gjgamelevel.def("getAverageDifficulty", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::getAverageDifficulty));
    gjgamelevel.def("getAverageDifficulty", pybind::overload_cast<pybind::function>(&GJGameLevel::getAverageDifficulty));
    gjgamelevel.def("getAverageDifficultyO", [](GJGameLevel* self) { return GJGameLevel::getAverageDifficultyO(self); });
    gjgamelevel.attr("getAverageDifficultyA") = GJGameLevel::getAverageDifficultyA;
    gjgamelevel.attr("getAverageDifficultyN") = "getAverageDifficulty";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::getAverageDifficultyA, GJGameLevel::getAverageDifficultyH, (LPVOID*)&GJGameLevel::getAverageDifficultyO_);

    gjgamelevel.def("getUnpackedLevelDescription", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::getUnpackedLevelDescription));
    gjgamelevel.def("getUnpackedLevelDescription", pybind::overload_cast<pybind::function>(&GJGameLevel::getUnpackedLevelDescription));
    gjgamelevel.def("getUnpackedLevelDescriptionO", [](GJGameLevel* self) { return GJGameLevel::getUnpackedLevelDescriptionO(self); });
    gjgamelevel.attr("getUnpackedLevelDescriptionA") = GJGameLevel::getUnpackedLevelDescriptionA;
    gjgamelevel.attr("getUnpackedLevelDescriptionN") = "getUnpackedLevelDescription";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::getUnpackedLevelDescriptionA, GJGameLevel::getUnpackedLevelDescriptionH, (LPVOID*)&GJGameLevel::getUnpackedLevelDescriptionO_);

    gjgamelevel.def("lengthKeyToString", pybind::overload_cast<GJGameLevel*, int>(&GJGameLevel::lengthKeyToString));
    gjgamelevel.def("lengthKeyToString", pybind::overload_cast<pybind::function>(&GJGameLevel::lengthKeyToString));
    gjgamelevel.def("lengthKeyToStringO", [](GJGameLevel* self, int key) { return GJGameLevel::lengthKeyToStringO(self, key); });
    gjgamelevel.attr("lengthKeyToStringA") = GJGameLevel::lengthKeyToStringA;
    gjgamelevel.attr("lengthKeyToStringN") = "lengthKeyToString";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::lengthKeyToStringA, GJGameLevel::lengthKeyToStringH, (LPVOID*)&GJGameLevel::lengthKeyToStringO_);

    auto gameratedelegate = pybind::class_<GameRateDelegate>(m, "GameRateDelegate");
    auto listbuttonbardelegate = pybind::class_<ListButtonBarDelegate>(m, "ListButtonBarDelegate");
    auto gjgaragelayer = pybind::class_<GJGarageLayer, cocos2d::CCLayer>(m, "GJGarageLayer");
    gjgaragelayer.def("onPlayerColor1", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onPlayerColor1));
    gjgaragelayer.def("onPlayerColor1", pybind::overload_cast<pybind::function>(&GJGarageLayer::onPlayerColor1));
    gjgaragelayer.def("onPlayerColor1O", [](GJGarageLayer* self, cocos2d::CCObject* p0) { return GJGarageLayer::onPlayerColor1O(self, p0); });
    gjgaragelayer.attr("onPlayerColor1A") = GJGarageLayer::onPlayerColor1A;
    gjgaragelayer.attr("onPlayerColor1N") = "onPlayerColor1";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onPlayerColor1A, GJGarageLayer::onPlayerColor1H, (LPVOID*)&GJGarageLayer::onPlayerColor1O_);

    gjgaragelayer.def("onPlayerColor2", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onPlayerColor2));
    gjgaragelayer.def("onPlayerColor2", pybind::overload_cast<pybind::function>(&GJGarageLayer::onPlayerColor2));
    gjgaragelayer.def("onPlayerColor2O", [](GJGarageLayer* self, cocos2d::CCObject* p0) { return GJGarageLayer::onPlayerColor2O(self, p0); });
    gjgaragelayer.attr("onPlayerColor2A") = GJGarageLayer::onPlayerColor2A;
    gjgaragelayer.attr("onPlayerColor2N") = "onPlayerColor2";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onPlayerColor2A, GJGarageLayer::onPlayerColor2H, (LPVOID*)&GJGarageLayer::onPlayerColor2O_);

    gjgaragelayer.def("node", pybind::overload_cast<>(&GJGarageLayer::node));
    gjgaragelayer.def("node", pybind::overload_cast<pybind::function>(&GJGarageLayer::node));
    gjgaragelayer.def("nodeO", []() { return GJGarageLayer::nodeO(); });
    gjgaragelayer.attr("nodeA") = GJGarageLayer::nodeA;
    gjgaragelayer.attr("nodeN") = "node";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::nodeA, GJGarageLayer::nodeH, (LPVOID*)&GJGarageLayer::nodeO_);

    gjgaragelayer.def("init", pybind::overload_cast<GJGarageLayer*>(&GJGarageLayer::init));
    gjgaragelayer.def("init", pybind::overload_cast<pybind::function>(&GJGarageLayer::init));
    gjgaragelayer.def("initO", [](GJGarageLayer* self) { return GJGarageLayer::initO(self); });
    gjgaragelayer.attr("initA") = GJGarageLayer::initA;
    gjgaragelayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::initA, GJGarageLayer::initH, (LPVOID*)&GJGarageLayer::initO_);

    gjgaragelayer.def("onSelectTab", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onSelectTab));
    gjgaragelayer.def("onSelectTab", pybind::overload_cast<pybind::function>(&GJGarageLayer::onSelectTab));
    gjgaragelayer.def("onSelectTabO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onSelectTabO(self, sender); });
    gjgaragelayer.attr("onSelectTabA") = GJGarageLayer::onSelectTabA;
    gjgaragelayer.attr("onSelectTabN") = "onSelectTab";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onSelectTabA, GJGarageLayer::onSelectTabH, (LPVOID*)&GJGarageLayer::onSelectTabO_);

    gjgaragelayer.def("onPlayerIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onPlayerIcon));
    gjgaragelayer.def("onPlayerIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onPlayerIcon));
    gjgaragelayer.def("onPlayerIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onPlayerIconO(self, sender); });
    gjgaragelayer.attr("onPlayerIconA") = GJGarageLayer::onPlayerIconA;
    gjgaragelayer.attr("onPlayerIconN") = "onPlayerIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onPlayerIconA, GJGarageLayer::onPlayerIconH, (LPVOID*)&GJGarageLayer::onPlayerIconO_);

    gjgaragelayer.def("onShipIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onShipIcon));
    gjgaragelayer.def("onShipIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onShipIcon));
    gjgaragelayer.def("onShipIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onShipIconO(self, sender); });
    gjgaragelayer.attr("onShipIconA") = GJGarageLayer::onShipIconA;
    gjgaragelayer.attr("onShipIconN") = "onShipIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onShipIconA, GJGarageLayer::onShipIconH, (LPVOID*)&GJGarageLayer::onShipIconO_);

    gjgaragelayer.def("onBallIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onBallIcon));
    gjgaragelayer.def("onBallIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onBallIcon));
    gjgaragelayer.def("onBallIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onBallIconO(self, sender); });
    gjgaragelayer.attr("onBallIconA") = GJGarageLayer::onBallIconA;
    gjgaragelayer.attr("onBallIconN") = "onBallIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onBallIconA, GJGarageLayer::onBallIconH, (LPVOID*)&GJGarageLayer::onBallIconO_);

    gjgaragelayer.def("onBirdIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onBirdIcon));
    gjgaragelayer.def("onBirdIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onBirdIcon));
    gjgaragelayer.def("onBirdIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onBirdIconO(self, sender); });
    gjgaragelayer.attr("onBirdIconA") = GJGarageLayer::onBirdIconA;
    gjgaragelayer.attr("onBirdIconN") = "onBirdIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onBirdIconA, GJGarageLayer::onBirdIconH, (LPVOID*)&GJGarageLayer::onBirdIconO_);

    gjgaragelayer.def("onDartIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onDartIcon));
    gjgaragelayer.def("onDartIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onDartIcon));
    gjgaragelayer.def("onDartIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onDartIconO(self, sender); });
    gjgaragelayer.attr("onDartIconA") = GJGarageLayer::onDartIconA;
    gjgaragelayer.attr("onDartIconN") = "onDartIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onDartIconA, GJGarageLayer::onDartIconH, (LPVOID*)&GJGarageLayer::onDartIconO_);

    gjgaragelayer.def("onRobotIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onRobotIcon));
    gjgaragelayer.def("onRobotIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onRobotIcon));
    gjgaragelayer.def("onRobotIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onRobotIconO(self, sender); });
    gjgaragelayer.attr("onRobotIconA") = GJGarageLayer::onRobotIconA;
    gjgaragelayer.attr("onRobotIconN") = "onRobotIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onRobotIconA, GJGarageLayer::onRobotIconH, (LPVOID*)&GJGarageLayer::onRobotIconO_);

    gjgaragelayer.def("onSpiderIcon", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onSpiderIcon));
    gjgaragelayer.def("onSpiderIcon", pybind::overload_cast<pybind::function>(&GJGarageLayer::onSpiderIcon));
    gjgaragelayer.def("onSpiderIconO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onSpiderIconO(self, sender); });
    gjgaragelayer.attr("onSpiderIconA") = GJGarageLayer::onSpiderIconA;
    gjgaragelayer.attr("onSpiderIconN") = "onSpiderIcon";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onSpiderIconA, GJGarageLayer::onSpiderIconH, (LPVOID*)&GJGarageLayer::onSpiderIconO_);

    gjgaragelayer.def("onShards", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onShards));
    gjgaragelayer.def("onShards", pybind::overload_cast<pybind::function>(&GJGarageLayer::onShards));
    gjgaragelayer.def("onShardsO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onShardsO(self, sender); });
    gjgaragelayer.attr("onShardsA") = GJGarageLayer::onShardsA;
    gjgaragelayer.attr("onShardsN") = "onShards";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onShardsA, GJGarageLayer::onShardsH, (LPVOID*)&GJGarageLayer::onShardsO_);

    gjgaragelayer.def("onBack", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onBack));
    gjgaragelayer.def("onBack", pybind::overload_cast<pybind::function>(&GJGarageLayer::onBack));
    gjgaragelayer.def("onBackO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onBackO(self, sender); });
    gjgaragelayer.attr("onBackA") = GJGarageLayer::onBackA;
    gjgaragelayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onBackA, GJGarageLayer::onBackH, (LPVOID*)&GJGarageLayer::onBackO_);

    gjgaragelayer.def("onShop", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onShop));
    gjgaragelayer.def("onShop", pybind::overload_cast<pybind::function>(&GJGarageLayer::onShop));
    gjgaragelayer.def("onShopO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onShopO(self, sender); });
    gjgaragelayer.attr("onShopA") = GJGarageLayer::onShopA;
    gjgaragelayer.attr("onShopN") = "onShop";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onShopA, GJGarageLayer::onShopH, (LPVOID*)&GJGarageLayer::onShopO_);

    auto gjgroundlayer = pybind::class_<GJGroundLayer, cocos2d::CCLayer>(m, "GJGroundLayer");
    gjgroundlayer.def("updateGroundWidth", pybind::overload_cast<GJGroundLayer*>(&GJGroundLayer::updateGroundWidth));
    gjgroundlayer.def("updateGroundWidth", pybind::overload_cast<pybind::function>(&GJGroundLayer::updateGroundWidth));
    gjgroundlayer.def("updateGroundWidthO", [](GJGroundLayer* self) { return GJGroundLayer::updateGroundWidthO(self); });
    gjgroundlayer.attr("updateGroundWidthA") = GJGroundLayer::updateGroundWidthA;
    gjgroundlayer.attr("updateGroundWidthN") = "updateGroundWidth";
    cinnamon::hooks::hookCinnamon((PVOID)GJGroundLayer::updateGroundWidthA, GJGroundLayer::updateGroundWidthH, (LPVOID*)&GJGroundLayer::updateGroundWidthO_);

    auto gjlevelscorecell = pybind::class_<GJLevelScoreCell, TableViewCell>(m, "GJLevelScoreCell");
    gjlevelscorecell.def("updateBGColor", pybind::overload_cast<GJLevelScoreCell*, int>(&GJLevelScoreCell::updateBGColor));
    gjlevelscorecell.def("updateBGColor", pybind::overload_cast<pybind::function>(&GJLevelScoreCell::updateBGColor));
    gjlevelscorecell.def("updateBGColorO", [](GJLevelScoreCell* self, int index) { return GJLevelScoreCell::updateBGColorO(self, index); });
    gjlevelscorecell.attr("updateBGColorA") = GJLevelScoreCell::updateBGColorA;
    gjlevelscorecell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJLevelScoreCell::updateBGColorA, GJLevelScoreCell::updateBGColorH, (LPVOID*)&GJLevelScoreCell::updateBGColorO_);

    auto gjlistlayer = pybind::class_<GJListLayer, cocos2d::CCLayerColor>(m, "GJListLayer");
    gjlistlayer.def("create", pybind::overload_cast<BoomListView*, const char*, cocos2d::ccColor4B, float, float>(&GJListLayer::create));
    gjlistlayer.def("create", pybind::overload_cast<pybind::function>(&GJListLayer::create));
    gjlistlayer.def("createO", [](BoomListView* target, const char* title, cocos2d::ccColor4B color, float width, float height) { return GJListLayer::createO(target, title, color, width, height); });
    gjlistlayer.attr("createA") = GJListLayer::createA;
    gjlistlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJListLayer::createA, GJListLayer::createH, (LPVOID*)&GJListLayer::createO_);

    auto gjmappack = pybind::class_<GJMapPack, cocos2d::CCNode>(m, "GJMapPack");
    gjmappack.def("init", pybind::overload_cast<GJMapPack*>(&GJMapPack::init));
    gjmappack.def("init", pybind::overload_cast<pybind::function>(&GJMapPack::init));
    gjmappack.def("initO", [](GJMapPack* self) { return GJMapPack::initO(self); });
    gjmappack.attr("initA") = GJMapPack::initA;
    gjmappack.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJMapPack::initA, GJMapPack::initH, (LPVOID*)&GJMapPack::initO_);

    gjmappack.def("create", pybind::overload_cast<>(&GJMapPack::create));
    gjmappack.def("create", pybind::overload_cast<pybind::function>(&GJMapPack::create));
    gjmappack.def("createO", []() { return GJMapPack::createO(); });
    gjmappack.attr("createA") = GJMapPack::createA;
    gjmappack.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJMapPack::createA, GJMapPack::createH, (LPVOID*)&GJMapPack::createO_);

    auto gjmessagecell = pybind::class_<GJMessageCell, TableViewCell>(m, "GJMessageCell");
    gjmessagecell.def("updateBGColor", pybind::overload_cast<GJMessageCell*, int>(&GJMessageCell::updateBGColor));
    gjmessagecell.def("updateBGColor", pybind::overload_cast<pybind::function>(&GJMessageCell::updateBGColor));
    gjmessagecell.def("updateBGColorO", [](GJMessageCell* self, int index) { return GJMessageCell::updateBGColorO(self, index); });
    gjmessagecell.attr("updateBGColorA") = GJMessageCell::updateBGColorA;
    gjmessagecell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJMessageCell::updateBGColorA, GJMessageCell::updateBGColorH, (LPVOID*)&GJMessageCell::updateBGColorO_);

    gjmessagecell.def("loadFromMessage", pybind::overload_cast<GJMessageCell*, GJUserMessage *>(&GJMessageCell::loadFromMessage));
    gjmessagecell.def("loadFromMessage", pybind::overload_cast<pybind::function>(&GJMessageCell::loadFromMessage));
    gjmessagecell.def("loadFromMessageO", [](GJMessageCell* self, GJUserMessage * p0) { return GJMessageCell::loadFromMessageO(self, p0); });
    gjmessagecell.attr("loadFromMessageA") = GJMessageCell::loadFromMessageA;
    gjmessagecell.attr("loadFromMessageN") = "loadFromMessage";
    cinnamon::hooks::hookCinnamon((PVOID)GJMessageCell::loadFromMessageA, GJMessageCell::loadFromMessageH, (LPVOID*)&GJMessageCell::loadFromMessageO_);

    auto gjoptionslayer = pybind::class_<GJOptionsLayer, FLAlertLayer>(m, "GJOptionsLayer");
    auto gjrequestcell = pybind::class_<GJRequestCell, TableViewCell>(m, "GJRequestCell");
    gjrequestcell.def("updateBGColor", pybind::overload_cast<GJRequestCell*, int>(&GJRequestCell::updateBGColor));
    gjrequestcell.def("updateBGColor", pybind::overload_cast<pybind::function>(&GJRequestCell::updateBGColor));
    gjrequestcell.def("updateBGColorO", [](GJRequestCell* self, int index) { return GJRequestCell::updateBGColorO(self, index); });
    gjrequestcell.attr("updateBGColorA") = GJRequestCell::updateBGColorA;
    gjrequestcell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJRequestCell::updateBGColorA, GJRequestCell::updateBGColorH, (LPVOID*)&GJRequestCell::updateBGColorO_);

    auto gjrewarddelegate = pybind::class_<GJRewardDelegate>(m, "GJRewardDelegate");
    auto gjrewarditem = pybind::class_<GJRewardItem, cocos2d::CCObject>(m, "GJRewardItem");
    auto gjrewardobject = pybind::class_<GJRewardObject, cocos2d::CCObject>(m, "GJRewardObject");
    auto gjrobotsprite = pybind::class_<GJRobotSprite, CCAnimatedSprite>(m, "GJRobotSprite");
    gjrobotsprite.def("init", pybind::overload_cast<GJRobotSprite*>(&GJRobotSprite::init));
    gjrobotsprite.def("init", pybind::overload_cast<pybind::function>(&GJRobotSprite::init));
    gjrobotsprite.def("initO", [](GJRobotSprite* self) { return GJRobotSprite::initO(self); });
    gjrobotsprite.attr("initA") = GJRobotSprite::initA;
    gjrobotsprite.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::initA, GJRobotSprite::initH, (LPVOID*)&GJRobotSprite::initO_);

    gjrobotsprite.def("setOpacity", pybind::overload_cast<GJRobotSprite*, unsigned char>(&GJRobotSprite::setOpacity));
    gjrobotsprite.def("setOpacity", pybind::overload_cast<pybind::function>(&GJRobotSprite::setOpacity));
    gjrobotsprite.def("setOpacityO", [](GJRobotSprite* self, unsigned char p0) { return GJRobotSprite::setOpacityO(self, p0); });
    gjrobotsprite.attr("setOpacityA") = GJRobotSprite::setOpacityA;
    gjrobotsprite.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::setOpacityA, GJRobotSprite::setOpacityH, (LPVOID*)&GJRobotSprite::setOpacityO_);

    gjrobotsprite.def("hideSecondary", pybind::overload_cast<GJRobotSprite*>(&GJRobotSprite::hideSecondary));
    gjrobotsprite.def("hideSecondary", pybind::overload_cast<pybind::function>(&GJRobotSprite::hideSecondary));
    gjrobotsprite.def("hideSecondaryO", [](GJRobotSprite* self) { return GJRobotSprite::hideSecondaryO(self); });
    gjrobotsprite.attr("hideSecondaryA") = GJRobotSprite::hideSecondaryA;
    gjrobotsprite.attr("hideSecondaryN") = "hideSecondary";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::hideSecondaryA, GJRobotSprite::hideSecondaryH, (LPVOID*)&GJRobotSprite::hideSecondaryO_);

    gjrobotsprite.def("create", pybind::overload_cast<>(&GJRobotSprite::create));
    gjrobotsprite.def("create", pybind::overload_cast<pybind::function>(&GJRobotSprite::create));
    gjrobotsprite.def("createO", []() { return GJRobotSprite::createO(); });
    gjrobotsprite.attr("createA") = GJRobotSprite::createA;
    gjrobotsprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::createA, GJRobotSprite::createH, (LPVOID*)&GJRobotSprite::createO_);

    gjrobotsprite.def("updateColor02", pybind::overload_cast<GJRobotSprite*, cocos2d::_ccColor3B>(&GJRobotSprite::updateColor02));
    gjrobotsprite.def("updateColor02", pybind::overload_cast<pybind::function>(&GJRobotSprite::updateColor02));
    gjrobotsprite.def("updateColor02O", [](GJRobotSprite* self, cocos2d::_ccColor3B p0) { return GJRobotSprite::updateColor02O(self, p0); });
    gjrobotsprite.attr("updateColor02A") = GJRobotSprite::updateColor02A;
    gjrobotsprite.attr("updateColor02N") = "updateColor02";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::updateColor02A, GJRobotSprite::updateColor02H, (LPVOID*)&GJRobotSprite::updateColor02O_);

    gjrobotsprite.def("updateFrame", pybind::overload_cast<GJRobotSprite*, int>(&GJRobotSprite::updateFrame));
    gjrobotsprite.def("updateFrame", pybind::overload_cast<pybind::function>(&GJRobotSprite::updateFrame));
    gjrobotsprite.def("updateFrameO", [](GJRobotSprite* self, int p0) { return GJRobotSprite::updateFrameO(self, p0); });
    gjrobotsprite.attr("updateFrameA") = GJRobotSprite::updateFrameA;
    gjrobotsprite.attr("updateFrameN") = "updateFrame";
    cinnamon::hooks::hookCinnamon((PVOID)GJRobotSprite::updateFrameA, GJRobotSprite::updateFrameH, (LPVOID*)&GJRobotSprite::updateFrameO_);

    auto gjrotationcontrol = pybind::class_<GJRotationControl, cocos2d::CCLayer>(m, "GJRotationControl");
    gjrotationcontrol.def("updateSliderPosition", pybind::overload_cast<GJRotationControl*, cocos2d::CCPoint>(&GJRotationControl::updateSliderPosition));
    gjrotationcontrol.def("updateSliderPosition", pybind::overload_cast<pybind::function>(&GJRotationControl::updateSliderPosition));
    gjrotationcontrol.def("updateSliderPositionO", [](GJRotationControl* self, cocos2d::CCPoint pos) { return GJRotationControl::updateSliderPositionO(self, pos); });
    gjrotationcontrol.attr("updateSliderPositionA") = GJRotationControl::updateSliderPositionA;
    gjrotationcontrol.attr("updateSliderPositionN") = "updateSliderPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GJRotationControl::updateSliderPositionA, GJRotationControl::updateSliderPositionH, (LPVOID*)&GJRotationControl::updateSliderPositionO_);

    auto gjscalecontrol = pybind::class_<GJScaleControl, cocos2d::CCLayer>(m, "GJScaleControl");
    gjscalecontrol.def("init", pybind::overload_cast<GJScaleControl*>(&GJScaleControl::init));
    gjscalecontrol.def("init", pybind::overload_cast<pybind::function>(&GJScaleControl::init));
    gjscalecontrol.def("initO", [](GJScaleControl* self) { return GJScaleControl::initO(self); });
    gjscalecontrol.attr("initA") = GJScaleControl::initA;
    gjscalecontrol.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJScaleControl::initA, GJScaleControl::initH, (LPVOID*)&GJScaleControl::initO_);

    gjscalecontrol.def("updateLabel", pybind::overload_cast<GJScaleControl*, float>(&GJScaleControl::updateLabel));
    gjscalecontrol.def("updateLabel", pybind::overload_cast<pybind::function>(&GJScaleControl::updateLabel));
    gjscalecontrol.def("updateLabelO", [](GJScaleControl* self, float value) { return GJScaleControl::updateLabelO(self, value); });
    gjscalecontrol.attr("updateLabelA") = GJScaleControl::updateLabelA;
    gjscalecontrol.attr("updateLabelN") = "updateLabel";
    cinnamon::hooks::hookCinnamon((PVOID)GJScaleControl::updateLabelA, GJScaleControl::updateLabelH, (LPVOID*)&GJScaleControl::updateLabelO_);

    gjscalecontrol.def("loadValues", pybind::overload_cast<GJScaleControl*, GameObject*, cocos2d::CCArray*>(&GJScaleControl::loadValues));
    gjscalecontrol.def("loadValues", pybind::overload_cast<pybind::function>(&GJScaleControl::loadValues));
    gjscalecontrol.def("loadValuesO", [](GJScaleControl* self, GameObject* obj, cocos2d::CCArray* objs) { return GJScaleControl::loadValuesO(self, obj, objs); });
    gjscalecontrol.attr("loadValuesA") = GJScaleControl::loadValuesA;
    gjscalecontrol.attr("loadValuesN") = "loadValues";
    cinnamon::hooks::hookCinnamon((PVOID)GJScaleControl::loadValuesA, GJScaleControl::loadValuesH, (LPVOID*)&GJScaleControl::loadValuesO_);

    auto gjscorecell = pybind::class_<GJScoreCell, TableViewCell>(m, "GJScoreCell");
    gjscorecell.def("FLAlert_Clicked", pybind::overload_cast<GJScoreCell*, FLAlertLayer*, bool>(&GJScoreCell::FLAlert_Clicked));
    gjscorecell.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&GJScoreCell::FLAlert_Clicked));
    gjscorecell.def("FLAlert_ClickedO", [](GJScoreCell* self, FLAlertLayer* p0, bool p1) { return GJScoreCell::FLAlert_ClickedO(self, p0, p1); });
    gjscorecell.attr("FLAlert_ClickedA") = GJScoreCell::FLAlert_ClickedA;
    gjscorecell.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)GJScoreCell::FLAlert_ClickedA, GJScoreCell::FLAlert_ClickedH, (LPVOID*)&GJScoreCell::FLAlert_ClickedO_);

    gjscorecell.def("loadFromScore", pybind::overload_cast<GJScoreCell*, GJUserScore*>(&GJScoreCell::loadFromScore));
    gjscorecell.def("loadFromScore", pybind::overload_cast<pybind::function>(&GJScoreCell::loadFromScore));
    gjscorecell.def("loadFromScoreO", [](GJScoreCell* self, GJUserScore* score) { return GJScoreCell::loadFromScoreO(self, score); });
    gjscorecell.attr("loadFromScoreA") = GJScoreCell::loadFromScoreA;
    gjscorecell.attr("loadFromScoreN") = "loadFromScore";
    cinnamon::hooks::hookCinnamon((PVOID)GJScoreCell::loadFromScoreA, GJScoreCell::loadFromScoreH, (LPVOID*)&GJScoreCell::loadFromScoreO_);

    gjscorecell.def("onViewProfile", pybind::overload_cast<GJScoreCell*, cocos2d::CCObject*>(&GJScoreCell::onViewProfile));
    gjscorecell.def("onViewProfile", pybind::overload_cast<pybind::function>(&GJScoreCell::onViewProfile));
    gjscorecell.def("onViewProfileO", [](GJScoreCell* self, cocos2d::CCObject* sender) { return GJScoreCell::onViewProfileO(self, sender); });
    gjscorecell.attr("onViewProfileA") = GJScoreCell::onViewProfileA;
    gjscorecell.attr("onViewProfileN") = "onViewProfile";
    cinnamon::hooks::hookCinnamon((PVOID)GJScoreCell::onViewProfileA, GJScoreCell::onViewProfileH, (LPVOID*)&GJScoreCell::onViewProfileO_);

    gjscorecell.def("updateBGColor", pybind::overload_cast<GJScoreCell*, int>(&GJScoreCell::updateBGColor));
    gjscorecell.def("updateBGColor", pybind::overload_cast<pybind::function>(&GJScoreCell::updateBGColor));
    gjscorecell.def("updateBGColorO", [](GJScoreCell* self, int index) { return GJScoreCell::updateBGColorO(self, index); });
    gjscorecell.attr("updateBGColorA") = GJScoreCell::updateBGColorA;
    gjscorecell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJScoreCell::updateBGColorA, GJScoreCell::updateBGColorH, (LPVOID*)&GJScoreCell::updateBGColorO_);

    auto gjsearchobject = pybind::class_<GJSearchObject, cocos2d::CCNode>(m, "GJSearchObject");
    gjsearchobject.def("create", pybind::overload_cast<SearchType>(&GJSearchObject::create));
    gjsearchobject.def("create", pybind::overload_cast<pybind::function>(&GJSearchObject::create));
    gjsearchobject.def("createO", [](SearchType nID) { return GJSearchObject::createO(nID); });
    gjsearchobject.attr("createA") = GJSearchObject::createA;
    gjsearchobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJSearchObject::createA, GJSearchObject::createH, (LPVOID*)&GJSearchObject::createO_);

    gjsearchobject.def("create", pybind::overload_cast<SearchType, gd::string>(&GJSearchObject::create));
    gjsearchobject.def("createFromKey", pybind::overload_cast<const char*>(&GJSearchObject::createFromKey));
    gjsearchobject.def("createFromKey", pybind::overload_cast<pybind::function>(&GJSearchObject::createFromKey));
    gjsearchobject.def("createFromKeyO", [](const char* key) { return GJSearchObject::createFromKeyO(key); });
    gjsearchobject.attr("createFromKeyA") = GJSearchObject::createFromKeyA;
    gjsearchobject.attr("createFromKeyN") = "createFromKey";
    cinnamon::hooks::hookCinnamon((PVOID)GJSearchObject::createFromKeyA, GJSearchObject::createFromKeyH, (LPVOID*)&GJSearchObject::createFromKeyO_);

    auto gjspecialcolorselect = pybind::class_<GJSpecialColorSelect>(m, "GJSpecialColorSelect");
    auto gjspecialcolorselectdelegate = pybind::class_<GJSpecialColorSelectDelegate>(m, "GJSpecialColorSelectDelegate");
    auto gjspidersprite = pybind::class_<GJSpiderSprite, GJRobotSprite>(m, "GJSpiderSprite");
    gjspidersprite.def("init", pybind::overload_cast<GJSpiderSprite*>(&GJSpiderSprite::init));
    gjspidersprite.def("init", pybind::overload_cast<pybind::function>(&GJSpiderSprite::init));
    gjspidersprite.def("initO", [](GJSpiderSprite* self) { return GJSpiderSprite::initO(self); });
    gjspidersprite.attr("initA") = GJSpiderSprite::initA;
    gjspidersprite.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJSpiderSprite::initA, GJSpiderSprite::initH, (LPVOID*)&GJSpiderSprite::initO_);

    gjspidersprite.def("create", pybind::overload_cast<>(&GJSpiderSprite::create));
    gjspidersprite.def("create", pybind::overload_cast<pybind::function>(&GJSpiderSprite::create));
    gjspidersprite.def("createO", []() { return GJSpiderSprite::createO(); });
    gjspidersprite.attr("createA") = GJSpiderSprite::createA;
    gjspidersprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJSpiderSprite::createA, GJSpiderSprite::createH, (LPVOID*)&GJSpiderSprite::createO_);

    auto gjspritecolor = pybind::class_<GJSpriteColor, cocos2d::CCNode>(m, "GJSpriteColor");
    auto gjusercell = pybind::class_<GJUserCell, TableViewCell>(m, "GJUserCell");
    gjusercell.def("updateBGColor", pybind::overload_cast<GJUserCell*, int>(&GJUserCell::updateBGColor));
    gjusercell.def("updateBGColor", pybind::overload_cast<pybind::function>(&GJUserCell::updateBGColor));
    gjusercell.def("updateBGColorO", [](GJUserCell* self, int index) { return GJUserCell::updateBGColorO(self, index); });
    gjusercell.attr("updateBGColorA") = GJUserCell::updateBGColorA;
    gjusercell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserCell::updateBGColorA, GJUserCell::updateBGColorH, (LPVOID*)&GJUserCell::updateBGColorO_);

    auto gjusermessage = pybind::class_<GJUserMessage, cocos2d::CCNode>(m, "GJUserMessage");
    gjusermessage.def("init", pybind::overload_cast<GJUserMessage*>(&GJUserMessage::init));
    gjusermessage.def("init", pybind::overload_cast<pybind::function>(&GJUserMessage::init));
    gjusermessage.def("initO", [](GJUserMessage* self) { return GJUserMessage::initO(self); });
    gjusermessage.attr("initA") = GJUserMessage::initA;
    gjusermessage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserMessage::initA, GJUserMessage::initH, (LPVOID*)&GJUserMessage::initO_);

    auto gjuserscore = pybind::class_<GJUserScore, cocos2d::CCNode>(m, "GJUserScore");
    gjuserscore.def("create", pybind::overload_cast<cocos2d::CCDictionary*>(&GJUserScore::create));
    gjuserscore.def("create", pybind::overload_cast<pybind::function>(&GJUserScore::create));
    gjuserscore.def("createO", [](cocos2d::CCDictionary* p0) { return GJUserScore::createO(p0); });
    gjuserscore.attr("createA") = GJUserScore::createA;
    gjuserscore.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserScore::createA, GJUserScore::createH, (LPVOID*)&GJUserScore::createO_);

    auto gmanager = pybind::class_<GManager, cocos2d::CCNode>(m, "GManager");
    gmanager.def("setup", pybind::overload_cast<GManager*>(&GManager::setup));
    gmanager.def("setup", pybind::overload_cast<pybind::function>(&GManager::setup));
    gmanager.def("setupO", [](GManager* self) { return GManager::setupO(self); });
    gmanager.attr("setupA") = GManager::setupA;
    gmanager.attr("setupN") = "setup";
    cinnamon::hooks::hookCinnamon((PVOID)GManager::setupA, GManager::setupH, (LPVOID*)&GManager::setupO_);

    gmanager.def("saveGMTo", pybind::overload_cast<GManager*, gd::string>(&GManager::saveGMTo));
    gmanager.def("saveGMTo", pybind::overload_cast<pybind::function>(&GManager::saveGMTo));
    gmanager.def("saveGMToO", [](GManager* self, gd::string p0) { return GManager::saveGMToO(self, p0); });
    gmanager.attr("saveGMToA") = GManager::saveGMToA;
    gmanager.attr("saveGMToN") = "saveGMTo";
    cinnamon::hooks::hookCinnamon((PVOID)GManager::saveGMToA, GManager::saveGMToH, (LPVOID*)&GManager::saveGMToO_);

    auto googleplaydelegate = pybind::class_<GooglePlayDelegate>(m, "GooglePlayDelegate");
    auto googleplaymanager = pybind::class_<GooglePlayManager, cocos2d::CCNode>(m, "GooglePlayManager");
    googleplaymanager.def("init", pybind::overload_cast<GooglePlayManager*>(&GooglePlayManager::init));
    googleplaymanager.def("init", pybind::overload_cast<pybind::function>(&GooglePlayManager::init));
    googleplaymanager.def("initO", [](GooglePlayManager* self) { return GooglePlayManager::initO(self); });
    googleplaymanager.attr("initA") = GooglePlayManager::initA;
    googleplaymanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GooglePlayManager::initA, GooglePlayManager::initH, (LPVOID*)&GooglePlayManager::initO_);

    googleplaymanager.def("sharedState", pybind::overload_cast<>(&GooglePlayManager::sharedState));
    googleplaymanager.def("sharedState", pybind::overload_cast<pybind::function>(&GooglePlayManager::sharedState));
    googleplaymanager.def("sharedStateO", []() { return GooglePlayManager::sharedStateO(); });
    googleplaymanager.attr("sharedStateA") = GooglePlayManager::sharedStateA;
    googleplaymanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GooglePlayManager::sharedStateA, GooglePlayManager::sharedStateH, (LPVOID*)&GooglePlayManager::sharedStateO_);

    auto gamelevelmanager = pybind::class_<GameLevelManager, cocos2d::CCNode>(m, "GameLevelManager");
    gamelevelmanager.def("createAndGetScores", pybind::overload_cast<GameLevelManager*, gd::string, GJScoreType>(&GameLevelManager::createAndGetScores));
    gamelevelmanager.def("createAndGetScores", pybind::overload_cast<pybind::function>(&GameLevelManager::createAndGetScores));
    gamelevelmanager.def("createAndGetScoresO", [](GameLevelManager* self, gd::string p0, GJScoreType p1) { return GameLevelManager::createAndGetScoresO(self, p0, p1); });
    gamelevelmanager.attr("createAndGetScoresA") = GameLevelManager::createAndGetScoresA;
    gamelevelmanager.attr("createAndGetScoresN") = "createAndGetScores";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::createAndGetScoresA, GameLevelManager::createAndGetScoresH, (LPVOID*)&GameLevelManager::createAndGetScoresO_);

    gamelevelmanager.def("createNewLevel", pybind::overload_cast<GameLevelManager*>(&GameLevelManager::createNewLevel));
    gamelevelmanager.def("createNewLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::createNewLevel));
    gamelevelmanager.def("createNewLevelO", [](GameLevelManager* self) { return GameLevelManager::createNewLevelO(self); });
    gamelevelmanager.attr("createNewLevelA") = GameLevelManager::createNewLevelA;
    gamelevelmanager.attr("createNewLevelN") = "createNewLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::createNewLevelA, GameLevelManager::createNewLevelH, (LPVOID*)&GameLevelManager::createNewLevelO_);

    gamelevelmanager.def("sharedState", pybind::overload_cast<>(&GameLevelManager::sharedState));
    gamelevelmanager.def("sharedState", pybind::overload_cast<pybind::function>(&GameLevelManager::sharedState));
    gamelevelmanager.def("sharedStateO", []() { return GameLevelManager::sharedStateO(); });
    gamelevelmanager.attr("sharedStateA") = GameLevelManager::sharedStateA;
    gamelevelmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::sharedStateA, GameLevelManager::sharedStateH, (LPVOID*)&GameLevelManager::sharedStateO_);

    gamelevelmanager.def("limitSavedLevels", pybind::overload_cast<GameLevelManager*>(&GameLevelManager::limitSavedLevels));
    gamelevelmanager.def("limitSavedLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::limitSavedLevels));
    gamelevelmanager.def("limitSavedLevelsO", [](GameLevelManager* self) { return GameLevelManager::limitSavedLevelsO(self); });
    gamelevelmanager.attr("limitSavedLevelsA") = GameLevelManager::limitSavedLevelsA;
    gamelevelmanager.attr("limitSavedLevelsN") = "limitSavedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::limitSavedLevelsA, GameLevelManager::limitSavedLevelsH, (LPVOID*)&GameLevelManager::limitSavedLevelsO_);

    gamelevelmanager.def("getCompletedLevels", pybind::overload_cast<GameLevelManager*, bool>(&GameLevelManager::getCompletedLevels));
    gamelevelmanager.def("getCompletedLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::getCompletedLevels));
    gamelevelmanager.def("getCompletedLevelsO", [](GameLevelManager* self, bool newFilter) { return GameLevelManager::getCompletedLevelsO(self, newFilter); });
    gamelevelmanager.attr("getCompletedLevelsA") = GameLevelManager::getCompletedLevelsA;
    gamelevelmanager.attr("getCompletedLevelsN") = "getCompletedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getCompletedLevelsA, GameLevelManager::getCompletedLevelsH, (LPVOID*)&GameLevelManager::getCompletedLevelsO_);

    gamelevelmanager.def("getGJUserInfo", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::getGJUserInfo));
    gamelevelmanager.def("getGJUserInfo", pybind::overload_cast<pybind::function>(&GameLevelManager::getGJUserInfo));
    gamelevelmanager.def("getGJUserInfoO", [](GameLevelManager* self, int p0) { return GameLevelManager::getGJUserInfoO(self, p0); });
    gamelevelmanager.attr("getGJUserInfoA") = GameLevelManager::getGJUserInfoA;
    gamelevelmanager.attr("getGJUserInfoN") = "getGJUserInfo";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getGJUserInfoA, GameLevelManager::getGJUserInfoH, (LPVOID*)&GameLevelManager::getGJUserInfoO_);

    gamelevelmanager.def("getLevelLeaderboard", pybind::overload_cast<GameLevelManager*, GJGameLevel*, LevelLeaderboardType>(&GameLevelManager::getLevelLeaderboard));
    gamelevelmanager.def("getLevelLeaderboard", pybind::overload_cast<pybind::function>(&GameLevelManager::getLevelLeaderboard));
    gamelevelmanager.def("getLevelLeaderboardO", [](GameLevelManager* self, GJGameLevel* level, LevelLeaderboardType leaderboardType) { return GameLevelManager::getLevelLeaderboardO(self, level, leaderboardType); });
    gamelevelmanager.attr("getLevelLeaderboardA") = GameLevelManager::getLevelLeaderboardA;
    gamelevelmanager.attr("getLevelLeaderboardN") = "getLevelLeaderboard";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getLevelLeaderboardA, GameLevelManager::getLevelLeaderboardH, (LPVOID*)&GameLevelManager::getLevelLeaderboardO_);

    gamelevelmanager.def("getOnlineLevels", pybind::overload_cast<GameLevelManager*, GJSearchObject*>(&GameLevelManager::getOnlineLevels));
    gamelevelmanager.def("getOnlineLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::getOnlineLevels));
    gamelevelmanager.def("getOnlineLevelsO", [](GameLevelManager* self, GJSearchObject* p0) { return GameLevelManager::getOnlineLevelsO(self, p0); });
    gamelevelmanager.attr("getOnlineLevelsA") = GameLevelManager::getOnlineLevelsA;
    gamelevelmanager.attr("getOnlineLevelsN") = "getOnlineLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getOnlineLevelsA, GameLevelManager::getOnlineLevelsH, (LPVOID*)&GameLevelManager::getOnlineLevelsO_);

    gamelevelmanager.def("getSavedLevels", pybind::overload_cast<GameLevelManager*, bool, int>(&GameLevelManager::getSavedLevels));
    gamelevelmanager.def("getSavedLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::getSavedLevels));
    gamelevelmanager.def("getSavedLevelsO", [](GameLevelManager* self, bool favorite, int levelFolder) { return GameLevelManager::getSavedLevelsO(self, favorite, levelFolder); });
    gamelevelmanager.attr("getSavedLevelsA") = GameLevelManager::getSavedLevelsA;
    gamelevelmanager.attr("getSavedLevelsN") = "getSavedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getSavedLevelsA, GameLevelManager::getSavedLevelsH, (LPVOID*)&GameLevelManager::getSavedLevelsO_);

    gamelevelmanager.def("getStoredOnlineLevels", pybind::overload_cast<GameLevelManager*, char const*>(&GameLevelManager::getStoredOnlineLevels));
    gamelevelmanager.def("getStoredOnlineLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::getStoredOnlineLevels));
    gamelevelmanager.def("getStoredOnlineLevelsO", [](GameLevelManager* self, char const* p0) { return GameLevelManager::getStoredOnlineLevelsO(self, p0); });
    gamelevelmanager.attr("getStoredOnlineLevelsA") = GameLevelManager::getStoredOnlineLevelsA;
    gamelevelmanager.attr("getStoredOnlineLevelsN") = "getStoredOnlineLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getStoredOnlineLevelsA, GameLevelManager::getStoredOnlineLevelsH, (LPVOID*)&GameLevelManager::getStoredOnlineLevelsO_);

    gamelevelmanager.def("makeTimeStamp", pybind::overload_cast<GameLevelManager*, char const*>(&GameLevelManager::makeTimeStamp));
    gamelevelmanager.def("makeTimeStamp", pybind::overload_cast<pybind::function>(&GameLevelManager::makeTimeStamp));
    gamelevelmanager.def("makeTimeStampO", [](GameLevelManager* self, char const* p0) { return GameLevelManager::makeTimeStampO(self, p0); });
    gamelevelmanager.attr("makeTimeStampA") = GameLevelManager::makeTimeStampA;
    gamelevelmanager.attr("makeTimeStampN") = "makeTimeStamp";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::makeTimeStampA, GameLevelManager::makeTimeStampH, (LPVOID*)&GameLevelManager::makeTimeStampO_);

    gamelevelmanager.def("getMainLevel", pybind::overload_cast<GameLevelManager*, int, bool>(&GameLevelManager::getMainLevel));
    gamelevelmanager.def("getMainLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::getMainLevel));
    gamelevelmanager.def("getMainLevelO", [](GameLevelManager* self, int id, bool unk) { return GameLevelManager::getMainLevelO(self, id, unk); });
    gamelevelmanager.attr("getMainLevelA") = GameLevelManager::getMainLevelA;
    gamelevelmanager.attr("getMainLevelN") = "getMainLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getMainLevelA, GameLevelManager::getMainLevelH, (LPVOID*)&GameLevelManager::getMainLevelO_);

    gamelevelmanager.def("hasLikedItemFullCheck", pybind::overload_cast<GameLevelManager*, LikeItemType, int, int>(&GameLevelManager::hasLikedItemFullCheck));
    gamelevelmanager.def("hasLikedItemFullCheck", pybind::overload_cast<pybind::function>(&GameLevelManager::hasLikedItemFullCheck));
    gamelevelmanager.def("hasLikedItemFullCheckO", [](GameLevelManager* self, LikeItemType type, int itemID, int commentSourceID) { return GameLevelManager::hasLikedItemFullCheckO(self, type, itemID, commentSourceID); });
    gamelevelmanager.attr("hasLikedItemFullCheckA") = GameLevelManager::hasLikedItemFullCheckA;
    gamelevelmanager.attr("hasLikedItemFullCheckN") = "hasLikedItemFullCheck";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::hasLikedItemFullCheckA, GameLevelManager::hasLikedItemFullCheckH, (LPVOID*)&GameLevelManager::hasLikedItemFullCheckO_);

    gamelevelmanager.def("ProcessHttpRequest", pybind::overload_cast<GameLevelManager*, gd::string, gd::string, gd::string, GJHttpType>(&GameLevelManager::ProcessHttpRequest));
    gamelevelmanager.def("ProcessHttpRequest", pybind::overload_cast<pybind::function>(&GameLevelManager::ProcessHttpRequest));
    gamelevelmanager.def("ProcessHttpRequestO", [](GameLevelManager* self, gd::string p0, gd::string p1, gd::string p2, GJHttpType p3) { return GameLevelManager::ProcessHttpRequestO(self, p0, p1, p2, p3); });
    gamelevelmanager.attr("ProcessHttpRequestA") = GameLevelManager::ProcessHttpRequestA;
    gamelevelmanager.attr("ProcessHttpRequestN") = "ProcessHttpRequest";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::ProcessHttpRequestA, GameLevelManager::ProcessHttpRequestH, (LPVOID*)&GameLevelManager::ProcessHttpRequestO_);

    gamelevelmanager.def("responseToDict", pybind::overload_cast<GameLevelManager*, gd::string, bool>(&GameLevelManager::responseToDict));
    gamelevelmanager.def("responseToDict", pybind::overload_cast<pybind::function>(&GameLevelManager::responseToDict));
    gamelevelmanager.def("responseToDictO", [](GameLevelManager* self, gd::string response, bool comment) { return GameLevelManager::responseToDictO(self, response, comment); });
    gamelevelmanager.attr("responseToDictA") = GameLevelManager::responseToDictA;
    gamelevelmanager.attr("responseToDictN") = "responseToDict";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::responseToDictA, GameLevelManager::responseToDictH, (LPVOID*)&GameLevelManager::responseToDictO_);

    gamelevelmanager.def("storeUserNames", pybind::overload_cast<GameLevelManager*, gd::string>(&GameLevelManager::storeUserNames));
    gamelevelmanager.def("storeUserNames", pybind::overload_cast<pybind::function>(&GameLevelManager::storeUserNames));
    gamelevelmanager.def("storeUserNamesO", [](GameLevelManager* self, gd::string p0) { return GameLevelManager::storeUserNamesO(self, p0); });
    gamelevelmanager.attr("storeUserNamesA") = GameLevelManager::storeUserNamesA;
    gamelevelmanager.attr("storeUserNamesN") = "storeUserNames";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::storeUserNamesA, GameLevelManager::storeUserNamesH, (LPVOID*)&GameLevelManager::storeUserNamesO_);

    gamelevelmanager.def("storeUserName", pybind::overload_cast<GameLevelManager*, int, int, gd::string>(&GameLevelManager::storeUserName));
    gamelevelmanager.def("storeUserName", pybind::overload_cast<pybind::function>(&GameLevelManager::storeUserName));
    gamelevelmanager.def("storeUserNameO", [](GameLevelManager* self, int userID, int accountID, gd::string str) { return GameLevelManager::storeUserNameO(self, userID, accountID, str); });
    gamelevelmanager.attr("storeUserNameA") = GameLevelManager::storeUserNameA;
    gamelevelmanager.attr("storeUserNameN") = "storeUserName";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::storeUserNameA, GameLevelManager::storeUserNameH, (LPVOID*)&GameLevelManager::storeUserNameO_);

    gamelevelmanager.def("userNameForUserID", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::userNameForUserID));
    gamelevelmanager.def("userNameForUserID", pybind::overload_cast<pybind::function>(&GameLevelManager::userNameForUserID));
    gamelevelmanager.def("userNameForUserIDO", [](GameLevelManager* self, int id) { return GameLevelManager::userNameForUserIDO(self, id); });
    gamelevelmanager.attr("userNameForUserIDA") = GameLevelManager::userNameForUserIDA;
    gamelevelmanager.attr("userNameForUserIDN") = "userNameForUserID";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::userNameForUserIDA, GameLevelManager::userNameForUserIDH, (LPVOID*)&GameLevelManager::userNameForUserIDO_);

    gamelevelmanager.def("updateUserScore", pybind::overload_cast<GameLevelManager*>(&GameLevelManager::updateUserScore));
    gamelevelmanager.def("updateUserScore", pybind::overload_cast<pybind::function>(&GameLevelManager::updateUserScore));
    gamelevelmanager.def("updateUserScoreO", [](GameLevelManager* self) { return GameLevelManager::updateUserScoreO(self); });
    gamelevelmanager.attr("updateUserScoreA") = GameLevelManager::updateUserScoreA;
    gamelevelmanager.attr("updateUserScoreN") = "updateUserScore";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::updateUserScoreA, GameLevelManager::updateUserScoreH, (LPVOID*)&GameLevelManager::updateUserScoreO_);

    gamelevelmanager.def("downloadLevel", pybind::overload_cast<GameLevelManager*, int, bool>(&GameLevelManager::downloadLevel));
    gamelevelmanager.def("downloadLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::downloadLevel));
    gamelevelmanager.def("downloadLevelO", [](GameLevelManager* self, int id, bool downloadData) { return GameLevelManager::downloadLevelO(self, id, downloadData); });
    gamelevelmanager.attr("downloadLevelA") = GameLevelManager::downloadLevelA;
    gamelevelmanager.attr("downloadLevelN") = "downloadLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::downloadLevelA, GameLevelManager::downloadLevelH, (LPVOID*)&GameLevelManager::downloadLevelO_);

    gamelevelmanager.def("hasDownloadedLevel", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::hasDownloadedLevel));
    gamelevelmanager.def("hasDownloadedLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::hasDownloadedLevel));
    gamelevelmanager.def("hasDownloadedLevelO", [](GameLevelManager* self, int id) { return GameLevelManager::hasDownloadedLevelO(self, id); });
    gamelevelmanager.attr("hasDownloadedLevelA") = GameLevelManager::hasDownloadedLevelA;
    gamelevelmanager.attr("hasDownloadedLevelN") = "hasDownloadedLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::hasDownloadedLevelA, GameLevelManager::hasDownloadedLevelH, (LPVOID*)&GameLevelManager::hasDownloadedLevelO_);

    gamelevelmanager.def("getSavedLevel", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::getSavedLevel));
    gamelevelmanager.def("getSavedLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::getSavedLevel));
    gamelevelmanager.def("getSavedLevelO", [](GameLevelManager* self, int id) { return GameLevelManager::getSavedLevelO(self, id); });
    gamelevelmanager.attr("getSavedLevelA") = GameLevelManager::getSavedLevelA;
    gamelevelmanager.attr("getSavedLevelN") = "getSavedLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getSavedLevelA, GameLevelManager::getSavedLevelH, (LPVOID*)&GameLevelManager::getSavedLevelO_);

    gamelevelmanager.def("saveLevel", pybind::overload_cast<GameLevelManager*, GJGameLevel*>(&GameLevelManager::saveLevel));
    gamelevelmanager.def("saveLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::saveLevel));
    gamelevelmanager.def("saveLevelO", [](GameLevelManager* self, GJGameLevel* level) { return GameLevelManager::saveLevelO(self, level); });
    gamelevelmanager.attr("saveLevelA") = GameLevelManager::saveLevelA;
    gamelevelmanager.attr("saveLevelN") = "saveLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::saveLevelA, GameLevelManager::saveLevelH, (LPVOID*)&GameLevelManager::saveLevelO_);

    gamelevelmanager.def("deleteLevel", pybind::overload_cast<GameLevelManager*, GJGameLevel*>(&GameLevelManager::deleteLevel));
    gamelevelmanager.def("deleteLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::deleteLevel));
    gamelevelmanager.def("deleteLevelO", [](GameLevelManager* self, GJGameLevel* level) { return GameLevelManager::deleteLevelO(self, level); });
    gamelevelmanager.attr("deleteLevelA") = GameLevelManager::deleteLevelA;
    gamelevelmanager.attr("deleteLevelN") = "deleteLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::deleteLevelA, GameLevelManager::deleteLevelH, (LPVOID*)&GameLevelManager::deleteLevelO_);

    gamelevelmanager.def("resetCommentTimersForLevelID", pybind::overload_cast<GameLevelManager*, int, bool>(&GameLevelManager::resetCommentTimersForLevelID));
    gamelevelmanager.def("resetCommentTimersForLevelID", pybind::overload_cast<pybind::function>(&GameLevelManager::resetCommentTimersForLevelID));
    gamelevelmanager.def("resetCommentTimersForLevelIDO", [](GameLevelManager* self, int id, bool commentHistory) { return GameLevelManager::resetCommentTimersForLevelIDO(self, id, commentHistory); });
    gamelevelmanager.attr("resetCommentTimersForLevelIDA") = GameLevelManager::resetCommentTimersForLevelIDA;
    gamelevelmanager.attr("resetCommentTimersForLevelIDN") = "resetCommentTimersForLevelID";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::resetCommentTimersForLevelIDA, GameLevelManager::resetCommentTimersForLevelIDH, (LPVOID*)&GameLevelManager::resetCommentTimersForLevelIDO_);

    gamelevelmanager.def("get", pybind::overload_cast<>(&GameLevelManager::get));
    auto gamemanager = pybind::class_<GameManager, GManager>(m, "GameManager");
    gamemanager.def("colorForIdx", pybind::overload_cast<GameManager*, int>(&GameManager::colorForIdx));
    gamemanager.def("colorForIdx", pybind::overload_cast<pybind::function>(&GameManager::colorForIdx));
    gamemanager.def("colorForIdxO", [](GameManager* self, int p0) { return GameManager::colorForIdxO(self, p0); });
    gamemanager.attr("colorForIdxA") = GameManager::colorForIdxA;
    gamemanager.attr("colorForIdxN") = "colorForIdx";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::colorForIdxA, GameManager::colorForIdxH, (LPVOID*)&GameManager::colorForIdxO_);

    gamemanager.def("fadeInMusic", pybind::overload_cast<GameManager*, const char*>(&GameManager::fadeInMusic));
    gamemanager.def("fadeInMusic", pybind::overload_cast<pybind::function>(&GameManager::fadeInMusic));
    gamemanager.def("fadeInMusicO", [](GameManager* self, const char* p0) { return GameManager::fadeInMusicO(self, p0); });
    gamemanager.attr("fadeInMusicA") = GameManager::fadeInMusicA;
    gamemanager.attr("fadeInMusicN") = "fadeInMusic";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::fadeInMusicA, GameManager::fadeInMusicH, (LPVOID*)&GameManager::fadeInMusicO_);

    gamemanager.def("getGameVariable", pybind::overload_cast<GameManager*, const char*>(&GameManager::getGameVariable));
    gamemanager.def("getGameVariable", pybind::overload_cast<pybind::function>(&GameManager::getGameVariable));
    gamemanager.def("getGameVariableO", [](GameManager* self, const char* p0) { return GameManager::getGameVariableO(self, p0); });
    gamemanager.attr("getGameVariableA") = GameManager::getGameVariableA;
    gamemanager.attr("getGameVariableN") = "getGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::getGameVariableA, GameManager::getGameVariableH, (LPVOID*)&GameManager::getGameVariableO_);

    gamemanager.def("getIntGameVariable", pybind::overload_cast<GameManager*, const char*>(&GameManager::getIntGameVariable));
    gamemanager.def("getIntGameVariable", pybind::overload_cast<pybind::function>(&GameManager::getIntGameVariable));
    gamemanager.def("getIntGameVariableO", [](GameManager* self, const char* p0) { return GameManager::getIntGameVariableO(self, p0); });
    gamemanager.attr("getIntGameVariableA") = GameManager::getIntGameVariableA;
    gamemanager.attr("getIntGameVariableN") = "getIntGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::getIntGameVariableA, GameManager::getIntGameVariableH, (LPVOID*)&GameManager::getIntGameVariableO_);

    gamemanager.def("getUGV", pybind::overload_cast<GameManager*, const char*>(&GameManager::getUGV));
    gamemanager.def("getUGV", pybind::overload_cast<pybind::function>(&GameManager::getUGV));
    gamemanager.def("getUGVO", [](GameManager* self, const char* p0) { return GameManager::getUGVO(self, p0); });
    gamemanager.attr("getUGVA") = GameManager::getUGVA;
    gamemanager.attr("getUGVN") = "getUGV";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::getUGVA, GameManager::getUGVH, (LPVOID*)&GameManager::getUGVO_);

    gamemanager.def("loadBackground", pybind::overload_cast<GameManager*, int>(&GameManager::loadBackground));
    gamemanager.def("loadBackground", pybind::overload_cast<pybind::function>(&GameManager::loadBackground));
    gamemanager.def("loadBackgroundO", [](GameManager* self, int p0) { return GameManager::loadBackgroundO(self, p0); });
    gamemanager.attr("loadBackgroundA") = GameManager::loadBackgroundA;
    gamemanager.attr("loadBackgroundN") = "loadBackground";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::loadBackgroundA, GameManager::loadBackgroundH, (LPVOID*)&GameManager::loadBackgroundO_);

    gamemanager.def("loadDeathEffect", pybind::overload_cast<GameManager*, int>(&GameManager::loadDeathEffect));
    gamemanager.def("loadDeathEffect", pybind::overload_cast<pybind::function>(&GameManager::loadDeathEffect));
    gamemanager.def("loadDeathEffectO", [](GameManager* self, int p0) { return GameManager::loadDeathEffectO(self, p0); });
    gamemanager.attr("loadDeathEffectA") = GameManager::loadDeathEffectA;
    gamemanager.attr("loadDeathEffectN") = "loadDeathEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::loadDeathEffectA, GameManager::loadDeathEffectH, (LPVOID*)&GameManager::loadDeathEffectO_);

    gamemanager.def("loadFont", pybind::overload_cast<GameManager*, int>(&GameManager::loadFont));
    gamemanager.def("loadFont", pybind::overload_cast<pybind::function>(&GameManager::loadFont));
    gamemanager.def("loadFontO", [](GameManager* self, int p0) { return GameManager::loadFontO(self, p0); });
    gamemanager.attr("loadFontA") = GameManager::loadFontA;
    gamemanager.attr("loadFontN") = "loadFont";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::loadFontA, GameManager::loadFontH, (LPVOID*)&GameManager::loadFontO_);

    gamemanager.def("loadGround", pybind::overload_cast<GameManager*, int>(&GameManager::loadGround));
    gamemanager.def("loadGround", pybind::overload_cast<pybind::function>(&GameManager::loadGround));
    gamemanager.def("loadGroundO", [](GameManager* self, int p0) { return GameManager::loadGroundO(self, p0); });
    gamemanager.attr("loadGroundA") = GameManager::loadGroundA;
    gamemanager.attr("loadGroundN") = "loadGround";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::loadGroundA, GameManager::loadGroundH, (LPVOID*)&GameManager::loadGroundO_);

    gamemanager.def("reloadAll", pybind::overload_cast<GameManager*, bool, bool, bool>(&GameManager::reloadAll));
    gamemanager.def("reloadAll", pybind::overload_cast<pybind::function>(&GameManager::reloadAll));
    gamemanager.def("reloadAllO", [](GameManager* self, bool p0, bool p1, bool p2) { return GameManager::reloadAllO(self, p0, p1, p2); });
    gamemanager.attr("reloadAllA") = GameManager::reloadAllA;
    gamemanager.attr("reloadAllN") = "reloadAll";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reloadAllA, GameManager::reloadAllH, (LPVOID*)&GameManager::reloadAllO_);

    gamemanager.def("reloadAllStep2", pybind::overload_cast<GameManager*>(&GameManager::reloadAllStep2));
    gamemanager.def("reloadAllStep2", pybind::overload_cast<pybind::function>(&GameManager::reloadAllStep2));
    gamemanager.def("reloadAllStep2O", [](GameManager* self) { return GameManager::reloadAllStep2O(self); });
    gamemanager.attr("reloadAllStep2A") = GameManager::reloadAllStep2A;
    gamemanager.attr("reloadAllStep2N") = "reloadAllStep2";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reloadAllStep2A, GameManager::reloadAllStep2H, (LPVOID*)&GameManager::reloadAllStep2O_);

    gamemanager.def("reloadAllStep3", pybind::overload_cast<GameManager*>(&GameManager::reloadAllStep3));
    gamemanager.def("reloadAllStep3", pybind::overload_cast<pybind::function>(&GameManager::reloadAllStep3));
    gamemanager.def("reloadAllStep3O", [](GameManager* self) { return GameManager::reloadAllStep3O(self); });
    gamemanager.attr("reloadAllStep3A") = GameManager::reloadAllStep3A;
    gamemanager.attr("reloadAllStep3N") = "reloadAllStep3";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reloadAllStep3A, GameManager::reloadAllStep3H, (LPVOID*)&GameManager::reloadAllStep3O_);

    gamemanager.def("reloadAllStep4", pybind::overload_cast<GameManager*>(&GameManager::reloadAllStep4));
    gamemanager.def("reloadAllStep4", pybind::overload_cast<pybind::function>(&GameManager::reloadAllStep4));
    gamemanager.def("reloadAllStep4O", [](GameManager* self) { return GameManager::reloadAllStep4O(self); });
    gamemanager.attr("reloadAllStep4A") = GameManager::reloadAllStep4A;
    gamemanager.attr("reloadAllStep4N") = "reloadAllStep4";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reloadAllStep4A, GameManager::reloadAllStep4H, (LPVOID*)&GameManager::reloadAllStep4O_);

    gamemanager.def("reloadAllStep5", pybind::overload_cast<GameManager*>(&GameManager::reloadAllStep5));
    gamemanager.def("reloadAllStep5", pybind::overload_cast<pybind::function>(&GameManager::reloadAllStep5));
    gamemanager.def("reloadAllStep5O", [](GameManager* self) { return GameManager::reloadAllStep5O(self); });
    gamemanager.attr("reloadAllStep5A") = GameManager::reloadAllStep5A;
    gamemanager.attr("reloadAllStep5N") = "reloadAllStep5";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reloadAllStep5A, GameManager::reloadAllStep5H, (LPVOID*)&GameManager::reloadAllStep5O_);

    gamemanager.def("setGameVariable", pybind::overload_cast<GameManager*, const char*, bool>(&GameManager::setGameVariable));
    gamemanager.def("setGameVariable", pybind::overload_cast<pybind::function>(&GameManager::setGameVariable));
    gamemanager.def("setGameVariableO", [](GameManager* self, const char* p0, bool p1) { return GameManager::setGameVariableO(self, p0, p1); });
    gamemanager.attr("setGameVariableA") = GameManager::setGameVariableA;
    gamemanager.attr("setGameVariableN") = "setGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setGameVariableA, GameManager::setGameVariableH, (LPVOID*)&GameManager::setGameVariableO_);

    gamemanager.def("setIntGameVariable", pybind::overload_cast<GameManager*, const char*, int>(&GameManager::setIntGameVariable));
    gamemanager.def("setIntGameVariable", pybind::overload_cast<pybind::function>(&GameManager::setIntGameVariable));
    gamemanager.def("setIntGameVariableO", [](GameManager* self, const char* p0, int p1) { return GameManager::setIntGameVariableO(self, p0, p1); });
    gamemanager.attr("setIntGameVariableA") = GameManager::setIntGameVariableA;
    gamemanager.attr("setIntGameVariableN") = "setIntGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setIntGameVariableA, GameManager::setIntGameVariableH, (LPVOID*)&GameManager::setIntGameVariableO_);

    gamemanager.def("setUGV", pybind::overload_cast<GameManager*, char const*, bool>(&GameManager::setUGV));
    gamemanager.def("setUGV", pybind::overload_cast<pybind::function>(&GameManager::setUGV));
    gamemanager.def("setUGVO", [](GameManager* self, char const* p0, bool p1) { return GameManager::setUGVO(self, p0, p1); });
    gamemanager.attr("setUGVA") = GameManager::setUGVA;
    gamemanager.attr("setUGVN") = "setUGV";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setUGVA, GameManager::setUGVH, (LPVOID*)&GameManager::setUGVO_);

    gamemanager.def("sharedState", pybind::overload_cast<>(&GameManager::sharedState));
    gamemanager.def("sharedState", pybind::overload_cast<pybind::function>(&GameManager::sharedState));
    gamemanager.def("sharedStateO", []() { return GameManager::sharedStateO(); });
    gamemanager.attr("sharedStateA") = GameManager::sharedStateA;
    gamemanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::sharedStateA, GameManager::sharedStateH, (LPVOID*)&GameManager::sharedStateO_);

    gamemanager.def("getGTexture", pybind::overload_cast<GameManager*, int>(&GameManager::getGTexture));
    gamemanager.def("getGTexture", pybind::overload_cast<pybind::function>(&GameManager::getGTexture));
    gamemanager.def("getGTextureO", [](GameManager* self, int p0) { return GameManager::getGTextureO(self, p0); });
    gamemanager.attr("getGTextureA") = GameManager::getGTextureA;
    gamemanager.attr("getGTextureN") = "getGTexture";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::getGTextureA, GameManager::getGTextureH, (LPVOID*)&GameManager::getGTextureO_);

    gamemanager.def("init", pybind::overload_cast<GameManager*>(&GameManager::init));
    gamemanager.def("init", pybind::overload_cast<pybind::function>(&GameManager::init));
    gamemanager.def("initO", [](GameManager* self) { return GameManager::initO(self); });
    gamemanager.attr("initA") = GameManager::initA;
    gamemanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::initA, GameManager::initH, (LPVOID*)&GameManager::initO_);

    gamemanager.def("reportAchievementWithID", pybind::overload_cast<GameManager*, char const*, int, bool>(&GameManager::reportAchievementWithID));
    gamemanager.def("reportAchievementWithID", pybind::overload_cast<pybind::function>(&GameManager::reportAchievementWithID));
    gamemanager.def("reportAchievementWithIDO", [](GameManager* self, char const* p0, int p1, bool p2) { return GameManager::reportAchievementWithIDO(self, p0, p1, p2); });
    gamemanager.attr("reportAchievementWithIDA") = GameManager::reportAchievementWithIDA;
    gamemanager.attr("reportAchievementWithIDN") = "reportAchievementWithID";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::reportAchievementWithIDA, GameManager::reportAchievementWithIDH, (LPVOID*)&GameManager::reportAchievementWithIDO_);

    gamemanager.def("resolutionForKey", pybind::overload_cast<GameManager*, int>(&GameManager::resolutionForKey));
    gamemanager.def("resolutionForKey", pybind::overload_cast<pybind::function>(&GameManager::resolutionForKey));
    gamemanager.def("resolutionForKeyO", [](GameManager* self, int p0) { return GameManager::resolutionForKeyO(self, p0); });
    gamemanager.attr("resolutionForKeyA") = GameManager::resolutionForKeyA;
    gamemanager.attr("resolutionForKeyN") = "resolutionForKey";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::resolutionForKeyA, GameManager::resolutionForKeyH, (LPVOID*)&GameManager::resolutionForKeyO_);

    gamemanager.def("update", pybind::overload_cast<GameManager*, float>(&GameManager::update));
    gamemanager.def("update", pybind::overload_cast<pybind::function>(&GameManager::update));
    gamemanager.def("updateO", [](GameManager* self, float p0) { return GameManager::updateO(self, p0); });
    gamemanager.attr("updateA") = GameManager::updateA;
    gamemanager.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::updateA, GameManager::updateH, (LPVOID*)&GameManager::updateO_);

    gamemanager.def("isColorUnlocked", pybind::overload_cast<GameManager*, int, bool>(&GameManager::isColorUnlocked));
    gamemanager.def("isColorUnlocked", pybind::overload_cast<pybind::function>(&GameManager::isColorUnlocked));
    gamemanager.def("isColorUnlockedO", [](GameManager* self, int _id, bool _type) { return GameManager::isColorUnlockedO(self, _id, _type); });
    gamemanager.attr("isColorUnlockedA") = GameManager::isColorUnlockedA;
    gamemanager.attr("isColorUnlockedN") = "isColorUnlocked";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::isColorUnlockedA, GameManager::isColorUnlockedH, (LPVOID*)&GameManager::isColorUnlockedO_);

    gamemanager.def("isIconUnlocked", pybind::overload_cast<GameManager*, int, IconType>(&GameManager::isIconUnlocked));
    gamemanager.def("isIconUnlocked", pybind::overload_cast<pybind::function>(&GameManager::isIconUnlocked));
    gamemanager.def("isIconUnlockedO", [](GameManager* self, int _id, IconType _type) { return GameManager::isIconUnlockedO(self, _id, _type); });
    gamemanager.attr("isIconUnlockedA") = GameManager::isIconUnlockedA;
    gamemanager.attr("isIconUnlockedN") = "isIconUnlocked";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::isIconUnlockedA, GameManager::isIconUnlockedH, (LPVOID*)&GameManager::isIconUnlockedO_);

    gamemanager.def("toggleGameVariable", pybind::overload_cast<GameManager*, const char*>(&GameManager::toggleGameVariable));
    gamemanager.def("toggleGameVariable", pybind::overload_cast<pybind::function>(&GameManager::toggleGameVariable));
    gamemanager.def("toggleGameVariableO", [](GameManager* self, const char* key) { return GameManager::toggleGameVariableO(self, key); });
    gamemanager.attr("toggleGameVariableA") = GameManager::toggleGameVariableA;
    gamemanager.attr("toggleGameVariableN") = "toggleGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::toggleGameVariableA, GameManager::toggleGameVariableH, (LPVOID*)&GameManager::toggleGameVariableO_);

    gamemanager.def("returnToLastScene", pybind::overload_cast<GameManager*, GJGameLevel*>(&GameManager::returnToLastScene));
    gamemanager.def("returnToLastScene", pybind::overload_cast<pybind::function>(&GameManager::returnToLastScene));
    gamemanager.def("returnToLastSceneO", [](GameManager* self, GJGameLevel* level) { return GameManager::returnToLastSceneO(self, level); });
    gamemanager.attr("returnToLastSceneA") = GameManager::returnToLastSceneA;
    gamemanager.attr("returnToLastSceneN") = "returnToLastScene";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::returnToLastSceneA, GameManager::returnToLastSceneH, (LPVOID*)&GameManager::returnToLastSceneO_);

    auto gameobjectcopy = pybind::class_<GameObjectCopy, cocos2d::CCObject>(m, "GameObjectCopy");
    gameobjectcopy.def("create", pybind::overload_cast<GameObject*>(&GameObjectCopy::create));
    gameobjectcopy.def("create", pybind::overload_cast<pybind::function>(&GameObjectCopy::create));
    gameobjectcopy.def("createO", [](GameObject* p0) { return GameObjectCopy::createO(p0); });
    gameobjectcopy.attr("createA") = GameObjectCopy::createA;
    gameobjectcopy.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GameObjectCopy::createA, GameObjectCopy::createH, (LPVOID*)&GameObjectCopy::createO_);

    auto gamesoundmanager = pybind::class_<GameSoundManager, cocos2d::CCNode>(m, "GameSoundManager");
    gamesoundmanager.def("disableMetering", pybind::overload_cast<GameSoundManager*>(&GameSoundManager::disableMetering));
    gamesoundmanager.def("disableMetering", pybind::overload_cast<pybind::function>(&GameSoundManager::disableMetering));
    gamesoundmanager.def("disableMeteringO", [](GameSoundManager* self) { return GameSoundManager::disableMeteringO(self); });
    gamesoundmanager.attr("disableMeteringA") = GameSoundManager::disableMeteringA;
    gamesoundmanager.attr("disableMeteringN") = "disableMetering";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::disableMeteringA, GameSoundManager::disableMeteringH, (LPVOID*)&GameSoundManager::disableMeteringO_);

    gamesoundmanager.def("enableMetering", pybind::overload_cast<GameSoundManager*>(&GameSoundManager::enableMetering));
    gamesoundmanager.def("enableMetering", pybind::overload_cast<pybind::function>(&GameSoundManager::enableMetering));
    gamesoundmanager.def("enableMeteringO", [](GameSoundManager* self) { return GameSoundManager::enableMeteringO(self); });
    gamesoundmanager.attr("enableMeteringA") = GameSoundManager::enableMeteringA;
    gamesoundmanager.attr("enableMeteringN") = "enableMetering";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::enableMeteringA, GameSoundManager::enableMeteringH, (LPVOID*)&GameSoundManager::enableMeteringO_);

    gamesoundmanager.def("getMeteringValue", pybind::overload_cast<GameSoundManager*>(&GameSoundManager::getMeteringValue));
    gamesoundmanager.def("getMeteringValue", pybind::overload_cast<pybind::function>(&GameSoundManager::getMeteringValue));
    gamesoundmanager.def("getMeteringValueO", [](GameSoundManager* self) { return GameSoundManager::getMeteringValueO(self); });
    gamesoundmanager.attr("getMeteringValueA") = GameSoundManager::getMeteringValueA;
    gamesoundmanager.attr("getMeteringValueN") = "getMeteringValue";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::getMeteringValueA, GameSoundManager::getMeteringValueH, (LPVOID*)&GameSoundManager::getMeteringValueO_);

    gamesoundmanager.def("playBackgroundMusic", pybind::overload_cast<GameSoundManager*, gd::string, bool, bool>(&GameSoundManager::playBackgroundMusic));
    gamesoundmanager.def("playBackgroundMusic", pybind::overload_cast<pybind::function>(&GameSoundManager::playBackgroundMusic));
    gamesoundmanager.def("playBackgroundMusicO", [](GameSoundManager* self, gd::string p0, bool p1, bool p2) { return GameSoundManager::playBackgroundMusicO(self, p0, p1, p2); });
    gamesoundmanager.attr("playBackgroundMusicA") = GameSoundManager::playBackgroundMusicA;
    gamesoundmanager.attr("playBackgroundMusicN") = "playBackgroundMusic";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::playBackgroundMusicA, GameSoundManager::playBackgroundMusicH, (LPVOID*)&GameSoundManager::playBackgroundMusicO_);

    gamesoundmanager.def("playEffect", pybind::overload_cast<GameSoundManager*, gd::string, float, float, float>(&GameSoundManager::playEffect));
    gamesoundmanager.def("playEffect", pybind::overload_cast<pybind::function>(&GameSoundManager::playEffect));
    gamesoundmanager.def("playEffectO", [](GameSoundManager* self, gd::string p0, float p1, float p2, float p3) { return GameSoundManager::playEffectO(self, p0, p1, p2, p3); });
    gamesoundmanager.attr("playEffectA") = GameSoundManager::playEffectA;
    gamesoundmanager.attr("playEffectN") = "playEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::playEffectA, GameSoundManager::playEffectH, (LPVOID*)&GameSoundManager::playEffectO_);

    gamesoundmanager.def("stopBackgroundMusic", pybind::overload_cast<GameSoundManager*>(&GameSoundManager::stopBackgroundMusic));
    gamesoundmanager.def("stopBackgroundMusic", pybind::overload_cast<pybind::function>(&GameSoundManager::stopBackgroundMusic));
    gamesoundmanager.def("stopBackgroundMusicO", [](GameSoundManager* self) { return GameSoundManager::stopBackgroundMusicO(self); });
    gamesoundmanager.attr("stopBackgroundMusicA") = GameSoundManager::stopBackgroundMusicA;
    gamesoundmanager.attr("stopBackgroundMusicN") = "stopBackgroundMusic";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::stopBackgroundMusicA, GameSoundManager::stopBackgroundMusicH, (LPVOID*)&GameSoundManager::stopBackgroundMusicO_);

    gamesoundmanager.def("asynchronousSetup", pybind::overload_cast<GameSoundManager*>(&GameSoundManager::asynchronousSetup));
    gamesoundmanager.def("asynchronousSetup", pybind::overload_cast<pybind::function>(&GameSoundManager::asynchronousSetup));
    gamesoundmanager.def("asynchronousSetupO", [](GameSoundManager* self) { return GameSoundManager::asynchronousSetupO(self); });
    gamesoundmanager.attr("asynchronousSetupA") = GameSoundManager::asynchronousSetupA;
    gamesoundmanager.attr("asynchronousSetupN") = "asynchronousSetup";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::asynchronousSetupA, GameSoundManager::asynchronousSetupH, (LPVOID*)&GameSoundManager::asynchronousSetupO_);

    gamesoundmanager.def("sharedManager", pybind::overload_cast<>(&GameSoundManager::sharedManager));
    gamesoundmanager.def("sharedManager", pybind::overload_cast<pybind::function>(&GameSoundManager::sharedManager));
    gamesoundmanager.def("sharedManagerO", []() { return GameSoundManager::sharedManagerO(); });
    gamesoundmanager.attr("sharedManagerA") = GameSoundManager::sharedManagerA;
    gamesoundmanager.attr("sharedManagerN") = "sharedManager";
    cinnamon::hooks::hookCinnamon((PVOID)GameSoundManager::sharedManagerA, GameSoundManager::sharedManagerH, (LPVOID*)&GameSoundManager::sharedManagerO_);

    gamesoundmanager.def("get", pybind::overload_cast<>(&GameSoundManager::get));
    auto gamestatsmanager = pybind::class_<GameStatsManager, cocos2d::CCNode>(m, "GameStatsManager");
    gamestatsmanager.def("getAwardedCurrencyForLevel", pybind::overload_cast<GameStatsManager*, GJGameLevel*>(&GameStatsManager::getAwardedCurrencyForLevel));
    gamestatsmanager.def("getAwardedCurrencyForLevel", pybind::overload_cast<pybind::function>(&GameStatsManager::getAwardedCurrencyForLevel));
    gamestatsmanager.def("getAwardedCurrencyForLevelO", [](GameStatsManager* self, GJGameLevel* p0) { return GameStatsManager::getAwardedCurrencyForLevelO(self, p0); });
    gamestatsmanager.attr("getAwardedCurrencyForLevelA") = GameStatsManager::getAwardedCurrencyForLevelA;
    gamestatsmanager.attr("getAwardedCurrencyForLevelN") = "getAwardedCurrencyForLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::getAwardedCurrencyForLevelA, GameStatsManager::getAwardedCurrencyForLevelH, (LPVOID*)&GameStatsManager::getAwardedCurrencyForLevelO_);

    gamestatsmanager.def("getBaseCurrencyForLevel", pybind::overload_cast<GameStatsManager*, GJGameLevel*>(&GameStatsManager::getBaseCurrencyForLevel));
    gamestatsmanager.def("getBaseCurrencyForLevel", pybind::overload_cast<pybind::function>(&GameStatsManager::getBaseCurrencyForLevel));
    gamestatsmanager.def("getBaseCurrencyForLevelO", [](GameStatsManager* self, GJGameLevel* p0) { return GameStatsManager::getBaseCurrencyForLevelO(self, p0); });
    gamestatsmanager.attr("getBaseCurrencyForLevelA") = GameStatsManager::getBaseCurrencyForLevelA;
    gamestatsmanager.attr("getBaseCurrencyForLevelN") = "getBaseCurrencyForLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::getBaseCurrencyForLevelA, GameStatsManager::getBaseCurrencyForLevelH, (LPVOID*)&GameStatsManager::getBaseCurrencyForLevelO_);

    gamestatsmanager.def("getChallenge", pybind::overload_cast<GameStatsManager*, int>(&GameStatsManager::getChallenge));
    gamestatsmanager.def("getChallenge", pybind::overload_cast<pybind::function>(&GameStatsManager::getChallenge));
    gamestatsmanager.def("getChallengeO", [](GameStatsManager* self, int id) { return GameStatsManager::getChallengeO(self, id); });
    gamestatsmanager.attr("getChallengeA") = GameStatsManager::getChallengeA;
    gamestatsmanager.attr("getChallengeN") = "getChallenge";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::getChallengeA, GameStatsManager::getChallengeH, (LPVOID*)&GameStatsManager::getChallengeO_);

    gamestatsmanager.def("getStat", pybind::overload_cast<GameStatsManager*, char const*>(&GameStatsManager::getStat));
    gamestatsmanager.def("getStat", pybind::overload_cast<pybind::function>(&GameStatsManager::getStat));
    gamestatsmanager.def("getStatO", [](GameStatsManager* self, char const* p0) { return GameStatsManager::getStatO(self, p0); });
    gamestatsmanager.attr("getStatA") = GameStatsManager::getStatA;
    gamestatsmanager.attr("getStatN") = "getStat";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::getStatA, GameStatsManager::getStatH, (LPVOID*)&GameStatsManager::getStatO_);

    gamestatsmanager.def("hasPendingUserCoin", pybind::overload_cast<GameStatsManager*, char const*>(&GameStatsManager::hasPendingUserCoin));
    gamestatsmanager.def("hasPendingUserCoin", pybind::overload_cast<pybind::function>(&GameStatsManager::hasPendingUserCoin));
    gamestatsmanager.def("hasPendingUserCoinO", [](GameStatsManager* self, char const* p0) { return GameStatsManager::hasPendingUserCoinO(self, p0); });
    gamestatsmanager.attr("hasPendingUserCoinA") = GameStatsManager::hasPendingUserCoinA;
    gamestatsmanager.attr("hasPendingUserCoinN") = "hasPendingUserCoin";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::hasPendingUserCoinA, GameStatsManager::hasPendingUserCoinH, (LPVOID*)&GameStatsManager::hasPendingUserCoinO_);

    gamestatsmanager.def("hasSecretCoin", pybind::overload_cast<GameStatsManager*, char const*>(&GameStatsManager::hasSecretCoin));
    gamestatsmanager.def("hasSecretCoin", pybind::overload_cast<pybind::function>(&GameStatsManager::hasSecretCoin));
    gamestatsmanager.def("hasSecretCoinO", [](GameStatsManager* self, char const* p0) { return GameStatsManager::hasSecretCoinO(self, p0); });
    gamestatsmanager.attr("hasSecretCoinA") = GameStatsManager::hasSecretCoinA;
    gamestatsmanager.attr("hasSecretCoinN") = "hasSecretCoin";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::hasSecretCoinA, GameStatsManager::hasSecretCoinH, (LPVOID*)&GameStatsManager::hasSecretCoinO_);

    gamestatsmanager.def("hasUserCoin", pybind::overload_cast<GameStatsManager*, char const*>(&GameStatsManager::hasUserCoin));
    gamestatsmanager.def("hasUserCoin", pybind::overload_cast<pybind::function>(&GameStatsManager::hasUserCoin));
    gamestatsmanager.def("hasUserCoinO", [](GameStatsManager* self, char const* p0) { return GameStatsManager::hasUserCoinO(self, p0); });
    gamestatsmanager.attr("hasUserCoinA") = GameStatsManager::hasUserCoinA;
    gamestatsmanager.attr("hasUserCoinN") = "hasUserCoin";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::hasUserCoinA, GameStatsManager::hasUserCoinH, (LPVOID*)&GameStatsManager::hasUserCoinO_);

    gamestatsmanager.def("incrementChallenge", pybind::overload_cast<GameStatsManager*, GJChallengeType, int>(&GameStatsManager::incrementChallenge));
    gamestatsmanager.def("incrementChallenge", pybind::overload_cast<pybind::function>(&GameStatsManager::incrementChallenge));
    gamestatsmanager.def("incrementChallengeO", [](GameStatsManager* self, GJChallengeType type, int count) { return GameStatsManager::incrementChallengeO(self, type, count); });
    gamestatsmanager.attr("incrementChallengeA") = GameStatsManager::incrementChallengeA;
    gamestatsmanager.attr("incrementChallengeN") = "incrementChallenge";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::incrementChallengeA, GameStatsManager::incrementChallengeH, (LPVOID*)&GameStatsManager::incrementChallengeO_);

    gamestatsmanager.def("incrementStat", pybind::overload_cast<GameStatsManager*, char const*, int>(&GameStatsManager::incrementStat));
    gamestatsmanager.def("incrementStat", pybind::overload_cast<pybind::function>(&GameStatsManager::incrementStat));
    gamestatsmanager.def("incrementStatO", [](GameStatsManager* self, char const* p0, int p1) { return GameStatsManager::incrementStatO(self, p0, p1); });
    gamestatsmanager.attr("incrementStatA") = GameStatsManager::incrementStatA;
    gamestatsmanager.attr("incrementStatN") = "incrementStat";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::incrementStatA, GameStatsManager::incrementStatH, (LPVOID*)&GameStatsManager::incrementStatO_);

    gamestatsmanager.def("sharedState", pybind::overload_cast<>(&GameStatsManager::sharedState));
    gamestatsmanager.def("sharedState", pybind::overload_cast<pybind::function>(&GameStatsManager::sharedState));
    gamestatsmanager.def("sharedStateO", []() { return GameStatsManager::sharedStateO(); });
    gamestatsmanager.attr("sharedStateA") = GameStatsManager::sharedStateA;
    gamestatsmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::sharedStateA, GameStatsManager::sharedStateH, (LPVOID*)&GameStatsManager::sharedStateO_);

    gamestatsmanager.def("isItemUnlocked", pybind::overload_cast<GameStatsManager*, UnlockType, int>(&GameStatsManager::isItemUnlocked));
    gamestatsmanager.def("isItemUnlocked", pybind::overload_cast<pybind::function>(&GameStatsManager::isItemUnlocked));
    gamestatsmanager.def("isItemUnlockedO", [](GameStatsManager* self, UnlockType type, int id) { return GameStatsManager::isItemUnlockedO(self, type, id); });
    gamestatsmanager.attr("isItemUnlockedA") = GameStatsManager::isItemUnlockedA;
    gamestatsmanager.attr("isItemUnlockedN") = "isItemUnlocked";
    cinnamon::hooks::hookCinnamon((PVOID)GameStatsManager::isItemUnlockedA, GameStatsManager::isItemUnlockedH, (LPVOID*)&GameStatsManager::isItemUnlockedO_);

    auto gametoolbox = pybind::class_<GameToolbox>(m, "GameToolbox");
    gametoolbox.def("hsvFromString", pybind::overload_cast<gd::string, char const*>(&GameToolbox::hsvFromString));
    gametoolbox.def("hsvFromString", pybind::overload_cast<pybind::function>(&GameToolbox::hsvFromString));
    gametoolbox.def("hsvFromStringO", [](gd::string str, char const* separator) { return GameToolbox::hsvFromStringO(str, separator); });
    gametoolbox.attr("hsvFromStringA") = GameToolbox::hsvFromStringA;
    gametoolbox.attr("hsvFromStringN") = "hsvFromString";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::hsvFromStringA, GameToolbox::hsvFromStringH, (LPVOID*)&GameToolbox::hsvFromStringO_);

    gametoolbox.def("stringSetupToDict", pybind::overload_cast<gd::string, char const*>(&GameToolbox::stringSetupToDict));
    gametoolbox.def("stringSetupToDict", pybind::overload_cast<pybind::function>(&GameToolbox::stringSetupToDict));
    gametoolbox.def("stringSetupToDictO", [](gd::string text, char const* delimeter) { return GameToolbox::stringSetupToDictO(text, delimeter); });
    gametoolbox.attr("stringSetupToDictA") = GameToolbox::stringSetupToDictA;
    gametoolbox.attr("stringSetupToDictN") = "stringSetupToDict";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::stringSetupToDictA, GameToolbox::stringSetupToDictH, (LPVOID*)&GameToolbox::stringSetupToDictO_);

    gametoolbox.def("createToggleButton", pybind::overload_cast<gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCArray*>(&GameToolbox::createToggleButton));
    gametoolbox.def("createToggleButton", pybind::overload_cast<pybind::function>(&GameToolbox::createToggleButton));
    gametoolbox.def("createToggleButtonO", [](gd::string text, cocos2d::SEL_MenuHandler onToggled, bool isToggled, cocos2d::CCMenu* toggleMenu, cocos2d::CCPoint position, cocos2d::CCNode* callbackTarget, cocos2d::CCNode* labelParent, cocos2d::CCArray* toggleArray) { return GameToolbox::createToggleButtonO(text, onToggled, isToggled, toggleMenu, position, callbackTarget, labelParent, toggleArray); });
    gametoolbox.attr("createToggleButtonA") = GameToolbox::createToggleButtonA;
    gametoolbox.attr("createToggleButtonN") = "createToggleButton";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::createToggleButtonA, GameToolbox::createToggleButtonH, (LPVOID*)&GameToolbox::createToggleButtonO_);

    gametoolbox.def("createToggleButton", pybind::overload_cast<gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, cocos2d::CCPoint, const char*, bool, int, cocos2d::CCArray*>(&GameToolbox::createToggleButton));
    gametoolbox.def("transformColor", pybind::overload_cast<cocos2d::ccColor3B const&, cocos2d::ccHSVValue>(&GameToolbox::transformColor));
    gametoolbox.def("transformColor", pybind::overload_cast<pybind::function>(&GameToolbox::transformColor));
    gametoolbox.def("transformColorO", [](cocos2d::ccColor3B const& src, cocos2d::ccHSVValue hsv) { return GameToolbox::transformColorO(src, hsv); });
    gametoolbox.attr("transformColorA") = GameToolbox::transformColorA;
    gametoolbox.attr("transformColorN") = "transformColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::transformColorA, GameToolbox::transformColorH, (LPVOID*)&GameToolbox::transformColorO_);

    gametoolbox.def("alignItemsHorisontally", pybind::overload_cast<cocos2d::CCArray*, float, cocos2d::CCPoint, bool>(&GameToolbox::alignItemsHorisontally));
    gametoolbox.def("alignItemsHorisontally", pybind::overload_cast<pybind::function>(&GameToolbox::alignItemsHorisontally));
    gametoolbox.def("alignItemsHorisontallyO", [](cocos2d::CCArray* array, float pad, cocos2d::CCPoint start, bool idk) { return GameToolbox::alignItemsHorisontallyO(array, pad, start, idk); });
    gametoolbox.attr("alignItemsHorisontallyA") = GameToolbox::alignItemsHorisontallyA;
    gametoolbox.attr("alignItemsHorisontallyN") = "alignItemsHorisontally";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::alignItemsHorisontallyA, GameToolbox::alignItemsHorisontallyH, (LPVOID*)&GameToolbox::alignItemsHorisontallyO_);

    gametoolbox.def("multipliedColorValue", pybind::overload_cast<cocos2d::ccColor3B, cocos2d::ccColor3B, float>(&GameToolbox::multipliedColorValue));
    gametoolbox.def("multipliedColorValue", pybind::overload_cast<pybind::function>(&GameToolbox::multipliedColorValue));
    gametoolbox.def("multipliedColorValueO", [](cocos2d::ccColor3B color1, cocos2d::ccColor3B color2, float factor) { return GameToolbox::multipliedColorValueO(color1, color2, factor); });
    gametoolbox.attr("multipliedColorValueA") = GameToolbox::multipliedColorValueA;
    gametoolbox.attr("multipliedColorValueN") = "multipliedColorValue";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::multipliedColorValueA, GameToolbox::multipliedColorValueH, (LPVOID*)&GameToolbox::multipliedColorValueO_);

    auto garagepage = pybind::class_<GaragePage, cocos2d::CCLayer>(m, "GaragePage");
    garagepage.def("listButtonBarSwitchedPage", pybind::overload_cast<GaragePage*, ListButtonBar*, int>(&GaragePage::listButtonBarSwitchedPage));
    garagepage.def("listButtonBarSwitchedPage", pybind::overload_cast<pybind::function>(&GaragePage::listButtonBarSwitchedPage));
    garagepage.def("listButtonBarSwitchedPageO", [](GaragePage* self, ListButtonBar* bar, int idk) { return GaragePage::listButtonBarSwitchedPageO(self, bar, idk); });
    garagepage.attr("listButtonBarSwitchedPageA") = GaragePage::listButtonBarSwitchedPageA;
    garagepage.attr("listButtonBarSwitchedPageN") = "listButtonBarSwitchedPage";
    cinnamon::hooks::hookCinnamon((PVOID)GaragePage::listButtonBarSwitchedPageA, GaragePage::listButtonBarSwitchedPageH, (LPVOID*)&GaragePage::listButtonBarSwitchedPageO_);

    garagepage.def("init", pybind::overload_cast<GaragePage*, IconType, GJGarageLayer*, cocos2d::SEL_MenuHandler>(&GaragePage::init));
    garagepage.def("init", pybind::overload_cast<pybind::function>(&GaragePage::init));
    garagepage.def("initO", [](GaragePage* self, IconType type, GJGarageLayer* pGarage, cocos2d::SEL_MenuHandler pSelectCallback) { return GaragePage::initO(self, type, pGarage, pSelectCallback); });
    garagepage.attr("initA") = GaragePage::initA;
    garagepage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GaragePage::initA, GaragePage::initH, (LPVOID*)&GaragePage::initO_);

    auto gauntletselectlayer = pybind::class_<GauntletSelectLayer>(m, "GauntletSelectLayer");
    gauntletselectlayer.def("create", pybind::overload_cast<int>(&GauntletSelectLayer::create));
    gauntletselectlayer.def("create", pybind::overload_cast<pybind::function>(&GauntletSelectLayer::create));
    gauntletselectlayer.def("createO", [](int p0) { return GauntletSelectLayer::createO(p0); });
    gauntletselectlayer.attr("createA") = GauntletSelectLayer::createA;
    gauntletselectlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletSelectLayer::createA, GauntletSelectLayer::createH, (LPVOID*)&GauntletSelectLayer::createO_);

    auto ghosttraileffect = pybind::class_<GhostTrailEffect>(m, "GhostTrailEffect");
    auto hsvwidgetpopup = pybind::class_<HSVWidgetPopup, FLAlertLayer>(m, "HSVWidgetPopup");
    hsvwidgetpopup.def("onClose", pybind::overload_cast<HSVWidgetPopup*, cocos2d::CCObject*>(&HSVWidgetPopup::onClose));
    hsvwidgetpopup.def("onClose", pybind::overload_cast<pybind::function>(&HSVWidgetPopup::onClose));
    hsvwidgetpopup.def("onCloseO", [](HSVWidgetPopup* self, cocos2d::CCObject* sender) { return HSVWidgetPopup::onCloseO(self, sender); });
    hsvwidgetpopup.attr("onCloseA") = HSVWidgetPopup::onCloseA;
    hsvwidgetpopup.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)HSVWidgetPopup::onCloseA, HSVWidgetPopup::onCloseH, (LPVOID*)&HSVWidgetPopup::onCloseO_);

    auto hardstreak = pybind::class_<HardStreak, cocos2d::CCDrawNode>(m, "HardStreak");
    hardstreak.def("init", pybind::overload_cast<HardStreak*>(&HardStreak::init));
    hardstreak.def("init", pybind::overload_cast<pybind::function>(&HardStreak::init));
    hardstreak.def("initO", [](HardStreak* self) { return HardStreak::initO(self); });
    hardstreak.attr("initA") = HardStreak::initA;
    hardstreak.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::initA, HardStreak::initH, (LPVOID*)&HardStreak::initO_);

    hardstreak.def("addPoint", pybind::overload_cast<HardStreak*, cocos2d::CCPoint>(&HardStreak::addPoint));
    hardstreak.def("addPoint", pybind::overload_cast<pybind::function>(&HardStreak::addPoint));
    hardstreak.def("addPointO", [](HardStreak* self, cocos2d::CCPoint p0) { return HardStreak::addPointO(self, p0); });
    hardstreak.attr("addPointA") = HardStreak::addPointA;
    hardstreak.attr("addPointN") = "addPoint";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::addPointA, HardStreak::addPointH, (LPVOID*)&HardStreak::addPointO_);

    hardstreak.def("clearBehindXPos", pybind::overload_cast<HardStreak*, float>(&HardStreak::clearBehindXPos));
    hardstreak.def("clearBehindXPos", pybind::overload_cast<pybind::function>(&HardStreak::clearBehindXPos));
    hardstreak.def("clearBehindXPosO", [](HardStreak* self, float p0) { return HardStreak::clearBehindXPosO(self, p0); });
    hardstreak.attr("clearBehindXPosA") = HardStreak::clearBehindXPosA;
    hardstreak.attr("clearBehindXPosN") = "clearBehindXPos";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::clearBehindXPosA, HardStreak::clearBehindXPosH, (LPVOID*)&HardStreak::clearBehindXPosO_);

    hardstreak.def("create", pybind::overload_cast<>(&HardStreak::create));
    hardstreak.def("create", pybind::overload_cast<pybind::function>(&HardStreak::create));
    hardstreak.def("createO", []() { return HardStreak::createO(); });
    hardstreak.attr("createA") = HardStreak::createA;
    hardstreak.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::createA, HardStreak::createH, (LPVOID*)&HardStreak::createO_);

    hardstreak.def("firstSetup", pybind::overload_cast<HardStreak*>(&HardStreak::firstSetup));
    hardstreak.def("firstSetup", pybind::overload_cast<pybind::function>(&HardStreak::firstSetup));
    hardstreak.def("firstSetupO", [](HardStreak* self) { return HardStreak::firstSetupO(self); });
    hardstreak.attr("firstSetupA") = HardStreak::firstSetupA;
    hardstreak.attr("firstSetupN") = "firstSetup";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::firstSetupA, HardStreak::firstSetupH, (LPVOID*)&HardStreak::firstSetupO_);

    hardstreak.def("stopStroke", pybind::overload_cast<HardStreak*>(&HardStreak::stopStroke));
    hardstreak.def("stopStroke", pybind::overload_cast<pybind::function>(&HardStreak::stopStroke));
    hardstreak.def("stopStrokeO", [](HardStreak* self) { return HardStreak::stopStrokeO(self); });
    hardstreak.attr("stopStrokeA") = HardStreak::stopStrokeA;
    hardstreak.attr("stopStrokeN") = "stopStroke";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::stopStrokeA, HardStreak::stopStrokeH, (LPVOID*)&HardStreak::stopStrokeO_);

    hardstreak.def("updateStroke", pybind::overload_cast<HardStreak*, float>(&HardStreak::updateStroke));
    hardstreak.def("updateStroke", pybind::overload_cast<pybind::function>(&HardStreak::updateStroke));
    hardstreak.def("updateStrokeO", [](HardStreak* self, float p0) { return HardStreak::updateStrokeO(self, p0); });
    hardstreak.attr("updateStrokeA") = HardStreak::updateStrokeA;
    hardstreak.attr("updateStrokeN") = "updateStroke";
    cinnamon::hooks::hookCinnamon((PVOID)HardStreak::updateStrokeA, HardStreak::updateStrokeH, (LPVOID*)&HardStreak::updateStrokeO_);

    auto infoalertbutton = pybind::class_<InfoAlertButton>(m, "InfoAlertButton");
    auto levelcommentdelegate = pybind::class_<LevelCommentDelegate>(m, "LevelCommentDelegate");
    auto infolayer = pybind::class_<InfoLayer, FLAlertLayer>(m, "InfoLayer");
    infolayer.def("init", pybind::overload_cast<InfoLayer*, GJGameLevel*, GJUserScore*>(&InfoLayer::init));
    infolayer.def("init", pybind::overload_cast<pybind::function>(&InfoLayer::init));
    infolayer.def("initO", [](InfoLayer* self, GJGameLevel* level, GJUserScore* score) { return InfoLayer::initO(self, level, score); });
    infolayer.attr("initA") = InfoLayer::initA;
    infolayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::initA, InfoLayer::initH, (LPVOID*)&InfoLayer::initO_);

    infolayer.def("setupCommentsBrowser", pybind::overload_cast<InfoLayer*, cocos2d::CCArray*>(&InfoLayer::setupCommentsBrowser));
    infolayer.def("setupCommentsBrowser", pybind::overload_cast<pybind::function>(&InfoLayer::setupCommentsBrowser));
    infolayer.def("setupCommentsBrowserO", [](InfoLayer* self, cocos2d::CCArray* comments) { return InfoLayer::setupCommentsBrowserO(self, comments); });
    infolayer.attr("setupCommentsBrowserA") = InfoLayer::setupCommentsBrowserA;
    infolayer.attr("setupCommentsBrowserN") = "setupCommentsBrowser";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::setupCommentsBrowserA, InfoLayer::setupCommentsBrowserH, (LPVOID*)&InfoLayer::setupCommentsBrowserO_);

    infolayer.def("onMore", pybind::overload_cast<InfoLayer*, cocos2d::CCObject*>(&InfoLayer::onMore));
    infolayer.def("onMore", pybind::overload_cast<pybind::function>(&InfoLayer::onMore));
    infolayer.def("onMoreO", [](InfoLayer* self, cocos2d::CCObject* sender) { return InfoLayer::onMoreO(self, sender); });
    infolayer.attr("onMoreA") = InfoLayer::onMoreA;
    infolayer.attr("onMoreN") = "onMore";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::onMoreA, InfoLayer::onMoreH, (LPVOID*)&InfoLayer::onMoreO_);

    infolayer.def("onLevelInfo", pybind::overload_cast<InfoLayer*, cocos2d::CCObject*>(&InfoLayer::onLevelInfo));
    infolayer.def("onLevelInfo", pybind::overload_cast<pybind::function>(&InfoLayer::onLevelInfo));
    infolayer.def("onLevelInfoO", [](InfoLayer* self, cocos2d::CCObject* sender) { return InfoLayer::onLevelInfoO(self, sender); });
    infolayer.attr("onLevelInfoA") = InfoLayer::onLevelInfoA;
    infolayer.attr("onLevelInfoN") = "onLevelInfo";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::onLevelInfoA, InfoLayer::onLevelInfoH, (LPVOID*)&InfoLayer::onLevelInfoO_);

    infolayer.def("loadPage", pybind::overload_cast<InfoLayer*, int, bool>(&InfoLayer::loadPage));
    infolayer.def("loadPage", pybind::overload_cast<pybind::function>(&InfoLayer::loadPage));
    infolayer.def("loadPageO", [](InfoLayer* self, int page, bool p1) { return InfoLayer::loadPageO(self, page, p1); });
    infolayer.attr("loadPageA") = InfoLayer::loadPageA;
    infolayer.attr("loadPageN") = "loadPage";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::loadPageA, InfoLayer::loadPageH, (LPVOID*)&InfoLayer::loadPageO_);

    infolayer.def("create", pybind::overload_cast<GJGameLevel*, GJUserScore*>(&InfoLayer::create));
    infolayer.def("create", pybind::overload_cast<pybind::function>(&InfoLayer::create));
    infolayer.def("createO", [](GJGameLevel* level, GJUserScore* score) { return InfoLayer::createO(level, score); });
    infolayer.attr("createA") = InfoLayer::createA;
    infolayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)InfoLayer::createA, InfoLayer::createH, (LPVOID*)&InfoLayer::createO_);

    auto inheritancenode = pybind::class_<InheritanceNode, cocos2d::CCObject>(m, "InheritanceNode");
    auto keybindingslayer = pybind::class_<KeybindingsLayer, FLAlertLayer>(m, "KeybindingsLayer");
    keybindingslayer.def("onClose", pybind::overload_cast<KeybindingsLayer*, cocos2d::CCObject*>(&KeybindingsLayer::onClose));
    keybindingslayer.def("onClose", pybind::overload_cast<pybind::function>(&KeybindingsLayer::onClose));
    keybindingslayer.def("onCloseO", [](KeybindingsLayer* self, cocos2d::CCObject* sender) { return KeybindingsLayer::onCloseO(self, sender); });
    keybindingslayer.attr("onCloseA") = KeybindingsLayer::onCloseA;
    keybindingslayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)KeybindingsLayer::onCloseA, KeybindingsLayer::onCloseH, (LPVOID*)&KeybindingsLayer::onCloseO_);

    keybindingslayer.def("onPrevPage", pybind::overload_cast<KeybindingsLayer*, cocos2d::CCObject*>(&KeybindingsLayer::onPrevPage));
    keybindingslayer.def("onPrevPage", pybind::overload_cast<pybind::function>(&KeybindingsLayer::onPrevPage));
    keybindingslayer.def("onPrevPageO", [](KeybindingsLayer* self, cocos2d::CCObject* sender) { return KeybindingsLayer::onPrevPageO(self, sender); });
    keybindingslayer.attr("onPrevPageA") = KeybindingsLayer::onPrevPageA;
    keybindingslayer.attr("onPrevPageN") = "onPrevPage";
    cinnamon::hooks::hookCinnamon((PVOID)KeybindingsLayer::onPrevPageA, KeybindingsLayer::onPrevPageH, (LPVOID*)&KeybindingsLayer::onPrevPageO_);

    keybindingslayer.def("onNextPage", pybind::overload_cast<KeybindingsLayer*, cocos2d::CCObject*>(&KeybindingsLayer::onNextPage));
    keybindingslayer.def("onNextPage", pybind::overload_cast<pybind::function>(&KeybindingsLayer::onNextPage));
    keybindingslayer.def("onNextPageO", [](KeybindingsLayer* self, cocos2d::CCObject* sender) { return KeybindingsLayer::onNextPageO(self, sender); });
    keybindingslayer.attr("onNextPageA") = KeybindingsLayer::onNextPageA;
    keybindingslayer.attr("onNextPageN") = "onNextPage";
    cinnamon::hooks::hookCinnamon((PVOID)KeybindingsLayer::onNextPageA, KeybindingsLayer::onNextPageH, (LPVOID*)&KeybindingsLayer::onNextPageO_);

    keybindingslayer.def("goToPage", pybind::overload_cast<KeybindingsLayer*, int>(&KeybindingsLayer::goToPage));
    keybindingslayer.def("goToPage", pybind::overload_cast<pybind::function>(&KeybindingsLayer::goToPage));
    keybindingslayer.def("goToPageO", [](KeybindingsLayer* self, int page) { return KeybindingsLayer::goToPageO(self, page); });
    keybindingslayer.attr("goToPageA") = KeybindingsLayer::goToPageA;
    keybindingslayer.attr("goToPageN") = "goToPage";
    cinnamon::hooks::hookCinnamon((PVOID)KeybindingsLayer::goToPageA, KeybindingsLayer::goToPageH, (LPVOID*)&KeybindingsLayer::goToPageO_);

    auto labelgameobject = pybind::class_<LabelGameObject, GameObject>(m, "LabelGameObject");
    labelgameobject.def("init", pybind::overload_cast<LabelGameObject*>(&LabelGameObject::init));
    labelgameobject.def("init", pybind::overload_cast<pybind::function>(&LabelGameObject::init));
    labelgameobject.def("initO", [](LabelGameObject* self) { return LabelGameObject::initO(self); });
    labelgameobject.attr("initA") = LabelGameObject::initA;
    labelgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LabelGameObject::initA, LabelGameObject::initH, (LPVOID*)&LabelGameObject::initO_);

    auto leaderboardmanagerdelegate = pybind::class_<LeaderboardManagerDelegate>(m, "LeaderboardManagerDelegate");
    auto leaderboardslayer = pybind::class_<LeaderboardsLayer, cocos2d::CCLayer>(m, "LeaderboardsLayer");
    leaderboardslayer.def("create", pybind::overload_cast<LeaderboardState>(&LeaderboardsLayer::create));
    leaderboardslayer.def("create", pybind::overload_cast<pybind::function>(&LeaderboardsLayer::create));
    leaderboardslayer.def("createO", [](LeaderboardState state) { return LeaderboardsLayer::createO(state); });
    leaderboardslayer.attr("createA") = LeaderboardsLayer::createA;
    leaderboardslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LeaderboardsLayer::createA, LeaderboardsLayer::createH, (LPVOID*)&LeaderboardsLayer::createO_);

    leaderboardslayer.def("init", pybind::overload_cast<LeaderboardsLayer*, LeaderboardState>(&LeaderboardsLayer::init));
    leaderboardslayer.def("init", pybind::overload_cast<pybind::function>(&LeaderboardsLayer::init));
    leaderboardslayer.def("initO", [](LeaderboardsLayer* self, LeaderboardState state) { return LeaderboardsLayer::initO(self, state); });
    leaderboardslayer.attr("initA") = LeaderboardsLayer::initA;
    leaderboardslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LeaderboardsLayer::initA, LeaderboardsLayer::initH, (LPVOID*)&LeaderboardsLayer::initO_);

    auto levelmanagerdelegate = pybind::class_<LevelManagerDelegate>(m, "LevelManagerDelegate");
    auto settextpopupdelegate = pybind::class_<SetTextPopupDelegate>(m, "SetTextPopupDelegate");
    auto levelbrowserlayer = pybind::class_<LevelBrowserLayer, cocos2d::CCLayer>(m, "LevelBrowserLayer");
    levelbrowserlayer.def("init", pybind::overload_cast<LevelBrowserLayer*, GJSearchObject*>(&LevelBrowserLayer::init));
    levelbrowserlayer.def("init", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::init));
    levelbrowserlayer.def("initO", [](LevelBrowserLayer* self, GJSearchObject* search) { return LevelBrowserLayer::initO(self, search); });
    levelbrowserlayer.attr("initA") = LevelBrowserLayer::initA;
    levelbrowserlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::initA, LevelBrowserLayer::initH, (LPVOID*)&LevelBrowserLayer::initO_);

    levelbrowserlayer.def("loadPage", pybind::overload_cast<LevelBrowserLayer*, GJSearchObject*>(&LevelBrowserLayer::loadPage));
    levelbrowserlayer.def("loadPage", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::loadPage));
    levelbrowserlayer.def("loadPageO", [](LevelBrowserLayer* self, GJSearchObject* search) { return LevelBrowserLayer::loadPageO(self, search); });
    levelbrowserlayer.attr("loadPageA") = LevelBrowserLayer::loadPageA;
    levelbrowserlayer.attr("loadPageN") = "loadPage";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::loadPageA, LevelBrowserLayer::loadPageH, (LPVOID*)&LevelBrowserLayer::loadPageO_);

    levelbrowserlayer.def("setupLevelBrowser", pybind::overload_cast<LevelBrowserLayer*, cocos2d::CCArray*>(&LevelBrowserLayer::setupLevelBrowser));
    levelbrowserlayer.def("setupLevelBrowser", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::setupLevelBrowser));
    levelbrowserlayer.def("setupLevelBrowserO", [](LevelBrowserLayer* self, cocos2d::CCArray* levels) { return LevelBrowserLayer::setupLevelBrowserO(self, levels); });
    levelbrowserlayer.attr("setupLevelBrowserA") = LevelBrowserLayer::setupLevelBrowserA;
    levelbrowserlayer.attr("setupLevelBrowserN") = "setupLevelBrowser";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::setupLevelBrowserA, LevelBrowserLayer::setupLevelBrowserH, (LPVOID*)&LevelBrowserLayer::setupLevelBrowserO_);

    levelbrowserlayer.def("setupPageInfo", pybind::overload_cast<LevelBrowserLayer*, gd::string, char const*>(&LevelBrowserLayer::setupPageInfo));
    levelbrowserlayer.def("setupPageInfo", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::setupPageInfo));
    levelbrowserlayer.def("setupPageInfoO", [](LevelBrowserLayer* self, gd::string p0, char const* p1) { return LevelBrowserLayer::setupPageInfoO(self, p0, p1); });
    levelbrowserlayer.attr("setupPageInfoA") = LevelBrowserLayer::setupPageInfoA;
    levelbrowserlayer.attr("setupPageInfoN") = "setupPageInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::setupPageInfoA, LevelBrowserLayer::setupPageInfoH, (LPVOID*)&LevelBrowserLayer::setupPageInfoO_);

    levelbrowserlayer.def("updateLevelsLabel", pybind::overload_cast<LevelBrowserLayer*>(&LevelBrowserLayer::updateLevelsLabel));
    levelbrowserlayer.def("updateLevelsLabel", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::updateLevelsLabel));
    levelbrowserlayer.def("updateLevelsLabelO", [](LevelBrowserLayer* self) { return LevelBrowserLayer::updateLevelsLabelO(self); });
    levelbrowserlayer.attr("updateLevelsLabelA") = LevelBrowserLayer::updateLevelsLabelA;
    levelbrowserlayer.attr("updateLevelsLabelN") = "updateLevelsLabel";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::updateLevelsLabelA, LevelBrowserLayer::updateLevelsLabelH, (LPVOID*)&LevelBrowserLayer::updateLevelsLabelO_);

    levelbrowserlayer.def("onInfo", pybind::overload_cast<LevelBrowserLayer*, cocos2d::CCObject*>(&LevelBrowserLayer::onInfo));
    levelbrowserlayer.def("onInfo", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::onInfo));
    levelbrowserlayer.def("onInfoO", [](LevelBrowserLayer* self, cocos2d::CCObject* sender) { return LevelBrowserLayer::onInfoO(self, sender); });
    levelbrowserlayer.attr("onInfoA") = LevelBrowserLayer::onInfoA;
    levelbrowserlayer.attr("onInfoN") = "onInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::onInfoA, LevelBrowserLayer::onInfoH, (LPVOID*)&LevelBrowserLayer::onInfoO_);

    levelbrowserlayer.def("create", pybind::overload_cast<GJSearchObject*>(&LevelBrowserLayer::create));
    levelbrowserlayer.def("create", pybind::overload_cast<pybind::function>(&LevelBrowserLayer::create));
    levelbrowserlayer.def("createO", [](GJSearchObject* search) { return LevelBrowserLayer::createO(search); });
    levelbrowserlayer.attr("createA") = LevelBrowserLayer::createA;
    levelbrowserlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelBrowserLayer::createA, LevelBrowserLayer::createH, (LPVOID*)&LevelBrowserLayer::createO_);

    auto levelcell = pybind::class_<LevelCell, TableViewCell>(m, "LevelCell");
    levelcell.def("onViewProfile", pybind::overload_cast<LevelCell*, cocos2d::CCObject*>(&LevelCell::onViewProfile));
    levelcell.def("onViewProfile", pybind::overload_cast<pybind::function>(&LevelCell::onViewProfile));
    levelcell.def("onViewProfileO", [](LevelCell* self, cocos2d::CCObject* p0) { return LevelCell::onViewProfileO(self, p0); });
    levelcell.attr("onViewProfileA") = LevelCell::onViewProfileA;
    levelcell.attr("onViewProfileN") = "onViewProfile";
    cinnamon::hooks::hookCinnamon((PVOID)LevelCell::onViewProfileA, LevelCell::onViewProfileH, (LPVOID*)&LevelCell::onViewProfileO_);

    levelcell.def("loadCustomLevelCell", pybind::overload_cast<LevelCell*>(&LevelCell::loadCustomLevelCell));
    levelcell.def("loadCustomLevelCell", pybind::overload_cast<pybind::function>(&LevelCell::loadCustomLevelCell));
    levelcell.def("loadCustomLevelCellO", [](LevelCell* self) { return LevelCell::loadCustomLevelCellO(self); });
    levelcell.attr("loadCustomLevelCellA") = LevelCell::loadCustomLevelCellA;
    levelcell.attr("loadCustomLevelCellN") = "loadCustomLevelCell";
    cinnamon::hooks::hookCinnamon((PVOID)LevelCell::loadCustomLevelCellA, LevelCell::loadCustomLevelCellH, (LPVOID*)&LevelCell::loadCustomLevelCellO_);

    levelcell.def("updateBGColor", pybind::overload_cast<LevelCell*, int>(&LevelCell::updateBGColor));
    levelcell.def("updateBGColor", pybind::overload_cast<pybind::function>(&LevelCell::updateBGColor));
    levelcell.def("updateBGColorO", [](LevelCell* self, int index) { return LevelCell::updateBGColorO(self, index); });
    levelcell.attr("updateBGColorA") = LevelCell::updateBGColorA;
    levelcell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)LevelCell::updateBGColorA, LevelCell::updateBGColorH, (LPVOID*)&LevelCell::updateBGColorO_);

    levelcell.def("loadFromLevel", pybind::overload_cast<LevelCell*, GJGameLevel*>(&LevelCell::loadFromLevel));
    levelcell.def("loadFromLevel", pybind::overload_cast<pybind::function>(&LevelCell::loadFromLevel));
    levelcell.def("loadFromLevelO", [](LevelCell* self, GJGameLevel* level) { return LevelCell::loadFromLevelO(self, level); });
    levelcell.attr("loadFromLevelA") = LevelCell::loadFromLevelA;
    levelcell.attr("loadFromLevelN") = "loadFromLevel";
    cinnamon::hooks::hookCinnamon((PVOID)LevelCell::loadFromLevelA, LevelCell::loadFromLevelH, (LPVOID*)&LevelCell::loadFromLevelO_);

    auto leveldeletedelegate = pybind::class_<LevelDeleteDelegate>(m, "LevelDeleteDelegate");
    auto levelsettingsdelegate = pybind::class_<LevelSettingsDelegate>(m, "LevelSettingsDelegate");
    auto leveleditorlayer = pybind::class_<LevelEditorLayer, GJBaseGameLayer>(m, "LevelEditorLayer");
    leveleditorlayer.def("update", pybind::overload_cast<LevelEditorLayer*, float>(&LevelEditorLayer::update));
    leveleditorlayer.def("update", pybind::overload_cast<pybind::function>(&LevelEditorLayer::update));
    leveleditorlayer.def("updateO", [](LevelEditorLayer* self, float p0) { return LevelEditorLayer::updateO(self, p0); });
    leveleditorlayer.attr("updateA") = LevelEditorLayer::updateA;
    leveleditorlayer.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateA, LevelEditorLayer::updateH, (LPVOID*)&LevelEditorLayer::updateO_);

    leveleditorlayer.def("draw", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::draw));
    leveleditorlayer.def("draw", pybind::overload_cast<pybind::function>(&LevelEditorLayer::draw));
    leveleditorlayer.def("drawO", [](LevelEditorLayer* self) { return LevelEditorLayer::drawO(self); });
    leveleditorlayer.attr("drawA") = LevelEditorLayer::drawA;
    leveleditorlayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::drawA, LevelEditorLayer::drawH, (LPVOID*)&LevelEditorLayer::drawO_);

    leveleditorlayer.def("updateColor", pybind::overload_cast<LevelEditorLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*>(&LevelEditorLayer::updateColor));
    leveleditorlayer.def("updateColor", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateColor));
    leveleditorlayer.def("updateColorO", [](LevelEditorLayer* self, cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) { return LevelEditorLayer::updateColorO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    leveleditorlayer.attr("updateColorA") = LevelEditorLayer::updateColorA;
    leveleditorlayer.attr("updateColorN") = "updateColor";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateColorA, LevelEditorLayer::updateColorH, (LPVOID*)&LevelEditorLayer::updateColorO_);

    leveleditorlayer.def("flipGravity", pybind::overload_cast<LevelEditorLayer*, PlayerObject*, bool, bool>(&LevelEditorLayer::flipGravity));
    leveleditorlayer.def("flipGravity", pybind::overload_cast<pybind::function>(&LevelEditorLayer::flipGravity));
    leveleditorlayer.def("flipGravityO", [](LevelEditorLayer* self, PlayerObject* p0, bool p1, bool p2) { return LevelEditorLayer::flipGravityO(self, p0, p1, p2); });
    leveleditorlayer.attr("flipGravityA") = LevelEditorLayer::flipGravityA;
    leveleditorlayer.attr("flipGravityN") = "flipGravity";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::flipGravityA, LevelEditorLayer::flipGravityH, (LPVOID*)&LevelEditorLayer::flipGravityO_);

    leveleditorlayer.def("calculateColorValues", pybind::overload_cast<LevelEditorLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*>(&LevelEditorLayer::calculateColorValues));
    leveleditorlayer.def("calculateColorValues", pybind::overload_cast<pybind::function>(&LevelEditorLayer::calculateColorValues));
    leveleditorlayer.def("calculateColorValuesO", [](LevelEditorLayer* self, EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) { return LevelEditorLayer::calculateColorValuesO(self, p0, p1, p2, p3, p4, p5); });
    leveleditorlayer.attr("calculateColorValuesA") = LevelEditorLayer::calculateColorValuesA;
    leveleditorlayer.attr("calculateColorValuesN") = "calculateColorValues";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::calculateColorValuesA, LevelEditorLayer::calculateColorValuesH, (LPVOID*)&LevelEditorLayer::calculateColorValuesO_);

    leveleditorlayer.def("addToGroup", pybind::overload_cast<LevelEditorLayer*, GameObject*, int, bool>(&LevelEditorLayer::addToGroup));
    leveleditorlayer.def("addToGroup", pybind::overload_cast<pybind::function>(&LevelEditorLayer::addToGroup));
    leveleditorlayer.def("addToGroupO", [](LevelEditorLayer* self, GameObject* p0, int p1, bool p2) { return LevelEditorLayer::addToGroupO(self, p0, p1, p2); });
    leveleditorlayer.attr("addToGroupA") = LevelEditorLayer::addToGroupA;
    leveleditorlayer.attr("addToGroupN") = "addToGroup";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::addToGroupA, LevelEditorLayer::addToGroupH, (LPVOID*)&LevelEditorLayer::addToGroupO_);

    leveleditorlayer.def("removeFromGroup", pybind::overload_cast<LevelEditorLayer*, GameObject*, int>(&LevelEditorLayer::removeFromGroup));
    leveleditorlayer.def("removeFromGroup", pybind::overload_cast<pybind::function>(&LevelEditorLayer::removeFromGroup));
    leveleditorlayer.def("removeFromGroupO", [](LevelEditorLayer* self, GameObject* p0, int p1) { return LevelEditorLayer::removeFromGroupO(self, p0, p1); });
    leveleditorlayer.attr("removeFromGroupA") = LevelEditorLayer::removeFromGroupA;
    leveleditorlayer.attr("removeFromGroupN") = "removeFromGroup";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::removeFromGroupA, LevelEditorLayer::removeFromGroupH, (LPVOID*)&LevelEditorLayer::removeFromGroupO_);

    leveleditorlayer.def("timeForXPos", pybind::overload_cast<LevelEditorLayer*, float>(&LevelEditorLayer::timeForXPos));
    leveleditorlayer.def("timeForXPos", pybind::overload_cast<pybind::function>(&LevelEditorLayer::timeForXPos));
    leveleditorlayer.def("timeForXPosO", [](LevelEditorLayer* self, float p0) { return LevelEditorLayer::timeForXPosO(self, p0); });
    leveleditorlayer.attr("timeForXPosA") = LevelEditorLayer::timeForXPosA;
    leveleditorlayer.attr("timeForXPosN") = "timeForXPos";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::timeForXPosA, LevelEditorLayer::timeForXPosH, (LPVOID*)&LevelEditorLayer::timeForXPosO_);

    leveleditorlayer.def("xPosForTime", pybind::overload_cast<LevelEditorLayer*, float>(&LevelEditorLayer::xPosForTime));
    leveleditorlayer.def("xPosForTime", pybind::overload_cast<pybind::function>(&LevelEditorLayer::xPosForTime));
    leveleditorlayer.def("xPosForTimeO", [](LevelEditorLayer* self, float p0) { return LevelEditorLayer::xPosForTimeO(self, p0); });
    leveleditorlayer.attr("xPosForTimeA") = LevelEditorLayer::xPosForTimeA;
    leveleditorlayer.attr("xPosForTimeN") = "xPosForTime";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::xPosForTimeA, LevelEditorLayer::xPosForTimeH, (LPVOID*)&LevelEditorLayer::xPosForTimeO_);

    leveleditorlayer.def("levelSettingsUpdated", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::levelSettingsUpdated));
    leveleditorlayer.def("levelSettingsUpdated", pybind::overload_cast<pybind::function>(&LevelEditorLayer::levelSettingsUpdated));
    leveleditorlayer.def("levelSettingsUpdatedO", [](LevelEditorLayer* self) { return LevelEditorLayer::levelSettingsUpdatedO(self); });
    leveleditorlayer.attr("levelSettingsUpdatedA") = LevelEditorLayer::levelSettingsUpdatedA;
    leveleditorlayer.attr("levelSettingsUpdatedN") = "levelSettingsUpdated";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::levelSettingsUpdatedA, LevelEditorLayer::levelSettingsUpdatedH, (LPVOID*)&LevelEditorLayer::levelSettingsUpdatedO_);

    leveleditorlayer.def("create", pybind::overload_cast<GJGameLevel*>(&LevelEditorLayer::create));
    leveleditorlayer.def("create", pybind::overload_cast<pybind::function>(&LevelEditorLayer::create));
    leveleditorlayer.def("createO", [](GJGameLevel* level) { return LevelEditorLayer::createO(level); });
    leveleditorlayer.attr("createA") = LevelEditorLayer::createA;
    leveleditorlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createA, LevelEditorLayer::createH, (LPVOID*)&LevelEditorLayer::createO_);

    leveleditorlayer.def("activateTriggerEffect", pybind::overload_cast<LevelEditorLayer*, EffectGameObject*, float, float, float>(&LevelEditorLayer::activateTriggerEffect));
    leveleditorlayer.def("activateTriggerEffect", pybind::overload_cast<pybind::function>(&LevelEditorLayer::activateTriggerEffect));
    leveleditorlayer.def("activateTriggerEffectO", [](LevelEditorLayer* self, EffectGameObject* p0, float p1, float p2, float p3) { return LevelEditorLayer::activateTriggerEffectO(self, p0, p1, p2, p3); });
    leveleditorlayer.attr("activateTriggerEffectA") = LevelEditorLayer::activateTriggerEffectA;
    leveleditorlayer.attr("activateTriggerEffectN") = "activateTriggerEffect";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::activateTriggerEffectA, LevelEditorLayer::activateTriggerEffectH, (LPVOID*)&LevelEditorLayer::activateTriggerEffectO_);

    leveleditorlayer.def("addObjectFromString", pybind::overload_cast<LevelEditorLayer*, gd::string>(&LevelEditorLayer::addObjectFromString));
    leveleditorlayer.def("addObjectFromString", pybind::overload_cast<pybind::function>(&LevelEditorLayer::addObjectFromString));
    leveleditorlayer.def("addObjectFromStringO", [](LevelEditorLayer* self, gd::string p0) { return LevelEditorLayer::addObjectFromStringO(self, p0); });
    leveleditorlayer.attr("addObjectFromStringA") = LevelEditorLayer::addObjectFromStringA;
    leveleditorlayer.attr("addObjectFromStringN") = "addObjectFromString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::addObjectFromStringA, LevelEditorLayer::addObjectFromStringH, (LPVOID*)&LevelEditorLayer::addObjectFromStringO_);

    leveleditorlayer.def("addSpecial", pybind::overload_cast<LevelEditorLayer*, GameObject*>(&LevelEditorLayer::addSpecial));
    leveleditorlayer.def("addSpecial", pybind::overload_cast<pybind::function>(&LevelEditorLayer::addSpecial));
    leveleditorlayer.def("addSpecialO", [](LevelEditorLayer* self, GameObject* p0) { return LevelEditorLayer::addSpecialO(self, p0); });
    leveleditorlayer.attr("addSpecialA") = LevelEditorLayer::addSpecialA;
    leveleditorlayer.attr("addSpecialN") = "addSpecial";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::addSpecialA, LevelEditorLayer::addSpecialH, (LPVOID*)&LevelEditorLayer::addSpecialO_);

    leveleditorlayer.def("addToUndoList", pybind::overload_cast<LevelEditorLayer*, UndoObject*, bool>(&LevelEditorLayer::addToUndoList));
    leveleditorlayer.def("addToUndoList", pybind::overload_cast<pybind::function>(&LevelEditorLayer::addToUndoList));
    leveleditorlayer.def("addToUndoListO", [](LevelEditorLayer* self, UndoObject* p0, bool p1) { return LevelEditorLayer::addToUndoListO(self, p0, p1); });
    leveleditorlayer.attr("addToUndoListA") = LevelEditorLayer::addToUndoListA;
    leveleditorlayer.attr("addToUndoListN") = "addToUndoList";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::addToUndoListA, LevelEditorLayer::addToUndoListH, (LPVOID*)&LevelEditorLayer::addToUndoListO_);

    leveleditorlayer.def("animateInDualGround", pybind::overload_cast<LevelEditorLayer*, GameObject*, float, bool>(&LevelEditorLayer::animateInDualGround));
    leveleditorlayer.def("animateInDualGround", pybind::overload_cast<pybind::function>(&LevelEditorLayer::animateInDualGround));
    leveleditorlayer.def("animateInDualGroundO", [](LevelEditorLayer* self, GameObject* p0, float p1, bool p2) { return LevelEditorLayer::animateInDualGroundO(self, p0, p1, p2); });
    leveleditorlayer.attr("animateInDualGroundA") = LevelEditorLayer::animateInDualGroundA;
    leveleditorlayer.attr("animateInDualGroundN") = "animateInDualGround";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::animateInDualGroundA, LevelEditorLayer::animateInDualGroundH, (LPVOID*)&LevelEditorLayer::animateInDualGroundO_);

    leveleditorlayer.def("assignNewStickyGroups", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCArray*>(&LevelEditorLayer::assignNewStickyGroups));
    leveleditorlayer.def("assignNewStickyGroups", pybind::overload_cast<pybind::function>(&LevelEditorLayer::assignNewStickyGroups));
    leveleditorlayer.def("assignNewStickyGroupsO", [](LevelEditorLayer* self, cocos2d::CCArray* p0) { return LevelEditorLayer::assignNewStickyGroupsO(self, p0); });
    leveleditorlayer.attr("assignNewStickyGroupsA") = LevelEditorLayer::assignNewStickyGroupsA;
    leveleditorlayer.attr("assignNewStickyGroupsN") = "assignNewStickyGroups";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::assignNewStickyGroupsA, LevelEditorLayer::assignNewStickyGroupsH, (LPVOID*)&LevelEditorLayer::assignNewStickyGroupsO_);

    leveleditorlayer.def("checkCollisions", pybind::overload_cast<LevelEditorLayer*, PlayerObject*, float>(&LevelEditorLayer::checkCollisions));
    leveleditorlayer.def("checkCollisions", pybind::overload_cast<pybind::function>(&LevelEditorLayer::checkCollisions));
    leveleditorlayer.def("checkCollisionsO", [](LevelEditorLayer* self, PlayerObject* p0, float p1) { return LevelEditorLayer::checkCollisionsO(self, p0, p1); });
    leveleditorlayer.attr("checkCollisionsA") = LevelEditorLayer::checkCollisionsA;
    leveleditorlayer.attr("checkCollisionsN") = "checkCollisions";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::checkCollisionsA, LevelEditorLayer::checkCollisionsH, (LPVOID*)&LevelEditorLayer::checkCollisionsO_);

    leveleditorlayer.def("createBackground", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::createBackground));
    leveleditorlayer.def("createBackground", pybind::overload_cast<pybind::function>(&LevelEditorLayer::createBackground));
    leveleditorlayer.def("createBackgroundO", [](LevelEditorLayer* self) { return LevelEditorLayer::createBackgroundO(self); });
    leveleditorlayer.attr("createBackgroundA") = LevelEditorLayer::createBackgroundA;
    leveleditorlayer.attr("createBackgroundN") = "createBackground";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createBackgroundA, LevelEditorLayer::createBackgroundH, (LPVOID*)&LevelEditorLayer::createBackgroundO_);

    leveleditorlayer.def("createGroundLayer", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::createGroundLayer));
    leveleditorlayer.def("createGroundLayer", pybind::overload_cast<pybind::function>(&LevelEditorLayer::createGroundLayer));
    leveleditorlayer.def("createGroundLayerO", [](LevelEditorLayer* self) { return LevelEditorLayer::createGroundLayerO(self); });
    leveleditorlayer.attr("createGroundLayerA") = LevelEditorLayer::createGroundLayerA;
    leveleditorlayer.attr("createGroundLayerN") = "createGroundLayer";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createGroundLayerA, LevelEditorLayer::createGroundLayerH, (LPVOID*)&LevelEditorLayer::createGroundLayerO_);

    leveleditorlayer.def("createObject", pybind::overload_cast<LevelEditorLayer*, int, cocos2d::CCPoint, bool>(&LevelEditorLayer::createObject));
    leveleditorlayer.def("createObject", pybind::overload_cast<pybind::function>(&LevelEditorLayer::createObject));
    leveleditorlayer.def("createObjectO", [](LevelEditorLayer* self, int p0, cocos2d::CCPoint p1, bool p2) { return LevelEditorLayer::createObjectO(self, p0, p1, p2); });
    leveleditorlayer.attr("createObjectA") = LevelEditorLayer::createObjectA;
    leveleditorlayer.attr("createObjectN") = "createObject";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createObjectA, LevelEditorLayer::createObjectH, (LPVOID*)&LevelEditorLayer::createObjectO_);

    leveleditorlayer.def("createObjectsFromSetup", pybind::overload_cast<LevelEditorLayer*, gd::string>(&LevelEditorLayer::createObjectsFromSetup));
    leveleditorlayer.def("createObjectsFromSetup", pybind::overload_cast<pybind::function>(&LevelEditorLayer::createObjectsFromSetup));
    leveleditorlayer.def("createObjectsFromSetupO", [](LevelEditorLayer* self, gd::string p0) { return LevelEditorLayer::createObjectsFromSetupO(self, p0); });
    leveleditorlayer.attr("createObjectsFromSetupA") = LevelEditorLayer::createObjectsFromSetupA;
    leveleditorlayer.attr("createObjectsFromSetupN") = "createObjectsFromSetup";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createObjectsFromSetupA, LevelEditorLayer::createObjectsFromSetupH, (LPVOID*)&LevelEditorLayer::createObjectsFromSetupO_);

    leveleditorlayer.def("createObjectsFromString", pybind::overload_cast<LevelEditorLayer*, gd::string, bool>(&LevelEditorLayer::createObjectsFromString));
    leveleditorlayer.def("createObjectsFromString", pybind::overload_cast<pybind::function>(&LevelEditorLayer::createObjectsFromString));
    leveleditorlayer.def("createObjectsFromStringO", [](LevelEditorLayer* self, gd::string p0, bool p1) { return LevelEditorLayer::createObjectsFromStringO(self, p0, p1); });
    leveleditorlayer.attr("createObjectsFromStringA") = LevelEditorLayer::createObjectsFromStringA;
    leveleditorlayer.attr("createObjectsFromStringN") = "createObjectsFromString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::createObjectsFromStringA, LevelEditorLayer::createObjectsFromStringH, (LPVOID*)&LevelEditorLayer::createObjectsFromStringO_);

    leveleditorlayer.def("getLastObjectX", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::getLastObjectX));
    leveleditorlayer.def("getLastObjectX", pybind::overload_cast<pybind::function>(&LevelEditorLayer::getLastObjectX));
    leveleditorlayer.def("getLastObjectXO", [](LevelEditorLayer* self) { return LevelEditorLayer::getLastObjectXO(self); });
    leveleditorlayer.attr("getLastObjectXA") = LevelEditorLayer::getLastObjectXA;
    leveleditorlayer.attr("getLastObjectXN") = "getLastObjectX";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::getLastObjectXA, LevelEditorLayer::getLastObjectXH, (LPVOID*)&LevelEditorLayer::getLastObjectXO_);

    leveleditorlayer.def("getLevelString", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::getLevelString));
    leveleditorlayer.def("getLevelString", pybind::overload_cast<pybind::function>(&LevelEditorLayer::getLevelString));
    leveleditorlayer.def("getLevelStringO", [](LevelEditorLayer* self) { return LevelEditorLayer::getLevelStringO(self); });
    leveleditorlayer.attr("getLevelStringA") = LevelEditorLayer::getLevelStringA;
    leveleditorlayer.attr("getLevelStringN") = "getLevelString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::getLevelStringA, LevelEditorLayer::getLevelStringH, (LPVOID*)&LevelEditorLayer::getLevelStringO_);

    leveleditorlayer.def("getNextFreeGroupID", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCArray*>(&LevelEditorLayer::getNextFreeGroupID));
    leveleditorlayer.def("getNextFreeGroupID", pybind::overload_cast<pybind::function>(&LevelEditorLayer::getNextFreeGroupID));
    leveleditorlayer.def("getNextFreeGroupIDO", [](LevelEditorLayer* self, cocos2d::CCArray* p0) { return LevelEditorLayer::getNextFreeGroupIDO(self, p0); });
    leveleditorlayer.attr("getNextFreeGroupIDA") = LevelEditorLayer::getNextFreeGroupIDA;
    leveleditorlayer.attr("getNextFreeGroupIDN") = "getNextFreeGroupID";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::getNextFreeGroupIDA, LevelEditorLayer::getNextFreeGroupIDH, (LPVOID*)&LevelEditorLayer::getNextFreeGroupIDO_);

    leveleditorlayer.def("getObjectRect", pybind::overload_cast<LevelEditorLayer*, GameObject*, bool>(&LevelEditorLayer::getObjectRect));
    leveleditorlayer.def("getObjectRect", pybind::overload_cast<pybind::function>(&LevelEditorLayer::getObjectRect));
    leveleditorlayer.def("getObjectRectO", [](LevelEditorLayer* self, GameObject* obj, bool updateRect) { return LevelEditorLayer::getObjectRectO(self, obj, updateRect); });
    leveleditorlayer.attr("getObjectRectA") = LevelEditorLayer::getObjectRectA;
    leveleditorlayer.attr("getObjectRectN") = "getObjectRect";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::getObjectRectA, LevelEditorLayer::getObjectRectH, (LPVOID*)&LevelEditorLayer::getObjectRectO_);

    leveleditorlayer.def("handleAction", pybind::overload_cast<LevelEditorLayer*, bool, cocos2d::CCArray*>(&LevelEditorLayer::handleAction));
    leveleditorlayer.def("handleAction", pybind::overload_cast<pybind::function>(&LevelEditorLayer::handleAction));
    leveleditorlayer.def("handleActionO", [](LevelEditorLayer* self, bool p0, cocos2d::CCArray* p1) { return LevelEditorLayer::handleActionO(self, p0, p1); });
    leveleditorlayer.attr("handleActionA") = LevelEditorLayer::handleActionA;
    leveleditorlayer.attr("handleActionN") = "handleAction";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::handleActionA, LevelEditorLayer::handleActionH, (LPVOID*)&LevelEditorLayer::handleActionO_);

    leveleditorlayer.def("init", pybind::overload_cast<LevelEditorLayer*, GJGameLevel*>(&LevelEditorLayer::init));
    leveleditorlayer.def("init", pybind::overload_cast<pybind::function>(&LevelEditorLayer::init));
    leveleditorlayer.def("initO", [](LevelEditorLayer* self, GJGameLevel* p0) { return LevelEditorLayer::initO(self, p0); });
    leveleditorlayer.attr("initA") = LevelEditorLayer::initA;
    leveleditorlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::initA, LevelEditorLayer::initH, (LPVOID*)&LevelEditorLayer::initO_);

    leveleditorlayer.def("objectAtPosition", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCPoint>(&LevelEditorLayer::objectAtPosition));
    leveleditorlayer.def("objectAtPosition", pybind::overload_cast<pybind::function>(&LevelEditorLayer::objectAtPosition));
    leveleditorlayer.def("objectAtPositionO", [](LevelEditorLayer* self, cocos2d::CCPoint position) { return LevelEditorLayer::objectAtPositionO(self, position); });
    leveleditorlayer.attr("objectAtPositionA") = LevelEditorLayer::objectAtPositionA;
    leveleditorlayer.attr("objectAtPositionN") = "objectAtPosition";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::objectAtPositionA, LevelEditorLayer::objectAtPositionH, (LPVOID*)&LevelEditorLayer::objectAtPositionO_);

    leveleditorlayer.def("objectsAtPosition", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCPoint>(&LevelEditorLayer::objectsAtPosition));
    leveleditorlayer.def("objectsAtPosition", pybind::overload_cast<pybind::function>(&LevelEditorLayer::objectsAtPosition));
    leveleditorlayer.def("objectsAtPositionO", [](LevelEditorLayer* self, cocos2d::CCPoint position) { return LevelEditorLayer::objectsAtPositionO(self, position); });
    leveleditorlayer.attr("objectsAtPositionA") = LevelEditorLayer::objectsAtPositionA;
    leveleditorlayer.attr("objectsAtPositionN") = "objectsAtPosition";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::objectsAtPositionA, LevelEditorLayer::objectsAtPositionH, (LPVOID*)&LevelEditorLayer::objectsAtPositionO_);

    leveleditorlayer.def("objectMoved", pybind::overload_cast<LevelEditorLayer*, GameObject*>(&LevelEditorLayer::objectMoved));
    leveleditorlayer.def("objectMoved", pybind::overload_cast<pybind::function>(&LevelEditorLayer::objectMoved));
    leveleditorlayer.def("objectMovedO", [](LevelEditorLayer* self, GameObject* p0) { return LevelEditorLayer::objectMovedO(self, p0); });
    leveleditorlayer.attr("objectMovedA") = LevelEditorLayer::objectMovedA;
    leveleditorlayer.attr("objectMovedN") = "objectMoved";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::objectMovedA, LevelEditorLayer::objectMovedH, (LPVOID*)&LevelEditorLayer::objectMovedO_);

    leveleditorlayer.def("objectsInRect", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCRect, bool>(&LevelEditorLayer::objectsInRect));
    leveleditorlayer.def("objectsInRect", pybind::overload_cast<pybind::function>(&LevelEditorLayer::objectsInRect));
    leveleditorlayer.def("objectsInRectO", [](LevelEditorLayer* self, cocos2d::CCRect rect, bool ignoreLayer) { return LevelEditorLayer::objectsInRectO(self, rect, ignoreLayer); });
    leveleditorlayer.attr("objectsInRectA") = LevelEditorLayer::objectsInRectA;
    leveleditorlayer.attr("objectsInRectN") = "objectsInRect";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::objectsInRectA, LevelEditorLayer::objectsInRectH, (LPVOID*)&LevelEditorLayer::objectsInRectO_);

    leveleditorlayer.def("onPlaytest", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::onPlaytest));
    leveleditorlayer.def("onPlaytest", pybind::overload_cast<pybind::function>(&LevelEditorLayer::onPlaytest));
    leveleditorlayer.def("onPlaytestO", [](LevelEditorLayer* self) { return LevelEditorLayer::onPlaytestO(self); });
    leveleditorlayer.attr("onPlaytestA") = LevelEditorLayer::onPlaytestA;
    leveleditorlayer.attr("onPlaytestN") = "onPlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::onPlaytestA, LevelEditorLayer::onPlaytestH, (LPVOID*)&LevelEditorLayer::onPlaytestO_);

    leveleditorlayer.def("onResumePlaytest", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::onResumePlaytest));
    leveleditorlayer.def("onResumePlaytest", pybind::overload_cast<pybind::function>(&LevelEditorLayer::onResumePlaytest));
    leveleditorlayer.def("onResumePlaytestO", [](LevelEditorLayer* self) { return LevelEditorLayer::onResumePlaytestO(self); });
    leveleditorlayer.attr("onResumePlaytestA") = LevelEditorLayer::onResumePlaytestA;
    leveleditorlayer.attr("onResumePlaytestN") = "onResumePlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::onResumePlaytestA, LevelEditorLayer::onResumePlaytestH, (LPVOID*)&LevelEditorLayer::onResumePlaytestO_);

    leveleditorlayer.def("onPausePlaytest", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::onPausePlaytest));
    leveleditorlayer.def("onPausePlaytest", pybind::overload_cast<pybind::function>(&LevelEditorLayer::onPausePlaytest));
    leveleditorlayer.def("onPausePlaytestO", [](LevelEditorLayer* self) { return LevelEditorLayer::onPausePlaytestO(self); });
    leveleditorlayer.attr("onPausePlaytestA") = LevelEditorLayer::onPausePlaytestA;
    leveleditorlayer.attr("onPausePlaytestN") = "onPausePlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::onPausePlaytestA, LevelEditorLayer::onPausePlaytestH, (LPVOID*)&LevelEditorLayer::onPausePlaytestO_);

    leveleditorlayer.def("onStopPlaytest", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::onStopPlaytest));
    leveleditorlayer.def("onStopPlaytest", pybind::overload_cast<pybind::function>(&LevelEditorLayer::onStopPlaytest));
    leveleditorlayer.def("onStopPlaytestO", [](LevelEditorLayer* self) { return LevelEditorLayer::onStopPlaytestO(self); });
    leveleditorlayer.attr("onStopPlaytestA") = LevelEditorLayer::onStopPlaytestA;
    leveleditorlayer.attr("onStopPlaytestN") = "onStopPlaytest";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::onStopPlaytestA, LevelEditorLayer::onStopPlaytestH, (LPVOID*)&LevelEditorLayer::onStopPlaytestO_);

    leveleditorlayer.def("playMusic", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::playMusic));
    leveleditorlayer.def("playMusic", pybind::overload_cast<pybind::function>(&LevelEditorLayer::playMusic));
    leveleditorlayer.def("playMusicO", [](LevelEditorLayer* self) { return LevelEditorLayer::playMusicO(self); });
    leveleditorlayer.attr("playMusicA") = LevelEditorLayer::playMusicA;
    leveleditorlayer.attr("playMusicN") = "playMusic";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::playMusicA, LevelEditorLayer::playMusicH, (LPVOID*)&LevelEditorLayer::playMusicO_);

    leveleditorlayer.def("recreateGroups", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::recreateGroups));
    leveleditorlayer.def("recreateGroups", pybind::overload_cast<pybind::function>(&LevelEditorLayer::recreateGroups));
    leveleditorlayer.def("recreateGroupsO", [](LevelEditorLayer* self) { return LevelEditorLayer::recreateGroupsO(self); });
    leveleditorlayer.attr("recreateGroupsA") = LevelEditorLayer::recreateGroupsA;
    leveleditorlayer.attr("recreateGroupsN") = "recreateGroups";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::recreateGroupsA, LevelEditorLayer::recreateGroupsH, (LPVOID*)&LevelEditorLayer::recreateGroupsO_);

    leveleditorlayer.def("removeAllObjects", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::removeAllObjects));
    leveleditorlayer.def("removeAllObjects", pybind::overload_cast<pybind::function>(&LevelEditorLayer::removeAllObjects));
    leveleditorlayer.def("removeAllObjectsO", [](LevelEditorLayer* self) { return LevelEditorLayer::removeAllObjectsO(self); });
    leveleditorlayer.attr("removeAllObjectsA") = LevelEditorLayer::removeAllObjectsA;
    leveleditorlayer.attr("removeAllObjectsN") = "removeAllObjects";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::removeAllObjectsA, LevelEditorLayer::removeAllObjectsH, (LPVOID*)&LevelEditorLayer::removeAllObjectsO_);

    leveleditorlayer.def("removeObject", pybind::overload_cast<LevelEditorLayer*, GameObject*, bool>(&LevelEditorLayer::removeObject));
    leveleditorlayer.def("removeObject", pybind::overload_cast<pybind::function>(&LevelEditorLayer::removeObject));
    leveleditorlayer.def("removeObjectO", [](LevelEditorLayer* self, GameObject* p0, bool p1) { return LevelEditorLayer::removeObjectO(self, p0, p1); });
    leveleditorlayer.attr("removeObjectA") = LevelEditorLayer::removeObjectA;
    leveleditorlayer.attr("removeObjectN") = "removeObject";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::removeObjectA, LevelEditorLayer::removeObjectH, (LPVOID*)&LevelEditorLayer::removeObjectO_);

    leveleditorlayer.def("removeSpecial", pybind::overload_cast<LevelEditorLayer*, GameObject*>(&LevelEditorLayer::removeSpecial));
    leveleditorlayer.def("removeSpecial", pybind::overload_cast<pybind::function>(&LevelEditorLayer::removeSpecial));
    leveleditorlayer.def("removeSpecialO", [](LevelEditorLayer* self, GameObject* p0) { return LevelEditorLayer::removeSpecialO(self, p0); });
    leveleditorlayer.attr("removeSpecialA") = LevelEditorLayer::removeSpecialA;
    leveleditorlayer.attr("removeSpecialN") = "removeSpecial";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::removeSpecialA, LevelEditorLayer::removeSpecialH, (LPVOID*)&LevelEditorLayer::removeSpecialO_);

    leveleditorlayer.def("resetMovingObjects", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::resetMovingObjects));
    leveleditorlayer.def("resetMovingObjects", pybind::overload_cast<pybind::function>(&LevelEditorLayer::resetMovingObjects));
    leveleditorlayer.def("resetMovingObjectsO", [](LevelEditorLayer* self) { return LevelEditorLayer::resetMovingObjectsO(self); });
    leveleditorlayer.attr("resetMovingObjectsA") = LevelEditorLayer::resetMovingObjectsA;
    leveleditorlayer.attr("resetMovingObjectsN") = "resetMovingObjects";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::resetMovingObjectsA, LevelEditorLayer::resetMovingObjectsH, (LPVOID*)&LevelEditorLayer::resetMovingObjectsO_);

    leveleditorlayer.def("resetToggledGroupsAndObjects", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::resetToggledGroupsAndObjects));
    leveleditorlayer.def("resetToggledGroupsAndObjects", pybind::overload_cast<pybind::function>(&LevelEditorLayer::resetToggledGroupsAndObjects));
    leveleditorlayer.def("resetToggledGroupsAndObjectsO", [](LevelEditorLayer* self) { return LevelEditorLayer::resetToggledGroupsAndObjectsO(self); });
    leveleditorlayer.attr("resetToggledGroupsAndObjectsA") = LevelEditorLayer::resetToggledGroupsAndObjectsA;
    leveleditorlayer.attr("resetToggledGroupsAndObjectsN") = "resetToggledGroupsAndObjects";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::resetToggledGroupsAndObjectsA, LevelEditorLayer::resetToggledGroupsAndObjectsH, (LPVOID*)&LevelEditorLayer::resetToggledGroupsAndObjectsO_);

    leveleditorlayer.def("resetEffectTriggerOptim", pybind::overload_cast<LevelEditorLayer*, GameObject*, cocos2d::CCArray*>(&LevelEditorLayer::resetEffectTriggerOptim));
    leveleditorlayer.def("resetEffectTriggerOptim", pybind::overload_cast<pybind::function>(&LevelEditorLayer::resetEffectTriggerOptim));
    leveleditorlayer.def("resetEffectTriggerOptimO", [](LevelEditorLayer* self, GameObject* obj, cocos2d::CCArray* objs) { return LevelEditorLayer::resetEffectTriggerOptimO(self, obj, objs); });
    leveleditorlayer.attr("resetEffectTriggerOptimA") = LevelEditorLayer::resetEffectTriggerOptimA;
    leveleditorlayer.attr("resetEffectTriggerOptimN") = "resetEffectTriggerOptim";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::resetEffectTriggerOptimA, LevelEditorLayer::resetEffectTriggerOptimH, (LPVOID*)&LevelEditorLayer::resetEffectTriggerOptimO_);

    leveleditorlayer.def("rotationForSlopeNearObject", pybind::overload_cast<LevelEditorLayer*, GameObject*>(&LevelEditorLayer::rotationForSlopeNearObject));
    leveleditorlayer.def("rotationForSlopeNearObject", pybind::overload_cast<pybind::function>(&LevelEditorLayer::rotationForSlopeNearObject));
    leveleditorlayer.def("rotationForSlopeNearObjectO", [](LevelEditorLayer* self, GameObject* p0) { return LevelEditorLayer::rotationForSlopeNearObjectO(self, p0); });
    leveleditorlayer.attr("rotationForSlopeNearObjectA") = LevelEditorLayer::rotationForSlopeNearObjectA;
    leveleditorlayer.attr("rotationForSlopeNearObjectN") = "rotationForSlopeNearObject";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::rotationForSlopeNearObjectA, LevelEditorLayer::rotationForSlopeNearObjectH, (LPVOID*)&LevelEditorLayer::rotationForSlopeNearObjectO_);

    leveleditorlayer.def("setupLevelStart", pybind::overload_cast<LevelEditorLayer*, LevelSettingsObject*>(&LevelEditorLayer::setupLevelStart));
    leveleditorlayer.def("setupLevelStart", pybind::overload_cast<pybind::function>(&LevelEditorLayer::setupLevelStart));
    leveleditorlayer.def("setupLevelStartO", [](LevelEditorLayer* self, LevelSettingsObject* p0) { return LevelEditorLayer::setupLevelStartO(self, p0); });
    leveleditorlayer.attr("setupLevelStartA") = LevelEditorLayer::setupLevelStartA;
    leveleditorlayer.attr("setupLevelStartN") = "setupLevelStart";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::setupLevelStartA, LevelEditorLayer::setupLevelStartH, (LPVOID*)&LevelEditorLayer::setupLevelStartO_);

    leveleditorlayer.def("toggleDualMode", pybind::overload_cast<LevelEditorLayer*, GameObject*, bool, PlayerObject*, bool>(&LevelEditorLayer::toggleDualMode));
    leveleditorlayer.def("toggleDualMode", pybind::overload_cast<pybind::function>(&LevelEditorLayer::toggleDualMode));
    leveleditorlayer.def("toggleDualModeO", [](LevelEditorLayer* self, GameObject* p0, bool p1, PlayerObject* p2, bool p3) { return LevelEditorLayer::toggleDualModeO(self, p0, p1, p2, p3); });
    leveleditorlayer.attr("toggleDualModeA") = LevelEditorLayer::toggleDualModeA;
    leveleditorlayer.attr("toggleDualModeN") = "toggleDualMode";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::toggleDualModeA, LevelEditorLayer::toggleDualModeH, (LPVOID*)&LevelEditorLayer::toggleDualModeO_);

    leveleditorlayer.def("toggleGroupPreview", pybind::overload_cast<LevelEditorLayer*, int, bool>(&LevelEditorLayer::toggleGroupPreview));
    leveleditorlayer.def("toggleGroupPreview", pybind::overload_cast<pybind::function>(&LevelEditorLayer::toggleGroupPreview));
    leveleditorlayer.def("toggleGroupPreviewO", [](LevelEditorLayer* self, int p0, bool p1) { return LevelEditorLayer::toggleGroupPreviewO(self, p0, p1); });
    leveleditorlayer.attr("toggleGroupPreviewA") = LevelEditorLayer::toggleGroupPreviewA;
    leveleditorlayer.attr("toggleGroupPreviewN") = "toggleGroupPreview";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::toggleGroupPreviewA, LevelEditorLayer::toggleGroupPreviewH, (LPVOID*)&LevelEditorLayer::toggleGroupPreviewO_);

    leveleditorlayer.def("transferDefaultColors", pybind::overload_cast<LevelEditorLayer*, GJEffectManager*, GJEffectManager*>(&LevelEditorLayer::transferDefaultColors));
    leveleditorlayer.def("transferDefaultColors", pybind::overload_cast<pybind::function>(&LevelEditorLayer::transferDefaultColors));
    leveleditorlayer.def("transferDefaultColorsO", [](LevelEditorLayer* self, GJEffectManager* p0, GJEffectManager* p1) { return LevelEditorLayer::transferDefaultColorsO(self, p0, p1); });
    leveleditorlayer.attr("transferDefaultColorsA") = LevelEditorLayer::transferDefaultColorsA;
    leveleditorlayer.attr("transferDefaultColorsN") = "transferDefaultColors";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::transferDefaultColorsA, LevelEditorLayer::transferDefaultColorsH, (LPVOID*)&LevelEditorLayer::transferDefaultColorsO_);

    leveleditorlayer.def("updateBGAndGColors", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::updateBGAndGColors));
    leveleditorlayer.def("updateBGAndGColors", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateBGAndGColors));
    leveleditorlayer.def("updateBGAndGColorsO", [](LevelEditorLayer* self) { return LevelEditorLayer::updateBGAndGColorsO(self); });
    leveleditorlayer.attr("updateBGAndGColorsA") = LevelEditorLayer::updateBGAndGColorsA;
    leveleditorlayer.attr("updateBGAndGColorsN") = "updateBGAndGColors";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateBGAndGColorsA, LevelEditorLayer::updateBGAndGColorsH, (LPVOID*)&LevelEditorLayer::updateBGAndGColorsO_);

    leveleditorlayer.def("updateBlendValues", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::updateBlendValues));
    leveleditorlayer.def("updateBlendValues", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateBlendValues));
    leveleditorlayer.def("updateBlendValuesO", [](LevelEditorLayer* self) { return LevelEditorLayer::updateBlendValuesO(self); });
    leveleditorlayer.attr("updateBlendValuesA") = LevelEditorLayer::updateBlendValuesA;
    leveleditorlayer.attr("updateBlendValuesN") = "updateBlendValues";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateBlendValuesA, LevelEditorLayer::updateBlendValuesH, (LPVOID*)&LevelEditorLayer::updateBlendValuesO_);

    leveleditorlayer.def("updateDualGround", pybind::overload_cast<LevelEditorLayer*, PlayerObject*, int, bool>(&LevelEditorLayer::updateDualGround));
    leveleditorlayer.def("updateDualGround", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateDualGround));
    leveleditorlayer.def("updateDualGroundO", [](LevelEditorLayer* self, PlayerObject* p0, int p1, bool p2) { return LevelEditorLayer::updateDualGroundO(self, p0, p1, p2); });
    leveleditorlayer.attr("updateDualGroundA") = LevelEditorLayer::updateDualGroundA;
    leveleditorlayer.attr("updateDualGroundN") = "updateDualGround";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateDualGroundA, LevelEditorLayer::updateDualGroundH, (LPVOID*)&LevelEditorLayer::updateDualGroundO_);

    leveleditorlayer.def("updateEditorMode", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::updateEditorMode));
    leveleditorlayer.def("updateEditorMode", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateEditorMode));
    leveleditorlayer.def("updateEditorModeO", [](LevelEditorLayer* self) { return LevelEditorLayer::updateEditorModeO(self); });
    leveleditorlayer.attr("updateEditorModeA") = LevelEditorLayer::updateEditorModeA;
    leveleditorlayer.attr("updateEditorModeN") = "updateEditorMode";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateEditorModeA, LevelEditorLayer::updateEditorModeH, (LPVOID*)&LevelEditorLayer::updateEditorModeO_);

    leveleditorlayer.def("updateGameObjectsNew", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::updateGameObjectsNew));
    leveleditorlayer.def("updateGameObjectsNew", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateGameObjectsNew));
    leveleditorlayer.def("updateGameObjectsNewO", [](LevelEditorLayer* self) { return LevelEditorLayer::updateGameObjectsNewO(self); });
    leveleditorlayer.attr("updateGameObjectsNewA") = LevelEditorLayer::updateGameObjectsNewA;
    leveleditorlayer.attr("updateGameObjectsNewN") = "updateGameObjectsNew";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateGameObjectsNewA, LevelEditorLayer::updateGameObjectsNewH, (LPVOID*)&LevelEditorLayer::updateGameObjectsNewO_);

    leveleditorlayer.def("updateLevelFont", pybind::overload_cast<LevelEditorLayer*, int>(&LevelEditorLayer::updateLevelFont));
    leveleditorlayer.def("updateLevelFont", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateLevelFont));
    leveleditorlayer.def("updateLevelFontO", [](LevelEditorLayer* self, int p0) { return LevelEditorLayer::updateLevelFontO(self, p0); });
    leveleditorlayer.attr("updateLevelFontA") = LevelEditorLayer::updateLevelFontA;
    leveleditorlayer.attr("updateLevelFontN") = "updateLevelFont";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateLevelFontA, LevelEditorLayer::updateLevelFontH, (LPVOID*)&LevelEditorLayer::updateLevelFontO_);

    leveleditorlayer.def("updateOptions", pybind::overload_cast<LevelEditorLayer*>(&LevelEditorLayer::updateOptions));
    leveleditorlayer.def("updateOptions", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateOptions));
    leveleditorlayer.def("updateOptionsO", [](LevelEditorLayer* self) { return LevelEditorLayer::updateOptionsO(self); });
    leveleditorlayer.attr("updateOptionsA") = LevelEditorLayer::updateOptionsA;
    leveleditorlayer.attr("updateOptionsN") = "updateOptions";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateOptionsA, LevelEditorLayer::updateOptionsH, (LPVOID*)&LevelEditorLayer::updateOptionsO_);

    leveleditorlayer.def("updateVisibility", pybind::overload_cast<LevelEditorLayer*, float>(&LevelEditorLayer::updateVisibility));
    leveleditorlayer.def("updateVisibility", pybind::overload_cast<pybind::function>(&LevelEditorLayer::updateVisibility));
    leveleditorlayer.def("updateVisibilityO", [](LevelEditorLayer* self, float delta) { return LevelEditorLayer::updateVisibilityO(self, delta); });
    leveleditorlayer.attr("updateVisibilityA") = LevelEditorLayer::updateVisibilityA;
    leveleditorlayer.attr("updateVisibilityN") = "updateVisibility";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::updateVisibilityA, LevelEditorLayer::updateVisibilityH, (LPVOID*)&LevelEditorLayer::updateVisibilityO_);

    leveleditorlayer.def("groupStickyObjects", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCArray*>(&LevelEditorLayer::groupStickyObjects));
    leveleditorlayer.def("groupStickyObjects", pybind::overload_cast<pybind::function>(&LevelEditorLayer::groupStickyObjects));
    leveleditorlayer.def("groupStickyObjectsO", [](LevelEditorLayer* self, cocos2d::CCArray* objects) { return LevelEditorLayer::groupStickyObjectsO(self, objects); });
    leveleditorlayer.attr("groupStickyObjectsA") = LevelEditorLayer::groupStickyObjectsA;
    leveleditorlayer.attr("groupStickyObjectsN") = "groupStickyObjects";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::groupStickyObjectsA, LevelEditorLayer::groupStickyObjectsH, (LPVOID*)&LevelEditorLayer::groupStickyObjectsO_);

    leveleditorlayer.def("ungroupStickyObjects", pybind::overload_cast<LevelEditorLayer*, cocos2d::CCArray*>(&LevelEditorLayer::ungroupStickyObjects));
    leveleditorlayer.def("ungroupStickyObjects", pybind::overload_cast<pybind::function>(&LevelEditorLayer::ungroupStickyObjects));
    leveleditorlayer.def("ungroupStickyObjectsO", [](LevelEditorLayer* self, cocos2d::CCArray* objects) { return LevelEditorLayer::ungroupStickyObjectsO(self, objects); });
    leveleditorlayer.attr("ungroupStickyObjectsA") = LevelEditorLayer::ungroupStickyObjectsA;
    leveleditorlayer.attr("ungroupStickyObjectsN") = "ungroupStickyObjects";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::ungroupStickyObjectsA, LevelEditorLayer::ungroupStickyObjectsH, (LPVOID*)&LevelEditorLayer::ungroupStickyObjectsO_);

    leveleditorlayer.def("copyObjectState", pybind::overload_cast<LevelEditorLayer*, GameObject*>(&LevelEditorLayer::copyObjectState));
    leveleditorlayer.def("copyObjectState", pybind::overload_cast<pybind::function>(&LevelEditorLayer::copyObjectState));
    leveleditorlayer.def("copyObjectStateO", [](LevelEditorLayer* self, GameObject* target) { return LevelEditorLayer::copyObjectStateO(self, target); });
    leveleditorlayer.attr("copyObjectStateA") = LevelEditorLayer::copyObjectStateA;
    leveleditorlayer.attr("copyObjectStateN") = "copyObjectState";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::copyObjectStateA, LevelEditorLayer::copyObjectStateH, (LPVOID*)&LevelEditorLayer::copyObjectStateO_);

    leveleditorlayer.def("pasteAtributeState", pybind::overload_cast<LevelEditorLayer*, GameObject*, cocos2d::CCArray*>(&LevelEditorLayer::pasteAtributeState));
    leveleditorlayer.def("pasteAtributeState", pybind::overload_cast<pybind::function>(&LevelEditorLayer::pasteAtributeState));
    leveleditorlayer.def("pasteAtributeStateO", [](LevelEditorLayer* self, GameObject* target, cocos2d::CCArray* targets) { return LevelEditorLayer::pasteAtributeStateO(self, target, targets); });
    leveleditorlayer.attr("pasteAtributeStateA") = LevelEditorLayer::pasteAtributeStateA;
    leveleditorlayer.attr("pasteAtributeStateN") = "pasteAtributeState";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::pasteAtributeStateA, LevelEditorLayer::pasteAtributeStateH, (LPVOID*)&LevelEditorLayer::pasteAtributeStateO_);

    leveleditorlayer.def("pasteColorState", pybind::overload_cast<LevelEditorLayer*, GameObject*, cocos2d::CCArray*>(&LevelEditorLayer::pasteColorState));
    leveleditorlayer.def("pasteColorState", pybind::overload_cast<pybind::function>(&LevelEditorLayer::pasteColorState));
    leveleditorlayer.def("pasteColorStateO", [](LevelEditorLayer* self, GameObject* target, cocos2d::CCArray* targets) { return LevelEditorLayer::pasteColorStateO(self, target, targets); });
    leveleditorlayer.attr("pasteColorStateA") = LevelEditorLayer::pasteColorStateA;
    leveleditorlayer.attr("pasteColorStateN") = "pasteColorState";
    cinnamon::hooks::hookCinnamon((PVOID)LevelEditorLayer::pasteColorStateA, LevelEditorLayer::pasteColorStateH, (LPVOID*)&LevelEditorLayer::pasteColorStateO_);

    auto levelupdatedelegate = pybind::class_<LevelUpdateDelegate>(m, "LevelUpdateDelegate");
    auto rateleveldelegate = pybind::class_<RateLevelDelegate>(m, "RateLevelDelegate");
    auto numberinputdelegate = pybind::class_<NumberInputDelegate>(m, "NumberInputDelegate");
    auto levelinfolayer = pybind::class_<LevelInfoLayer, cocos2d::CCLayer>(m, "LevelInfoLayer");
    levelinfolayer.def("create", pybind::overload_cast<GJGameLevel*>(&LevelInfoLayer::create));
    levelinfolayer.def("create", pybind::overload_cast<pybind::function>(&LevelInfoLayer::create));
    levelinfolayer.def("createO", [](GJGameLevel* level) { return LevelInfoLayer::createO(level); });
    levelinfolayer.attr("createA") = LevelInfoLayer::createA;
    levelinfolayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::createA, LevelInfoLayer::createH, (LPVOID*)&LevelInfoLayer::createO_);

    levelinfolayer.def("init", pybind::overload_cast<LevelInfoLayer*, GJGameLevel*>(&LevelInfoLayer::init));
    levelinfolayer.def("init", pybind::overload_cast<pybind::function>(&LevelInfoLayer::init));
    levelinfolayer.def("initO", [](LevelInfoLayer* self, GJGameLevel* level) { return LevelInfoLayer::initO(self, level); });
    levelinfolayer.attr("initA") = LevelInfoLayer::initA;
    levelinfolayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::initA, LevelInfoLayer::initH, (LPVOID*)&LevelInfoLayer::initO_);

    levelinfolayer.def("onGarage", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onGarage));
    levelinfolayer.def("onGarage", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onGarage));
    levelinfolayer.def("onGarageO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onGarageO(self, sender); });
    levelinfolayer.attr("onGarageA") = LevelInfoLayer::onGarageA;
    levelinfolayer.attr("onGarageN") = "onGarage";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onGarageA, LevelInfoLayer::onGarageH, (LPVOID*)&LevelInfoLayer::onGarageO_);

    levelinfolayer.def("onViewProfile", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onViewProfile));
    levelinfolayer.def("onViewProfile", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onViewProfile));
    levelinfolayer.def("onViewProfileO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onViewProfileO(self, sender); });
    levelinfolayer.attr("onViewProfileA") = LevelInfoLayer::onViewProfileA;
    levelinfolayer.attr("onViewProfileN") = "onViewProfile";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onViewProfileA, LevelInfoLayer::onViewProfileH, (LPVOID*)&LevelInfoLayer::onViewProfileO_);

    levelinfolayer.def("onLevelInfo", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onLevelInfo));
    levelinfolayer.def("onLevelInfo", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onLevelInfo));
    levelinfolayer.def("onLevelInfoO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onLevelInfoO(self, sender); });
    levelinfolayer.attr("onLevelInfoA") = LevelInfoLayer::onLevelInfoA;
    levelinfolayer.attr("onLevelInfoN") = "onLevelInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onLevelInfoA, LevelInfoLayer::onLevelInfoH, (LPVOID*)&LevelInfoLayer::onLevelInfoO_);

    levelinfolayer.def("setupProgressBars", pybind::overload_cast<LevelInfoLayer*>(&LevelInfoLayer::setupProgressBars));
    levelinfolayer.def("setupProgressBars", pybind::overload_cast<pybind::function>(&LevelInfoLayer::setupProgressBars));
    levelinfolayer.def("setupProgressBarsO", [](LevelInfoLayer* self) { return LevelInfoLayer::setupProgressBarsO(self); });
    levelinfolayer.attr("setupProgressBarsA") = LevelInfoLayer::setupProgressBarsA;
    levelinfolayer.attr("setupProgressBarsN") = "setupProgressBars";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::setupProgressBarsA, LevelInfoLayer::setupProgressBarsH, (LPVOID*)&LevelInfoLayer::setupProgressBarsO_);

    levelinfolayer.def("setupLevelInfo", pybind::overload_cast<LevelInfoLayer*>(&LevelInfoLayer::setupLevelInfo));
    levelinfolayer.def("setupLevelInfo", pybind::overload_cast<pybind::function>(&LevelInfoLayer::setupLevelInfo));
    levelinfolayer.def("setupLevelInfoO", [](LevelInfoLayer* self) { return LevelInfoLayer::setupLevelInfoO(self); });
    levelinfolayer.attr("setupLevelInfoA") = LevelInfoLayer::setupLevelInfoA;
    levelinfolayer.attr("setupLevelInfoN") = "setupLevelInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::setupLevelInfoA, LevelInfoLayer::setupLevelInfoH, (LPVOID*)&LevelInfoLayer::setupLevelInfoO_);

    levelinfolayer.def("downloadLevel", pybind::overload_cast<LevelInfoLayer*>(&LevelInfoLayer::downloadLevel));
    levelinfolayer.def("downloadLevel", pybind::overload_cast<pybind::function>(&LevelInfoLayer::downloadLevel));
    levelinfolayer.def("downloadLevelO", [](LevelInfoLayer* self) { return LevelInfoLayer::downloadLevelO(self); });
    levelinfolayer.attr("downloadLevelA") = LevelInfoLayer::downloadLevelA;
    levelinfolayer.attr("downloadLevelN") = "downloadLevel";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::downloadLevelA, LevelInfoLayer::downloadLevelH, (LPVOID*)&LevelInfoLayer::downloadLevelO_);

    levelinfolayer.def("onPlay", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onPlay));
    levelinfolayer.def("onPlay", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onPlay));
    levelinfolayer.def("onPlayO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onPlayO(self, sender); });
    levelinfolayer.attr("onPlayA") = LevelInfoLayer::onPlayA;
    levelinfolayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onPlayA, LevelInfoLayer::onPlayH, (LPVOID*)&LevelInfoLayer::onPlayO_);

    levelinfolayer.def("levelDownloadFinished", pybind::overload_cast<LevelInfoLayer*, GJGameLevel*>(&LevelInfoLayer::levelDownloadFinished));
    levelinfolayer.def("levelDownloadFinished", pybind::overload_cast<pybind::function>(&LevelInfoLayer::levelDownloadFinished));
    levelinfolayer.def("levelDownloadFinishedO", [](LevelInfoLayer* self, GJGameLevel* p0) { return LevelInfoLayer::levelDownloadFinishedO(self, p0); });
    levelinfolayer.attr("levelDownloadFinishedA") = LevelInfoLayer::levelDownloadFinishedA;
    levelinfolayer.attr("levelDownloadFinishedN") = "levelDownloadFinished";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::levelDownloadFinishedA, LevelInfoLayer::levelDownloadFinishedH, (LPVOID*)&LevelInfoLayer::levelDownloadFinishedO_);

    levelinfolayer.def("levelUpdateFinished", pybind::overload_cast<LevelInfoLayer*, GJGameLevel*, UpdateResponse>(&LevelInfoLayer::levelUpdateFinished));
    levelinfolayer.def("levelUpdateFinished", pybind::overload_cast<pybind::function>(&LevelInfoLayer::levelUpdateFinished));
    levelinfolayer.def("levelUpdateFinishedO", [](LevelInfoLayer* self, GJGameLevel* p0, UpdateResponse p1) { return LevelInfoLayer::levelUpdateFinishedO(self, p0, p1); });
    levelinfolayer.attr("levelUpdateFinishedA") = LevelInfoLayer::levelUpdateFinishedA;
    levelinfolayer.attr("levelUpdateFinishedN") = "levelUpdateFinished";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::levelUpdateFinishedA, LevelInfoLayer::levelUpdateFinishedH, (LPVOID*)&LevelInfoLayer::levelUpdateFinishedO_);

    levelinfolayer.def("showUpdateAlert", pybind::overload_cast<LevelInfoLayer*, UpdateResponse>(&LevelInfoLayer::showUpdateAlert));
    levelinfolayer.def("showUpdateAlert", pybind::overload_cast<pybind::function>(&LevelInfoLayer::showUpdateAlert));
    levelinfolayer.def("showUpdateAlertO", [](LevelInfoLayer* self, UpdateResponse p0) { return LevelInfoLayer::showUpdateAlertO(self, p0); });
    levelinfolayer.attr("showUpdateAlertA") = LevelInfoLayer::showUpdateAlertA;
    levelinfolayer.attr("showUpdateAlertN") = "showUpdateAlert";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::showUpdateAlertA, LevelInfoLayer::showUpdateAlertH, (LPVOID*)&LevelInfoLayer::showUpdateAlertO_);

    auto levelleaderboard = pybind::class_<LevelLeaderboard, FLAlertLayer>(m, "LevelLeaderboard");
    levelleaderboard.def("onChangeType", pybind::overload_cast<LevelLeaderboard*, cocos2d::CCObject*>(&LevelLeaderboard::onChangeType));
    levelleaderboard.def("onChangeType", pybind::overload_cast<pybind::function>(&LevelLeaderboard::onChangeType));
    levelleaderboard.def("onChangeTypeO", [](LevelLeaderboard* self, cocos2d::CCObject* sender) { return LevelLeaderboard::onChangeTypeO(self, sender); });
    levelleaderboard.attr("onChangeTypeA") = LevelLeaderboard::onChangeTypeA;
    levelleaderboard.attr("onChangeTypeN") = "onChangeType";
    cinnamon::hooks::hookCinnamon((PVOID)LevelLeaderboard::onChangeTypeA, LevelLeaderboard::onChangeTypeH, (LPVOID*)&LevelLeaderboard::onChangeTypeO_);

    levelleaderboard.def("onUpdate", pybind::overload_cast<LevelLeaderboard*, cocos2d::CCObject*>(&LevelLeaderboard::onUpdate));
    levelleaderboard.def("onUpdate", pybind::overload_cast<pybind::function>(&LevelLeaderboard::onUpdate));
    levelleaderboard.def("onUpdateO", [](LevelLeaderboard* self, cocos2d::CCObject* sender) { return LevelLeaderboard::onUpdateO(self, sender); });
    levelleaderboard.attr("onUpdateA") = LevelLeaderboard::onUpdateA;
    levelleaderboard.attr("onUpdateN") = "onUpdate";
    cinnamon::hooks::hookCinnamon((PVOID)LevelLeaderboard::onUpdateA, LevelLeaderboard::onUpdateH, (LPVOID*)&LevelLeaderboard::onUpdateO_);

    levelleaderboard.def("init", pybind::overload_cast<LevelLeaderboard*, GJGameLevel*, LevelLeaderboardType>(&LevelLeaderboard::init));
    levelleaderboard.def("init", pybind::overload_cast<pybind::function>(&LevelLeaderboard::init));
    levelleaderboard.def("initO", [](LevelLeaderboard* self, GJGameLevel* level, LevelLeaderboardType type) { return LevelLeaderboard::initO(self, level, type); });
    levelleaderboard.attr("initA") = LevelLeaderboard::initA;
    levelleaderboard.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelLeaderboard::initA, LevelLeaderboard::initH, (LPVOID*)&LevelLeaderboard::initO_);

    levelleaderboard.def("create", pybind::overload_cast<GJGameLevel*, LevelLeaderboardType>(&LevelLeaderboard::create));
    levelleaderboard.def("create", pybind::overload_cast<pybind::function>(&LevelLeaderboard::create));
    levelleaderboard.def("createO", [](GJGameLevel* level, LevelLeaderboardType leaderboardType) { return LevelLeaderboard::createO(level, leaderboardType); });
    levelleaderboard.attr("createA") = LevelLeaderboard::createA;
    levelleaderboard.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelLeaderboard::createA, LevelLeaderboard::createH, (LPVOID*)&LevelLeaderboard::createO_);

    levelleaderboard.def("onClose", pybind::overload_cast<LevelLeaderboard*, cocos2d::CCObject*>(&LevelLeaderboard::onClose));
    levelleaderboard.def("onClose", pybind::overload_cast<pybind::function>(&LevelLeaderboard::onClose));
    levelleaderboard.def("onCloseO", [](LevelLeaderboard* self, cocos2d::CCObject* p0) { return LevelLeaderboard::onCloseO(self, p0); });
    levelleaderboard.attr("onCloseA") = LevelLeaderboard::onCloseA;
    levelleaderboard.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)LevelLeaderboard::onCloseA, LevelLeaderboard::onCloseH, (LPVOID*)&LevelLeaderboard::onCloseO_);

    auto levelpage = pybind::class_<LevelPage, cocos2d::CCLayer>(m, "LevelPage");
    levelpage.def("onInfo", pybind::overload_cast<LevelPage*, cocos2d::CCObject*>(&LevelPage::onInfo));
    levelpage.def("onInfo", pybind::overload_cast<pybind::function>(&LevelPage::onInfo));
    levelpage.def("onInfoO", [](LevelPage* self, cocos2d::CCObject* sender) { return LevelPage::onInfoO(self, sender); });
    levelpage.attr("onInfoA") = LevelPage::onInfoA;
    levelpage.attr("onInfoN") = "onInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelPage::onInfoA, LevelPage::onInfoH, (LPVOID*)&LevelPage::onInfoO_);

    auto levelsearchlayer = pybind::class_<LevelSearchLayer, cocos2d::CCLayer>(m, "LevelSearchLayer");
    levelsearchlayer.def("create", pybind::overload_cast<>(&LevelSearchLayer::create));
    levelsearchlayer.def("create", pybind::overload_cast<pybind::function>(&LevelSearchLayer::create));
    levelsearchlayer.def("createO", []() { return LevelSearchLayer::createO(); });
    levelsearchlayer.attr("createA") = LevelSearchLayer::createA;
    levelsearchlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSearchLayer::createA, LevelSearchLayer::createH, (LPVOID*)&LevelSearchLayer::createO_);

    levelsearchlayer.def("init", pybind::overload_cast<LevelSearchLayer*>(&LevelSearchLayer::init));
    levelsearchlayer.def("init", pybind::overload_cast<pybind::function>(&LevelSearchLayer::init));
    levelsearchlayer.def("initO", [](LevelSearchLayer* self) { return LevelSearchLayer::initO(self); });
    levelsearchlayer.attr("initA") = LevelSearchLayer::initA;
    levelsearchlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSearchLayer::initA, LevelSearchLayer::initH, (LPVOID*)&LevelSearchLayer::initO_);

    levelsearchlayer.def("getSearchObject", pybind::overload_cast<LevelSearchLayer*, SearchType, gd::string>(&LevelSearchLayer::getSearchObject));
    levelsearchlayer.def("getSearchObject", pybind::overload_cast<pybind::function>(&LevelSearchLayer::getSearchObject));
    levelsearchlayer.def("getSearchObjectO", [](LevelSearchLayer* self, SearchType p0, gd::string p1) { return LevelSearchLayer::getSearchObjectO(self, p0, p1); });
    levelsearchlayer.attr("getSearchObjectA") = LevelSearchLayer::getSearchObjectA;
    levelsearchlayer.attr("getSearchObjectN") = "getSearchObject";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSearchLayer::getSearchObjectA, LevelSearchLayer::getSearchObjectH, (LPVOID*)&LevelSearchLayer::getSearchObjectO_);

    levelsearchlayer.def("onMoreOptions", pybind::overload_cast<LevelSearchLayer*, cocos2d::CCObject*>(&LevelSearchLayer::onMoreOptions));
    levelsearchlayer.def("onMoreOptions", pybind::overload_cast<pybind::function>(&LevelSearchLayer::onMoreOptions));
    levelsearchlayer.def("onMoreOptionsO", [](LevelSearchLayer* self, cocos2d::CCObject* p0) { return LevelSearchLayer::onMoreOptionsO(self, p0); });
    levelsearchlayer.attr("onMoreOptionsA") = LevelSearchLayer::onMoreOptionsA;
    levelsearchlayer.attr("onMoreOptionsN") = "onMoreOptions";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSearchLayer::onMoreOptionsA, LevelSearchLayer::onMoreOptionsH, (LPVOID*)&LevelSearchLayer::onMoreOptionsO_);

    levelsearchlayer.def("onSearch", pybind::overload_cast<LevelSearchLayer*, cocos2d::CCObject*>(&LevelSearchLayer::onSearch));
    levelsearchlayer.def("onSearch", pybind::overload_cast<pybind::function>(&LevelSearchLayer::onSearch));
    levelsearchlayer.def("onSearchO", [](LevelSearchLayer* self, cocos2d::CCObject* p0) { return LevelSearchLayer::onSearchO(self, p0); });
    levelsearchlayer.attr("onSearchA") = LevelSearchLayer::onSearchA;
    levelsearchlayer.attr("onSearchN") = "onSearch";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSearchLayer::onSearchA, LevelSearchLayer::onSearchH, (LPVOID*)&LevelSearchLayer::onSearchO_);

    auto levelselectlayer = pybind::class_<LevelSelectLayer, cocos2d::CCLayer>(m, "LevelSelectLayer");
    levelselectlayer.def("create", pybind::overload_cast<int>(&LevelSelectLayer::create));
    levelselectlayer.def("create", pybind::overload_cast<pybind::function>(&LevelSelectLayer::create));
    levelselectlayer.def("createO", [](int lvl) { return LevelSelectLayer::createO(lvl); });
    levelselectlayer.attr("createA") = LevelSelectLayer::createA;
    levelselectlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::createA, LevelSelectLayer::createH, (LPVOID*)&LevelSelectLayer::createO_);

    auto secretlayer4 = pybind::class_<SecretLayer4, cocos2d::CCLayer>(m, "SecretLayer4");
    auto selectartdelegate = pybind::class_<SelectArtDelegate>(m, "SelectArtDelegate");
    auto customsonglayerdelegate = pybind::class_<CustomSongLayerDelegate>(m, "CustomSongLayerDelegate");
    auto levelsettingslayer = pybind::class_<LevelSettingsLayer, FLAlertLayer>(m, "LevelSettingsLayer");
    levelsettingslayer.def("create", pybind::overload_cast<LevelSettingsObject*, LevelEditorLayer*>(&LevelSettingsLayer::create));
    levelsettingslayer.def("create", pybind::overload_cast<pybind::function>(&LevelSettingsLayer::create));
    levelsettingslayer.def("createO", [](LevelSettingsObject* levelSettings, LevelEditorLayer* editor) { return LevelSettingsLayer::createO(levelSettings, editor); });
    levelsettingslayer.attr("createA") = LevelSettingsLayer::createA;
    levelsettingslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsLayer::createA, LevelSettingsLayer::createH, (LPVOID*)&LevelSettingsLayer::createO_);

    levelsettingslayer.def("init", pybind::overload_cast<LevelSettingsLayer*, LevelSettingsObject*, LevelEditorLayer*>(&LevelSettingsLayer::init));
    levelsettingslayer.def("init", pybind::overload_cast<pybind::function>(&LevelSettingsLayer::init));
    levelsettingslayer.def("initO", [](LevelSettingsLayer* self, LevelSettingsObject* levelSettings, LevelEditorLayer* editor) { return LevelSettingsLayer::initO(self, levelSettings, editor); });
    levelsettingslayer.attr("initA") = LevelSettingsLayer::initA;
    levelsettingslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsLayer::initA, LevelSettingsLayer::initH, (LPVOID*)&LevelSettingsLayer::initO_);

    levelsettingslayer.def("onClose", pybind::overload_cast<LevelSettingsLayer*, cocos2d::CCObject*>(&LevelSettingsLayer::onClose));
    levelsettingslayer.def("onClose", pybind::overload_cast<pybind::function>(&LevelSettingsLayer::onClose));
    levelsettingslayer.def("onCloseO", [](LevelSettingsLayer* self, cocos2d::CCObject* sender) { return LevelSettingsLayer::onCloseO(self, sender); });
    levelsettingslayer.attr("onCloseA") = LevelSettingsLayer::onCloseA;
    levelsettingslayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsLayer::onCloseA, LevelSettingsLayer::onCloseH, (LPVOID*)&LevelSettingsLayer::onCloseO_);

    auto levelsettingsobject = pybind::class_<LevelSettingsObject, cocos2d::CCNode>(m, "LevelSettingsObject");
    levelsettingsobject.def("init", pybind::overload_cast<LevelSettingsObject*>(&LevelSettingsObject::init));
    levelsettingsobject.def("init", pybind::overload_cast<pybind::function>(&LevelSettingsObject::init));
    levelsettingsobject.def("initO", [](LevelSettingsObject* self) { return LevelSettingsObject::initO(self); });
    levelsettingsobject.attr("initA") = LevelSettingsObject::initA;
    levelsettingsobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::initA, LevelSettingsObject::initH, (LPVOID*)&LevelSettingsObject::initO_);

    levelsettingsobject.def("create", pybind::overload_cast<>(&LevelSettingsObject::create));
    levelsettingsobject.def("create", pybind::overload_cast<pybind::function>(&LevelSettingsObject::create));
    levelsettingsobject.def("createO", []() { return LevelSettingsObject::createO(); });
    levelsettingsobject.attr("createA") = LevelSettingsObject::createA;
    levelsettingsobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::createA, LevelSettingsObject::createH, (LPVOID*)&LevelSettingsObject::createO_);

    levelsettingsobject.def("objectFromDict", pybind::overload_cast<cocos2d::CCDictionary*>(&LevelSettingsObject::objectFromDict));
    levelsettingsobject.def("objectFromDict", pybind::overload_cast<pybind::function>(&LevelSettingsObject::objectFromDict));
    levelsettingsobject.def("objectFromDictO", [](cocos2d::CCDictionary* p0) { return LevelSettingsObject::objectFromDictO(p0); });
    levelsettingsobject.attr("objectFromDictA") = LevelSettingsObject::objectFromDictA;
    levelsettingsobject.attr("objectFromDictN") = "objectFromDict";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::objectFromDictA, LevelSettingsObject::objectFromDictH, (LPVOID*)&LevelSettingsObject::objectFromDictO_);

    levelsettingsobject.def("objectFromString", pybind::overload_cast<gd::string>(&LevelSettingsObject::objectFromString));
    levelsettingsobject.def("objectFromString", pybind::overload_cast<pybind::function>(&LevelSettingsObject::objectFromString));
    levelsettingsobject.def("objectFromStringO", [](gd::string p0) { return LevelSettingsObject::objectFromStringO(p0); });
    levelsettingsobject.attr("objectFromStringA") = LevelSettingsObject::objectFromStringA;
    levelsettingsobject.attr("objectFromStringN") = "objectFromString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::objectFromStringA, LevelSettingsObject::objectFromStringH, (LPVOID*)&LevelSettingsObject::objectFromStringO_);

    levelsettingsobject.def("setupColorsFromLegacyMode", pybind::overload_cast<LevelSettingsObject*, cocos2d::CCDictionary*>(&LevelSettingsObject::setupColorsFromLegacyMode));
    levelsettingsobject.def("setupColorsFromLegacyMode", pybind::overload_cast<pybind::function>(&LevelSettingsObject::setupColorsFromLegacyMode));
    levelsettingsobject.def("setupColorsFromLegacyModeO", [](LevelSettingsObject* self, cocos2d::CCDictionary* p0) { return LevelSettingsObject::setupColorsFromLegacyModeO(self, p0); });
    levelsettingsobject.attr("setupColorsFromLegacyModeA") = LevelSettingsObject::setupColorsFromLegacyModeA;
    levelsettingsobject.attr("setupColorsFromLegacyModeN") = "setupColorsFromLegacyMode";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::setupColorsFromLegacyModeA, LevelSettingsObject::setupColorsFromLegacyModeH, (LPVOID*)&LevelSettingsObject::setupColorsFromLegacyModeO_);

    levelsettingsobject.def("getSaveString", pybind::overload_cast<LevelSettingsObject*>(&LevelSettingsObject::getSaveString));
    levelsettingsobject.def("getSaveString", pybind::overload_cast<pybind::function>(&LevelSettingsObject::getSaveString));
    levelsettingsobject.def("getSaveStringO", [](LevelSettingsObject* self) { return LevelSettingsObject::getSaveStringO(self); });
    levelsettingsobject.attr("getSaveStringA") = LevelSettingsObject::getSaveStringA;
    levelsettingsobject.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSettingsObject::getSaveStringA, LevelSettingsObject::getSaveStringH, (LPVOID*)&LevelSettingsObject::getSaveStringO_);

    auto leveluploaddelegate = pybind::class_<LevelUploadDelegate>(m, "LevelUploadDelegate");
    auto likeitemlayer = pybind::class_<LikeItemLayer, FLAlertLayer>(m, "LikeItemLayer");
    likeitemlayer.def("create", pybind::overload_cast<LikeItemType, int, int>(&LikeItemLayer::create));
    likeitemlayer.def("create", pybind::overload_cast<pybind::function>(&LikeItemLayer::create));
    likeitemlayer.def("createO", [](LikeItemType type, int itemID, int commentSourceID) { return LikeItemLayer::createO(type, itemID, commentSourceID); });
    likeitemlayer.attr("createA") = LikeItemLayer::createA;
    likeitemlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::createA, LikeItemLayer::createH, (LPVOID*)&LikeItemLayer::createO_);

    auto listbuttonbar = pybind::class_<ListButtonBar, cocos2d::CCNode>(m, "ListButtonBar");
    auto loadingcircle = pybind::class_<LoadingCircle, cocos2d::CCLayerColor>(m, "LoadingCircle");
    loadingcircle.def("create", pybind::overload_cast<>(&LoadingCircle::create));
    loadingcircle.def("create", pybind::overload_cast<pybind::function>(&LoadingCircle::create));
    loadingcircle.def("createO", []() { return LoadingCircle::createO(); });
    loadingcircle.attr("createA") = LoadingCircle::createA;
    loadingcircle.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::createA, LoadingCircle::createH, (LPVOID*)&LoadingCircle::createO_);

    loadingcircle.def("show", pybind::overload_cast<LoadingCircle*>(&LoadingCircle::show));
    loadingcircle.def("show", pybind::overload_cast<pybind::function>(&LoadingCircle::show));
    loadingcircle.def("showO", [](LoadingCircle* self) { return LoadingCircle::showO(self); });
    loadingcircle.attr("showA") = LoadingCircle::showA;
    loadingcircle.attr("showN") = "show";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::showA, LoadingCircle::showH, (LPVOID*)&LoadingCircle::showO_);

    loadingcircle.def("fadeAndRemove", pybind::overload_cast<LoadingCircle*>(&LoadingCircle::fadeAndRemove));
    loadingcircle.def("fadeAndRemove", pybind::overload_cast<pybind::function>(&LoadingCircle::fadeAndRemove));
    loadingcircle.def("fadeAndRemoveO", [](LoadingCircle* self) { return LoadingCircle::fadeAndRemoveO(self); });
    loadingcircle.attr("fadeAndRemoveA") = LoadingCircle::fadeAndRemoveA;
    loadingcircle.attr("fadeAndRemoveN") = "fadeAndRemove";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::fadeAndRemoveA, LoadingCircle::fadeAndRemoveH, (LPVOID*)&LoadingCircle::fadeAndRemoveO_);

    auto loadinglayer = pybind::class_<LoadingLayer, cocos2d::CCLayer>(m, "LoadingLayer");
    loadinglayer.def("create", pybind::overload_cast<bool>(&LoadingLayer::create));
    loadinglayer.def("create", pybind::overload_cast<pybind::function>(&LoadingLayer::create));
    loadinglayer.def("createO", [](bool fromReload) { return LoadingLayer::createO(fromReload); });
    loadinglayer.attr("createA") = LoadingLayer::createA;
    loadinglayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::createA, LoadingLayer::createH, (LPVOID*)&LoadingLayer::createO_);

    loadinglayer.def("init", pybind::overload_cast<LoadingLayer*, bool>(&LoadingLayer::init));
    loadinglayer.def("init", pybind::overload_cast<pybind::function>(&LoadingLayer::init));
    loadinglayer.def("initO", [](LoadingLayer* self, bool fromReload) { return LoadingLayer::initO(self, fromReload); });
    loadinglayer.attr("initA") = LoadingLayer::initA;
    loadinglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::initA, LoadingLayer::initH, (LPVOID*)&LoadingLayer::initO_);

    loadinglayer.def("loadAssets", pybind::overload_cast<LoadingLayer*>(&LoadingLayer::loadAssets));
    loadinglayer.def("loadAssets", pybind::overload_cast<pybind::function>(&LoadingLayer::loadAssets));
    loadinglayer.def("loadAssetsO", [](LoadingLayer* self) { return LoadingLayer::loadAssetsO(self); });
    loadinglayer.attr("loadAssetsA") = LoadingLayer::loadAssetsA;
    loadinglayer.attr("loadAssetsN") = "loadAssets";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::loadAssetsA, LoadingLayer::loadAssetsH, (LPVOID*)&LoadingLayer::loadAssetsO_);

    loadinglayer.def("loadingFinished", pybind::overload_cast<LoadingLayer*>(&LoadingLayer::loadingFinished));
    loadinglayer.def("loadingFinished", pybind::overload_cast<pybind::function>(&LoadingLayer::loadingFinished));
    loadinglayer.def("loadingFinishedO", [](LoadingLayer* self) { return LoadingLayer::loadingFinishedO(self); });
    loadinglayer.attr("loadingFinishedA") = LoadingLayer::loadingFinishedA;
    loadinglayer.attr("loadingFinishedN") = "loadingFinished";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::loadingFinishedA, LoadingLayer::loadingFinishedH, (LPVOID*)&LoadingLayer::loadingFinishedO_);

    auto locallevelmanager = pybind::class_<LocalLevelManager, GManager>(m, "LocalLevelManager");
    locallevelmanager.def("sharedState", pybind::overload_cast<>(&LocalLevelManager::sharedState));
    locallevelmanager.def("sharedState", pybind::overload_cast<pybind::function>(&LocalLevelManager::sharedState));
    locallevelmanager.def("sharedStateO", []() { return LocalLevelManager::sharedStateO(); });
    locallevelmanager.attr("sharedStateA") = LocalLevelManager::sharedStateA;
    locallevelmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)LocalLevelManager::sharedStateA, LocalLevelManager::sharedStateH, (LPVOID*)&LocalLevelManager::sharedStateO_);

    locallevelmanager.def("get", pybind::overload_cast<>(&LocalLevelManager::get));
    locallevelmanager.def("encodeDataTo", pybind::overload_cast<LocalLevelManager*, DS_Dictionary*>(&LocalLevelManager::encodeDataTo));
    locallevelmanager.def("encodeDataTo", pybind::overload_cast<pybind::function>(&LocalLevelManager::encodeDataTo));
    locallevelmanager.def("encodeDataToO", [](LocalLevelManager* self, DS_Dictionary* data) { return LocalLevelManager::encodeDataToO(self, data); });
    locallevelmanager.attr("encodeDataToA") = LocalLevelManager::encodeDataToA;
    locallevelmanager.attr("encodeDataToN") = "encodeDataTo";
    cinnamon::hooks::hookCinnamon((PVOID)LocalLevelManager::encodeDataToA, LocalLevelManager::encodeDataToH, (LPVOID*)&LocalLevelManager::encodeDataToO_);

    locallevelmanager.def("dataLoaded", pybind::overload_cast<LocalLevelManager*, DS_Dictionary*>(&LocalLevelManager::dataLoaded));
    locallevelmanager.def("dataLoaded", pybind::overload_cast<pybind::function>(&LocalLevelManager::dataLoaded));
    locallevelmanager.def("dataLoadedO", [](LocalLevelManager* self, DS_Dictionary* data) { return LocalLevelManager::dataLoadedO(self, data); });
    locallevelmanager.attr("dataLoadedA") = LocalLevelManager::dataLoadedA;
    locallevelmanager.attr("dataLoadedN") = "dataLoaded";
    cinnamon::hooks::hookCinnamon((PVOID)LocalLevelManager::dataLoadedA, LocalLevelManager::dataLoadedH, (LPVOID*)&LocalLevelManager::dataLoadedO_);

    locallevelmanager.def("getAllLevelsInDict", pybind::overload_cast<LocalLevelManager*>(&LocalLevelManager::getAllLevelsInDict));
    locallevelmanager.def("getAllLevelsInDict", pybind::overload_cast<pybind::function>(&LocalLevelManager::getAllLevelsInDict));
    locallevelmanager.def("getAllLevelsInDictO", [](LocalLevelManager* self) { return LocalLevelManager::getAllLevelsInDictO(self); });
    locallevelmanager.attr("getAllLevelsInDictA") = LocalLevelManager::getAllLevelsInDictA;
    locallevelmanager.attr("getAllLevelsInDictN") = "getAllLevelsInDict";
    cinnamon::hooks::hookCinnamon((PVOID)LocalLevelManager::getAllLevelsInDictA, LocalLevelManager::getAllLevelsInDictH, (LPVOID*)&LocalLevelManager::getAllLevelsInDictO_);

    auto mappackcell = pybind::class_<MapPackCell, TableViewCell>(m, "MapPackCell");
    mappackcell.def("updateBGColor", pybind::overload_cast<MapPackCell*, int>(&MapPackCell::updateBGColor));
    mappackcell.def("updateBGColor", pybind::overload_cast<pybind::function>(&MapPackCell::updateBGColor));
    mappackcell.def("updateBGColorO", [](MapPackCell* self, int index) { return MapPackCell::updateBGColorO(self, index); });
    mappackcell.attr("updateBGColorA") = MapPackCell::updateBGColorA;
    mappackcell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)MapPackCell::updateBGColorA, MapPackCell::updateBGColorH, (LPVOID*)&MapPackCell::updateBGColorO_);

    mappackcell.def("loadFromMapPack", pybind::overload_cast<MapPackCell*, GJMapPack *>(&MapPackCell::loadFromMapPack));
    mappackcell.def("loadFromMapPack", pybind::overload_cast<pybind::function>(&MapPackCell::loadFromMapPack));
    mappackcell.def("loadFromMapPackO", [](MapPackCell* self, GJMapPack * p0) { return MapPackCell::loadFromMapPackO(self, p0); });
    mappackcell.attr("loadFromMapPackA") = MapPackCell::loadFromMapPackA;
    mappackcell.attr("loadFromMapPackN") = "loadFromMapPack";
    cinnamon::hooks::hookCinnamon((PVOID)MapPackCell::loadFromMapPackA, MapPackCell::loadFromMapPackH, (LPVOID*)&MapPackCell::loadFromMapPackO_);

    auto menugamelayer = pybind::class_<MenuGameLayer, cocos2d::CCLayer>(m, "MenuGameLayer");
    menugamelayer.def("resetPlayer", pybind::overload_cast<MenuGameLayer*>(&MenuGameLayer::resetPlayer));
    menugamelayer.def("resetPlayer", pybind::overload_cast<pybind::function>(&MenuGameLayer::resetPlayer));
    menugamelayer.def("resetPlayerO", [](MenuGameLayer* self) { return MenuGameLayer::resetPlayerO(self); });
    menugamelayer.attr("resetPlayerA") = MenuGameLayer::resetPlayerA;
    menugamelayer.attr("resetPlayerN") = "resetPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)MenuGameLayer::resetPlayerA, MenuGameLayer::resetPlayerH, (LPVOID*)&MenuGameLayer::resetPlayerO_);

    menugamelayer.def("destroyPlayer", pybind::overload_cast<MenuGameLayer*>(&MenuGameLayer::destroyPlayer));
    menugamelayer.def("destroyPlayer", pybind::overload_cast<pybind::function>(&MenuGameLayer::destroyPlayer));
    menugamelayer.def("destroyPlayerO", [](MenuGameLayer* self) { return MenuGameLayer::destroyPlayerO(self); });
    menugamelayer.attr("destroyPlayerA") = MenuGameLayer::destroyPlayerA;
    menugamelayer.attr("destroyPlayerN") = "destroyPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)MenuGameLayer::destroyPlayerA, MenuGameLayer::destroyPlayerH, (LPVOID*)&MenuGameLayer::destroyPlayerO_);

    menugamelayer.def("update", pybind::overload_cast<MenuGameLayer*, float>(&MenuGameLayer::update));
    menugamelayer.def("update", pybind::overload_cast<pybind::function>(&MenuGameLayer::update));
    menugamelayer.def("updateO", [](MenuGameLayer* self, float p0) { return MenuGameLayer::updateO(self, p0); });
    menugamelayer.attr("updateA") = MenuGameLayer::updateA;
    menugamelayer.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)MenuGameLayer::updateA, MenuGameLayer::updateH, (LPVOID*)&MenuGameLayer::updateO_);

    menugamelayer.def("init", pybind::overload_cast<MenuGameLayer*>(&MenuGameLayer::init));
    menugamelayer.def("init", pybind::overload_cast<pybind::function>(&MenuGameLayer::init));
    menugamelayer.def("initO", [](MenuGameLayer* self) { return MenuGameLayer::initO(self); });
    menugamelayer.attr("initA") = MenuGameLayer::initA;
    menugamelayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MenuGameLayer::initA, MenuGameLayer::initH, (LPVOID*)&MenuGameLayer::initO_);

    menugamelayer.def("updateColors", pybind::overload_cast<MenuGameLayer*>(&MenuGameLayer::updateColors));
    menugamelayer.def("updateColors", pybind::overload_cast<pybind::function>(&MenuGameLayer::updateColors));
    menugamelayer.def("updateColorsO", [](MenuGameLayer* self) { return MenuGameLayer::updateColorsO(self); });
    menugamelayer.attr("updateColorsA") = MenuGameLayer::updateColorsA;
    menugamelayer.attr("updateColorsN") = "updateColors";
    cinnamon::hooks::hookCinnamon((PVOID)MenuGameLayer::updateColorsA, MenuGameLayer::updateColorsH, (LPVOID*)&MenuGameLayer::updateColorsO_);

    auto menulayer = pybind::class_<MenuLayer, cocos2d::CCLayer>(m, "MenuLayer");
    menulayer.def("init", pybind::overload_cast<MenuLayer*>(&MenuLayer::init));
    menulayer.def("init", pybind::overload_cast<pybind::function>(&MenuLayer::init));
    menulayer.def("initO", [](MenuLayer* self) { return MenuLayer::initO(self); });
    menulayer.attr("initA") = MenuLayer::initA;
    menulayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::initA, MenuLayer::initH, (LPVOID*)&MenuLayer::initO_);

    menulayer.def("keyBackClicked", pybind::overload_cast<MenuLayer*>(&MenuLayer::keyBackClicked));
    menulayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&MenuLayer::keyBackClicked));
    menulayer.def("keyBackClickedO", [](MenuLayer* self) { return MenuLayer::keyBackClickedO(self); });
    menulayer.attr("keyBackClickedA") = MenuLayer::keyBackClickedA;
    menulayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::keyBackClickedA, MenuLayer::keyBackClickedH, (LPVOID*)&MenuLayer::keyBackClickedO_);

    menulayer.def("keyDown", pybind::overload_cast<MenuLayer*, cocos2d::enumKeyCodes>(&MenuLayer::keyDown));
    menulayer.def("keyDown", pybind::overload_cast<pybind::function>(&MenuLayer::keyDown));
    menulayer.def("keyDownO", [](MenuLayer* self, cocos2d::enumKeyCodes p0) { return MenuLayer::keyDownO(self, p0); });
    menulayer.attr("keyDownA") = MenuLayer::keyDownA;
    menulayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::keyDownA, MenuLayer::keyDownH, (LPVOID*)&MenuLayer::keyDownO_);

    menulayer.def("googlePlaySignedIn", pybind::overload_cast<MenuLayer*>(&MenuLayer::googlePlaySignedIn));
    menulayer.def("googlePlaySignedIn", pybind::overload_cast<pybind::function>(&MenuLayer::googlePlaySignedIn));
    menulayer.def("googlePlaySignedInO", [](MenuLayer* self) { return MenuLayer::googlePlaySignedInO(self); });
    menulayer.attr("googlePlaySignedInA") = MenuLayer::googlePlaySignedInA;
    menulayer.attr("googlePlaySignedInN") = "googlePlaySignedIn";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::googlePlaySignedInA, MenuLayer::googlePlaySignedInH, (LPVOID*)&MenuLayer::googlePlaySignedInO_);

    menulayer.def("FLAlert_Clicked", pybind::overload_cast<MenuLayer*, FLAlertLayer*, bool>(&MenuLayer::FLAlert_Clicked));
    menulayer.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&MenuLayer::FLAlert_Clicked));
    menulayer.def("FLAlert_ClickedO", [](MenuLayer* self, FLAlertLayer* p0, bool p1) { return MenuLayer::FLAlert_ClickedO(self, p0, p1); });
    menulayer.attr("FLAlert_ClickedA") = MenuLayer::FLAlert_ClickedA;
    menulayer.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::FLAlert_ClickedA, MenuLayer::FLAlert_ClickedH, (LPVOID*)&MenuLayer::FLAlert_ClickedO_);

    menulayer.def("onMoreGames", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onMoreGames));
    menulayer.def("onMoreGames", pybind::overload_cast<pybind::function>(&MenuLayer::onMoreGames));
    menulayer.def("onMoreGamesO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onMoreGamesO(self, p0); });
    menulayer.attr("onMoreGamesA") = MenuLayer::onMoreGamesA;
    menulayer.attr("onMoreGamesN") = "onMoreGames";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onMoreGamesA, MenuLayer::onMoreGamesH, (LPVOID*)&MenuLayer::onMoreGamesO_);

    menulayer.def("onGarage", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onGarage));
    menulayer.def("onGarage", pybind::overload_cast<pybind::function>(&MenuLayer::onGarage));
    menulayer.def("onGarageO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onGarageO(self, p0); });
    menulayer.attr("onGarageA") = MenuLayer::onGarageA;
    menulayer.attr("onGarageN") = "onGarage";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onGarageA, MenuLayer::onGarageH, (LPVOID*)&MenuLayer::onGarageO_);

    menulayer.def("onQuit", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onQuit));
    menulayer.def("onQuit", pybind::overload_cast<pybind::function>(&MenuLayer::onQuit));
    menulayer.def("onQuitO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onQuitO(self, p0); });
    menulayer.attr("onQuitA") = MenuLayer::onQuitA;
    menulayer.attr("onQuitN") = "onQuit";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onQuitA, MenuLayer::onQuitH, (LPVOID*)&MenuLayer::onQuitO_);

    menulayer.def("onMyProfile", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onMyProfile));
    menulayer.def("onMyProfile", pybind::overload_cast<pybind::function>(&MenuLayer::onMyProfile));
    menulayer.def("onMyProfileO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onMyProfileO(self, p0); });
    menulayer.attr("onMyProfileA") = MenuLayer::onMyProfileA;
    menulayer.attr("onMyProfileN") = "onMyProfile";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onMyProfileA, MenuLayer::onMyProfileH, (LPVOID*)&MenuLayer::onMyProfileO_);

    menulayer.def("onPlay", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onPlay));
    menulayer.def("onPlay", pybind::overload_cast<pybind::function>(&MenuLayer::onPlay));
    menulayer.def("onPlayO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onPlayO(self, p0); });
    menulayer.attr("onPlayA") = MenuLayer::onPlayA;
    menulayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onPlayA, MenuLayer::onPlayH, (LPVOID*)&MenuLayer::onPlayO_);

    menulayer.def("onCreator", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onCreator));
    menulayer.def("onCreator", pybind::overload_cast<pybind::function>(&MenuLayer::onCreator));
    menulayer.def("onCreatorO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onCreatorO(self, p0); });
    menulayer.attr("onCreatorA") = MenuLayer::onCreatorA;
    menulayer.attr("onCreatorN") = "onCreator";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onCreatorA, MenuLayer::onCreatorH, (LPVOID*)&MenuLayer::onCreatorO_);

    menulayer.def("onRobTop", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onRobTop));
    menulayer.def("onRobTop", pybind::overload_cast<pybind::function>(&MenuLayer::onRobTop));
    menulayer.def("onRobTopO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onRobTopO(self, p0); });
    menulayer.attr("onRobTopA") = MenuLayer::onRobTopA;
    menulayer.attr("onRobTopN") = "onRobTop";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onRobTopA, MenuLayer::onRobTopH, (LPVOID*)&MenuLayer::onRobTopO_);

    menulayer.def("onNewgrounds", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onNewgrounds));
    menulayer.def("onNewgrounds", pybind::overload_cast<pybind::function>(&MenuLayer::onNewgrounds));
    menulayer.def("onNewgroundsO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onNewgroundsO(self, p0); });
    menulayer.attr("onNewgroundsA") = MenuLayer::onNewgroundsA;
    menulayer.attr("onNewgroundsN") = "onNewgrounds";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onNewgroundsA, MenuLayer::onNewgroundsH, (LPVOID*)&MenuLayer::onNewgroundsO_);

    menulayer.def("onDaily", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onDaily));
    menulayer.def("onDaily", pybind::overload_cast<pybind::function>(&MenuLayer::onDaily));
    menulayer.def("onDailyO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onDailyO(self, p0); });
    menulayer.attr("onDailyA") = MenuLayer::onDailyA;
    menulayer.attr("onDailyN") = "onDaily";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onDailyA, MenuLayer::onDailyH, (LPVOID*)&MenuLayer::onDailyO_);

    menulayer.def("onOptions", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onOptions));
    menulayer.def("onOptions", pybind::overload_cast<pybind::function>(&MenuLayer::onOptions));
    menulayer.def("onOptionsO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onOptionsO(self, p0); });
    menulayer.attr("onOptionsA") = MenuLayer::onOptionsA;
    menulayer.attr("onOptionsN") = "onOptions";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onOptionsA, MenuLayer::onOptionsH, (LPVOID*)&MenuLayer::onOptionsO_);

    menulayer.def("onAchievements", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onAchievements));
    menulayer.def("onAchievements", pybind::overload_cast<pybind::function>(&MenuLayer::onAchievements));
    menulayer.def("onAchievementsO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onAchievementsO(self, p0); });
    menulayer.attr("onAchievementsA") = MenuLayer::onAchievementsA;
    menulayer.attr("onAchievementsN") = "onAchievements";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onAchievementsA, MenuLayer::onAchievementsH, (LPVOID*)&MenuLayer::onAchievementsO_);

    menulayer.def("onStats", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onStats));
    menulayer.def("onStats", pybind::overload_cast<pybind::function>(&MenuLayer::onStats));
    menulayer.def("onStatsO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onStatsO(self, p0); });
    menulayer.attr("onStatsA") = MenuLayer::onStatsA;
    menulayer.attr("onStatsN") = "onStats";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onStatsA, MenuLayer::onStatsH, (LPVOID*)&MenuLayer::onStatsO_);

    menulayer.def("onFacebook", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onFacebook));
    menulayer.def("onFacebook", pybind::overload_cast<pybind::function>(&MenuLayer::onFacebook));
    menulayer.def("onFacebookO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onFacebookO(self, p0); });
    menulayer.attr("onFacebookA") = MenuLayer::onFacebookA;
    menulayer.attr("onFacebookN") = "onFacebook";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onFacebookA, MenuLayer::onFacebookH, (LPVOID*)&MenuLayer::onFacebookO_);

    menulayer.def("onTwitter", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onTwitter));
    menulayer.def("onTwitter", pybind::overload_cast<pybind::function>(&MenuLayer::onTwitter));
    menulayer.def("onTwitterO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onTwitterO(self, p0); });
    menulayer.attr("onTwitterA") = MenuLayer::onTwitterA;
    menulayer.attr("onTwitterN") = "onTwitter";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onTwitterA, MenuLayer::onTwitterH, (LPVOID*)&MenuLayer::onTwitterO_);

    menulayer.def("onYouTube", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onYouTube));
    menulayer.def("onYouTube", pybind::overload_cast<pybind::function>(&MenuLayer::onYouTube));
    menulayer.def("onYouTubeO", [](MenuLayer* self, cocos2d::CCObject* p0) { return MenuLayer::onYouTubeO(self, p0); });
    menulayer.attr("onYouTubeA") = MenuLayer::onYouTubeA;
    menulayer.attr("onYouTubeN") = "onYouTube";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onYouTubeA, MenuLayer::onYouTubeH, (LPVOID*)&MenuLayer::onYouTubeO_);

    menulayer.def("scene", pybind::overload_cast<bool>(&MenuLayer::scene));
    menulayer.def("scene", pybind::overload_cast<pybind::function>(&MenuLayer::scene));
    menulayer.def("sceneO", [](bool p0) { return MenuLayer::sceneO(p0); });
    menulayer.attr("sceneA") = MenuLayer::sceneA;
    menulayer.attr("sceneN") = "scene";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::sceneA, MenuLayer::sceneH, (LPVOID*)&MenuLayer::sceneO_);

    auto messagelistdelegate = pybind::class_<MessageListDelegate>(m, "MessageListDelegate");
    auto moresearchlayer = pybind::class_<MoreSearchLayer, FLAlertLayer>(m, "MoreSearchLayer");
    moresearchlayer.def("create", pybind::overload_cast<>(&MoreSearchLayer::create));
    moresearchlayer.def("create", pybind::overload_cast<pybind::function>(&MoreSearchLayer::create));
    moresearchlayer.def("createO", []() { return MoreSearchLayer::createO(); });
    moresearchlayer.attr("createA") = MoreSearchLayer::createA;
    moresearchlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)MoreSearchLayer::createA, MoreSearchLayer::createH, (LPVOID*)&MoreSearchLayer::createO_);

    moresearchlayer.def("init", pybind::overload_cast<MoreSearchLayer*>(&MoreSearchLayer::init));
    moresearchlayer.def("init", pybind::overload_cast<pybind::function>(&MoreSearchLayer::init));
    moresearchlayer.def("initO", [](MoreSearchLayer* self) { return MoreSearchLayer::initO(self); });
    moresearchlayer.attr("initA") = MoreSearchLayer::initA;
    moresearchlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MoreSearchLayer::initA, MoreSearchLayer::initH, (LPVOID*)&MoreSearchLayer::initO_);

    moresearchlayer.def("onClose", pybind::overload_cast<MoreSearchLayer*, cocos2d::CCObject*>(&MoreSearchLayer::onClose));
    moresearchlayer.def("onClose", pybind::overload_cast<pybind::function>(&MoreSearchLayer::onClose));
    moresearchlayer.def("onCloseO", [](MoreSearchLayer* self, cocos2d::CCObject* p0) { return MoreSearchLayer::onCloseO(self, p0); });
    moresearchlayer.attr("onCloseA") = MoreSearchLayer::onCloseA;
    moresearchlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)MoreSearchLayer::onCloseA, MoreSearchLayer::onCloseH, (LPVOID*)&MoreSearchLayer::onCloseO_);

    auto moreoptionslayer = pybind::class_<MoreOptionsLayer, FLAlertLayer>(m, "MoreOptionsLayer");
    moreoptionslayer.def("create", pybind::overload_cast<>(&MoreOptionsLayer::create));
    moreoptionslayer.def("create", pybind::overload_cast<pybind::function>(&MoreOptionsLayer::create));
    moreoptionslayer.def("createO", []() { return MoreOptionsLayer::createO(); });
    moreoptionslayer.attr("createA") = MoreOptionsLayer::createA;
    moreoptionslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)MoreOptionsLayer::createA, MoreOptionsLayer::createH, (LPVOID*)&MoreOptionsLayer::createO_);

    moreoptionslayer.def("init", pybind::overload_cast<MoreOptionsLayer*>(&MoreOptionsLayer::init));
    moreoptionslayer.def("init", pybind::overload_cast<pybind::function>(&MoreOptionsLayer::init));
    moreoptionslayer.def("initO", [](MoreOptionsLayer* self) { return MoreOptionsLayer::initO(self); });
    moreoptionslayer.attr("initA") = MoreOptionsLayer::initA;
    moreoptionslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MoreOptionsLayer::initA, MoreOptionsLayer::initH, (LPVOID*)&MoreOptionsLayer::initO_);

    moreoptionslayer.def("addToggle", pybind::overload_cast<MoreOptionsLayer*, const char*, const char*, const char*>(&MoreOptionsLayer::addToggle));
    moreoptionslayer.def("addToggle", pybind::overload_cast<pybind::function>(&MoreOptionsLayer::addToggle));
    moreoptionslayer.def("addToggleO", [](MoreOptionsLayer* self, const char* name, const char* key, const char* info) { return MoreOptionsLayer::addToggleO(self, name, key, info); });
    moreoptionslayer.attr("addToggleA") = MoreOptionsLayer::addToggleA;
    moreoptionslayer.attr("addToggleN") = "addToggle";
    cinnamon::hooks::hookCinnamon((PVOID)MoreOptionsLayer::addToggleA, MoreOptionsLayer::addToggleH, (LPVOID*)&MoreOptionsLayer::addToggleO_);

    moreoptionslayer.def("onKeybindings", pybind::overload_cast<MoreOptionsLayer*, cocos2d::CCObject*>(&MoreOptionsLayer::onKeybindings));
    moreoptionslayer.def("onKeybindings", pybind::overload_cast<pybind::function>(&MoreOptionsLayer::onKeybindings));
    moreoptionslayer.def("onKeybindingsO", [](MoreOptionsLayer* self, cocos2d::CCObject* sender) { return MoreOptionsLayer::onKeybindingsO(self, sender); });
    moreoptionslayer.attr("onKeybindingsA") = MoreOptionsLayer::onKeybindingsA;
    moreoptionslayer.attr("onKeybindingsN") = "onKeybindings";
    cinnamon::hooks::hookCinnamon((PVOID)MoreOptionsLayer::onKeybindingsA, MoreOptionsLayer::onKeybindingsH, (LPVOID*)&MoreOptionsLayer::onKeybindingsO_);

    auto morevideooptionslayer = pybind::class_<MoreVideoOptionsLayer, FLAlertLayer>(m, "MoreVideoOptionsLayer");
    morevideooptionslayer.def("create", pybind::overload_cast<>(&MoreVideoOptionsLayer::create));
    morevideooptionslayer.def("create", pybind::overload_cast<pybind::function>(&MoreVideoOptionsLayer::create));
    morevideooptionslayer.def("createO", []() { return MoreVideoOptionsLayer::createO(); });
    morevideooptionslayer.attr("createA") = MoreVideoOptionsLayer::createA;
    morevideooptionslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)MoreVideoOptionsLayer::createA, MoreVideoOptionsLayer::createH, (LPVOID*)&MoreVideoOptionsLayer::createO_);

    morevideooptionslayer.def("init", pybind::overload_cast<MoreVideoOptionsLayer*>(&MoreVideoOptionsLayer::init));
    morevideooptionslayer.def("init", pybind::overload_cast<pybind::function>(&MoreVideoOptionsLayer::init));
    morevideooptionslayer.def("initO", [](MoreVideoOptionsLayer* self) { return MoreVideoOptionsLayer::initO(self); });
    morevideooptionslayer.attr("initA") = MoreVideoOptionsLayer::initA;
    morevideooptionslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MoreVideoOptionsLayer::initA, MoreVideoOptionsLayer::initH, (LPVOID*)&MoreVideoOptionsLayer::initO_);

    auto multilinebitmapfont = pybind::class_<MultilineBitmapFont, cocos2d::CCSprite>(m, "MultilineBitmapFont");
    auto platformdownloaddelegate = pybind::class_<PlatformDownloadDelegate>(m, "PlatformDownloadDelegate");
    auto musicdownloadmanager = pybind::class_<MusicDownloadManager, cocos2d::CCNode>(m, "MusicDownloadManager");
    musicdownloadmanager.def("sharedState", pybind::overload_cast<>(&MusicDownloadManager::sharedState));
    musicdownloadmanager.def("sharedState", pybind::overload_cast<pybind::function>(&MusicDownloadManager::sharedState));
    musicdownloadmanager.def("sharedStateO", []() { return MusicDownloadManager::sharedStateO(); });
    musicdownloadmanager.attr("sharedStateA") = MusicDownloadManager::sharedStateA;
    musicdownloadmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)MusicDownloadManager::sharedStateA, MusicDownloadManager::sharedStateH, (LPVOID*)&MusicDownloadManager::sharedStateO_);

    musicdownloadmanager.def("pathForSong", pybind::overload_cast<MusicDownloadManager*, int>(&MusicDownloadManager::pathForSong));
    musicdownloadmanager.def("pathForSong", pybind::overload_cast<pybind::function>(&MusicDownloadManager::pathForSong));
    musicdownloadmanager.def("pathForSongO", [](MusicDownloadManager* self, int id) { return MusicDownloadManager::pathForSongO(self, id); });
    musicdownloadmanager.attr("pathForSongA") = MusicDownloadManager::pathForSongA;
    musicdownloadmanager.attr("pathForSongN") = "pathForSong";
    cinnamon::hooks::hookCinnamon((PVOID)MusicDownloadManager::pathForSongA, MusicDownloadManager::pathForSongH, (LPVOID*)&MusicDownloadManager::pathForSongO_);

    musicdownloadmanager.def("getDownloadedSongs", pybind::overload_cast<MusicDownloadManager*>(&MusicDownloadManager::getDownloadedSongs));
    musicdownloadmanager.def("getDownloadedSongs", pybind::overload_cast<pybind::function>(&MusicDownloadManager::getDownloadedSongs));
    musicdownloadmanager.def("getDownloadedSongsO", [](MusicDownloadManager* self) { return MusicDownloadManager::getDownloadedSongsO(self); });
    musicdownloadmanager.attr("getDownloadedSongsA") = MusicDownloadManager::getDownloadedSongsA;
    musicdownloadmanager.attr("getDownloadedSongsN") = "getDownloadedSongs";
    cinnamon::hooks::hookCinnamon((PVOID)MusicDownloadManager::getDownloadedSongsA, MusicDownloadManager::getDownloadedSongsH, (LPVOID*)&MusicDownloadManager::getDownloadedSongsO_);

    musicdownloadmanager.def("songStateChanged", pybind::overload_cast<MusicDownloadManager*>(&MusicDownloadManager::songStateChanged));
    musicdownloadmanager.def("songStateChanged", pybind::overload_cast<pybind::function>(&MusicDownloadManager::songStateChanged));
    musicdownloadmanager.def("songStateChangedO", [](MusicDownloadManager* self) { return MusicDownloadManager::songStateChangedO(self); });
    musicdownloadmanager.attr("songStateChangedA") = MusicDownloadManager::songStateChangedA;
    musicdownloadmanager.attr("songStateChangedN") = "songStateChanged";
    cinnamon::hooks::hookCinnamon((PVOID)MusicDownloadManager::songStateChangedA, MusicDownloadManager::songStateChangedH, (LPVOID*)&MusicDownloadManager::songStateChangedO_);

    auto numberinputlayer = pybind::class_<NumberInputLayer>(m, "NumberInputLayer");
    auto obb2d = pybind::class_<OBB2D, cocos2d::CCNode>(m, "OBB2D");
    obb2d.def("calculateWithCenter", pybind::overload_cast<OBB2D*, cocos2d::CCPoint, float, float, float>(&OBB2D::calculateWithCenter));
    obb2d.def("calculateWithCenter", pybind::overload_cast<pybind::function>(&OBB2D::calculateWithCenter));
    obb2d.def("calculateWithCenterO", [](OBB2D* self, cocos2d::CCPoint p0, float p1, float p2, float p3) { return OBB2D::calculateWithCenterO(self, p0, p1, p2, p3); });
    obb2d.attr("calculateWithCenterA") = OBB2D::calculateWithCenterA;
    obb2d.attr("calculateWithCenterN") = "calculateWithCenter";
    cinnamon::hooks::hookCinnamon((PVOID)OBB2D::calculateWithCenterA, OBB2D::calculateWithCenterH, (LPVOID*)&OBB2D::calculateWithCenterO_);

    obb2d.def("create", pybind::overload_cast<cocos2d::CCPoint, float, float, float>(&OBB2D::create));
    obb2d.def("create", pybind::overload_cast<pybind::function>(&OBB2D::create));
    obb2d.def("createO", [](cocos2d::CCPoint p0, float p1, float p2, float p3) { return OBB2D::createO(p0, p1, p2, p3); });
    obb2d.attr("createA") = OBB2D::createA;
    obb2d.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)OBB2D::createA, OBB2D::createH, (LPVOID*)&OBB2D::createO_);

    obb2d.def("getBoundingRect", pybind::overload_cast<OBB2D*>(&OBB2D::getBoundingRect));
    obb2d.def("getBoundingRect", pybind::overload_cast<pybind::function>(&OBB2D::getBoundingRect));
    obb2d.def("getBoundingRectO", [](OBB2D* self) { return OBB2D::getBoundingRectO(self); });
    obb2d.attr("getBoundingRectA") = OBB2D::getBoundingRectA;
    obb2d.attr("getBoundingRectN") = "getBoundingRect";
    cinnamon::hooks::hookCinnamon((PVOID)OBB2D::getBoundingRectA, OBB2D::getBoundingRectH, (LPVOID*)&OBB2D::getBoundingRectO_);

    obb2d.def("overlaps1Way", pybind::overload_cast<OBB2D*, OBB2D*>(&OBB2D::overlaps1Way));
    obb2d.def("overlaps1Way", pybind::overload_cast<pybind::function>(&OBB2D::overlaps1Way));
    obb2d.def("overlaps1WayO", [](OBB2D* self, OBB2D* p0) { return OBB2D::overlaps1WayO(self, p0); });
    obb2d.attr("overlaps1WayA") = OBB2D::overlaps1WayA;
    obb2d.attr("overlaps1WayN") = "overlaps1Way";
    cinnamon::hooks::hookCinnamon((PVOID)OBB2D::overlaps1WayA, OBB2D::overlaps1WayH, (LPVOID*)&OBB2D::overlaps1WayO_);

    auto objectmanager = pybind::class_<ObjectManager, cocos2d::CCNode>(m, "ObjectManager");
    objectmanager.def("instance", pybind::overload_cast<>(&ObjectManager::instance));
    objectmanager.def("instance", pybind::overload_cast<pybind::function>(&ObjectManager::instance));
    objectmanager.def("instanceO", []() { return ObjectManager::instanceO(); });
    objectmanager.attr("instanceA") = ObjectManager::instanceA;
    objectmanager.attr("instanceN") = "instance";
    cinnamon::hooks::hookCinnamon((PVOID)ObjectManager::instanceA, ObjectManager::instanceH, (LPVOID*)&ObjectManager::instanceO_);

    objectmanager.def("setup", pybind::overload_cast<ObjectManager*>(&ObjectManager::setup));
    objectmanager.def("setup", pybind::overload_cast<pybind::function>(&ObjectManager::setup));
    objectmanager.def("setupO", [](ObjectManager* self) { return ObjectManager::setupO(self); });
    objectmanager.attr("setupA") = ObjectManager::setupA;
    objectmanager.attr("setupN") = "setup";
    cinnamon::hooks::hookCinnamon((PVOID)ObjectManager::setupA, ObjectManager::setupH, (LPVOID*)&ObjectManager::setupO_);

    auto keyslayer = pybind::class_<KeysLayer, cocos2d::CCLayer>(m, "KeysLayer");
    keyslayer.def("init", pybind::overload_cast<KeysLayer*>(&KeysLayer::init));
    keyslayer.def("init", pybind::overload_cast<pybind::function>(&KeysLayer::init));
    keyslayer.def("initO", [](KeysLayer* self) { return KeysLayer::initO(self); });
    keyslayer.attr("initA") = KeysLayer::initA;
    keyslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)KeysLayer::initA, KeysLayer::initH, (LPVOID*)&KeysLayer::initO_);

    auto objecttoolbox = pybind::class_<ObjectToolbox, cocos2d::CCNode>(m, "ObjectToolbox");
    objecttoolbox.def("init", pybind::overload_cast<ObjectToolbox*>(&ObjectToolbox::init));
    objecttoolbox.def("init", pybind::overload_cast<pybind::function>(&ObjectToolbox::init));
    objecttoolbox.def("initO", [](ObjectToolbox* self) { return ObjectToolbox::initO(self); });
    objecttoolbox.attr("initA") = ObjectToolbox::initA;
    objecttoolbox.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ObjectToolbox::initA, ObjectToolbox::initH, (LPVOID*)&ObjectToolbox::initO_);

    objecttoolbox.def("sharedState", pybind::overload_cast<>(&ObjectToolbox::sharedState));
    objecttoolbox.def("sharedState", pybind::overload_cast<pybind::function>(&ObjectToolbox::sharedState));
    objecttoolbox.def("sharedStateO", []() { return ObjectToolbox::sharedStateO(); });
    objecttoolbox.attr("sharedStateA") = ObjectToolbox::sharedStateA;
    objecttoolbox.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)ObjectToolbox::sharedStateA, ObjectToolbox::sharedStateH, (LPVOID*)&ObjectToolbox::sharedStateO_);

    objecttoolbox.def("gridNodeSizeForKey", pybind::overload_cast<ObjectToolbox*, int>(&ObjectToolbox::gridNodeSizeForKey));
    objecttoolbox.def("gridNodeSizeForKey", pybind::overload_cast<pybind::function>(&ObjectToolbox::gridNodeSizeForKey));
    objecttoolbox.def("gridNodeSizeForKeyO", [](ObjectToolbox* self, int key) { return ObjectToolbox::gridNodeSizeForKeyO(self, key); });
    objecttoolbox.attr("gridNodeSizeForKeyA") = ObjectToolbox::gridNodeSizeForKeyA;
    objecttoolbox.attr("gridNodeSizeForKeyN") = "gridNodeSizeForKey";
    cinnamon::hooks::hookCinnamon((PVOID)ObjectToolbox::gridNodeSizeForKeyA, ObjectToolbox::gridNodeSizeForKeyH, (LPVOID*)&ObjectToolbox::gridNodeSizeForKeyO_);

    auto opacityeffectaction = pybind::class_<OpacityEffectAction, cocos2d::CCNode>(m, "OpacityEffectAction");
    auto onlinelistdelegate = pybind::class_<OnlineListDelegate>(m, "OnlineListDelegate");
    auto optionslayer = pybind::class_<OptionsLayer, GJDropDownLayer>(m, "OptionsLayer");
    optionslayer.def("create", pybind::overload_cast<>(&OptionsLayer::create));
    optionslayer.def("create", pybind::overload_cast<pybind::function>(&OptionsLayer::create));
    optionslayer.def("createO", []() { return OptionsLayer::createO(); });
    optionslayer.attr("createA") = OptionsLayer::createA;
    optionslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)OptionsLayer::createA, OptionsLayer::createH, (LPVOID*)&OptionsLayer::createO_);

    optionslayer.def("customSetup", pybind::overload_cast<OptionsLayer*>(&OptionsLayer::customSetup));
    optionslayer.def("customSetup", pybind::overload_cast<pybind::function>(&OptionsLayer::customSetup));
    optionslayer.def("customSetupO", [](OptionsLayer* self) { return OptionsLayer::customSetupO(self); });
    optionslayer.attr("customSetupA") = OptionsLayer::customSetupA;
    optionslayer.attr("customSetupN") = "customSetup";
    cinnamon::hooks::hookCinnamon((PVOID)OptionsLayer::customSetupA, OptionsLayer::customSetupH, (LPVOID*)&OptionsLayer::customSetupO_);

    optionslayer.def("layerHidden", pybind::overload_cast<OptionsLayer*>(&OptionsLayer::layerHidden));
    optionslayer.def("layerHidden", pybind::overload_cast<pybind::function>(&OptionsLayer::layerHidden));
    optionslayer.def("layerHiddenO", [](OptionsLayer* self) { return OptionsLayer::layerHiddenO(self); });
    optionslayer.attr("layerHiddenA") = OptionsLayer::layerHiddenA;
    optionslayer.attr("layerHiddenN") = "layerHidden";
    cinnamon::hooks::hookCinnamon((PVOID)OptionsLayer::layerHiddenA, OptionsLayer::layerHiddenH, (LPVOID*)&OptionsLayer::layerHiddenO_);

    auto pauselayer = pybind::class_<PauseLayer, CCBlockLayer>(m, "PauseLayer");
    pauselayer.def("create", pybind::overload_cast<bool>(&PauseLayer::create));
    pauselayer.def("create", pybind::overload_cast<pybind::function>(&PauseLayer::create));
    pauselayer.def("createO", [](bool p0) { return PauseLayer::createO(p0); });
    pauselayer.attr("createA") = PauseLayer::createA;
    pauselayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::createA, PauseLayer::createH, (LPVOID*)&PauseLayer::createO_);

    pauselayer.def("onEdit", pybind::overload_cast<PauseLayer*, cocos2d::CCObject*>(&PauseLayer::onEdit));
    pauselayer.def("onEdit", pybind::overload_cast<pybind::function>(&PauseLayer::onEdit));
    pauselayer.def("onEditO", [](PauseLayer* self, cocos2d::CCObject* p0) { return PauseLayer::onEditO(self, p0); });
    pauselayer.attr("onEditA") = PauseLayer::onEditA;
    pauselayer.attr("onEditN") = "onEdit";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::onEditA, PauseLayer::onEditH, (LPVOID*)&PauseLayer::onEditO_);

    pauselayer.def("goEdit", pybind::overload_cast<PauseLayer*>(&PauseLayer::goEdit));
    pauselayer.def("goEdit", pybind::overload_cast<pybind::function>(&PauseLayer::goEdit));
    pauselayer.def("goEditO", [](PauseLayer* self) { return PauseLayer::goEditO(self); });
    pauselayer.attr("goEditA") = PauseLayer::goEditA;
    pauselayer.attr("goEditN") = "goEdit";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::goEditA, PauseLayer::goEditH, (LPVOID*)&PauseLayer::goEditO_);

    pauselayer.def("onQuit", pybind::overload_cast<PauseLayer*, cocos2d::CCObject*>(&PauseLayer::onQuit));
    pauselayer.def("onQuit", pybind::overload_cast<pybind::function>(&PauseLayer::onQuit));
    pauselayer.def("onQuitO", [](PauseLayer* self, cocos2d::CCObject* p0) { return PauseLayer::onQuitO(self, p0); });
    pauselayer.attr("onQuitA") = PauseLayer::onQuitA;
    pauselayer.attr("onQuitN") = "onQuit";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::onQuitA, PauseLayer::onQuitH, (LPVOID*)&PauseLayer::onQuitO_);

    pauselayer.def("createToggleButton", pybind::overload_cast<PauseLayer*, gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint>(&PauseLayer::createToggleButton));
    pauselayer.def("createToggleButton", pybind::overload_cast<pybind::function>(&PauseLayer::createToggleButton));
    pauselayer.def("createToggleButtonO", [](PauseLayer* self, gd::string caption, cocos2d::SEL_MenuHandler callback, bool on, cocos2d::CCMenu* menu, cocos2d::CCPoint pos) { return PauseLayer::createToggleButtonO(self, caption, callback, on, menu, pos); });
    pauselayer.attr("createToggleButtonA") = PauseLayer::createToggleButtonA;
    pauselayer.attr("createToggleButtonN") = "createToggleButton";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::createToggleButtonA, PauseLayer::createToggleButtonH, (LPVOID*)&PauseLayer::createToggleButtonO_);

    pauselayer.def("customSetup", pybind::overload_cast<PauseLayer*>(&PauseLayer::customSetup));
    pauselayer.def("customSetup", pybind::overload_cast<pybind::function>(&PauseLayer::customSetup));
    pauselayer.def("customSetupO", [](PauseLayer* self) { return PauseLayer::customSetupO(self); });
    pauselayer.attr("customSetupA") = PauseLayer::customSetupA;
    pauselayer.attr("customSetupN") = "customSetup";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::customSetupA, PauseLayer::customSetupH, (LPVOID*)&PauseLayer::customSetupO_);

    pauselayer.def("onRestart", pybind::overload_cast<PauseLayer*, cocos2d::CCObject*>(&PauseLayer::onRestart));
    pauselayer.def("onRestart", pybind::overload_cast<pybind::function>(&PauseLayer::onRestart));
    pauselayer.def("onRestartO", [](PauseLayer* self, cocos2d::CCObject* sender) { return PauseLayer::onRestartO(self, sender); });
    pauselayer.attr("onRestartA") = PauseLayer::onRestartA;
    pauselayer.attr("onRestartN") = "onRestart";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::onRestartA, PauseLayer::onRestartH, (LPVOID*)&PauseLayer::onRestartO_);

    pauselayer.def("keyDown", pybind::overload_cast<PauseLayer*, cocos2d::enumKeyCodes>(&PauseLayer::keyDown));
    pauselayer.def("keyDown", pybind::overload_cast<pybind::function>(&PauseLayer::keyDown));
    pauselayer.def("keyDownO", [](PauseLayer* self, cocos2d::enumKeyCodes p0) { return PauseLayer::keyDownO(self, p0); });
    pauselayer.attr("keyDownA") = PauseLayer::keyDownA;
    pauselayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::keyDownA, PauseLayer::keyDownH, (LPVOID*)&PauseLayer::keyDownO_);

    pauselayer.def("musicSliderChanged", pybind::overload_cast<PauseLayer*, cocos2d::CCObject*>(&PauseLayer::musicSliderChanged));
    pauselayer.def("musicSliderChanged", pybind::overload_cast<pybind::function>(&PauseLayer::musicSliderChanged));
    pauselayer.def("musicSliderChangedO", [](PauseLayer* self, cocos2d::CCObject* sender) { return PauseLayer::musicSliderChangedO(self, sender); });
    pauselayer.attr("musicSliderChangedA") = PauseLayer::musicSliderChangedA;
    pauselayer.attr("musicSliderChangedN") = "musicSliderChanged";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::musicSliderChangedA, PauseLayer::musicSliderChangedH, (LPVOID*)&PauseLayer::musicSliderChangedO_);

    pauselayer.def("sfxSliderChanged", pybind::overload_cast<PauseLayer*, cocos2d::CCObject*>(&PauseLayer::sfxSliderChanged));
    pauselayer.def("sfxSliderChanged", pybind::overload_cast<pybind::function>(&PauseLayer::sfxSliderChanged));
    pauselayer.def("sfxSliderChangedO", [](PauseLayer* self, cocos2d::CCObject* sender) { return PauseLayer::sfxSliderChangedO(self, sender); });
    pauselayer.attr("sfxSliderChangedA") = PauseLayer::sfxSliderChangedA;
    pauselayer.attr("sfxSliderChangedN") = "sfxSliderChanged";
    cinnamon::hooks::hookCinnamon((PVOID)PauseLayer::sfxSliderChangedA, PauseLayer::sfxSliderChangedH, (LPVOID*)&PauseLayer::sfxSliderChangedO_);

    auto platformtoolbox = pybind::class_<PlatformToolbox>(m, "PlatformToolbox");
    auto playlayer = pybind::class_<PlayLayer, GJBaseGameLayer>(m, "PlayLayer");
    playlayer.def("addObject", pybind::overload_cast<PlayLayer*, GameObject*>(&PlayLayer::addObject));
    playlayer.def("addObject", pybind::overload_cast<pybind::function>(&PlayLayer::addObject));
    playlayer.def("addObjectO", [](PlayLayer* self, GameObject* p0) { return PlayLayer::addObjectO(self, p0); });
    playlayer.attr("addObjectA") = PlayLayer::addObjectA;
    playlayer.attr("addObjectN") = "addObject";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::addObjectA, PlayLayer::addObjectH, (LPVOID*)&PlayLayer::addObjectO_);

    playlayer.def("addToSpeedObjects", pybind::overload_cast<PlayLayer*, GameObject*>(&PlayLayer::addToSpeedObjects));
    playlayer.def("addToSpeedObjects", pybind::overload_cast<pybind::function>(&PlayLayer::addToSpeedObjects));
    playlayer.def("addToSpeedObjectsO", [](PlayLayer* self, GameObject* p0) { return PlayLayer::addToSpeedObjectsO(self, p0); });
    playlayer.attr("addToSpeedObjectsA") = PlayLayer::addToSpeedObjectsA;
    playlayer.attr("addToSpeedObjectsN") = "addToSpeedObjects";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::addToSpeedObjectsA, PlayLayer::addToSpeedObjectsH, (LPVOID*)&PlayLayer::addToSpeedObjectsO_);

    playlayer.def("animateInDualGround", pybind::overload_cast<PlayLayer*, GameObject*, float, bool>(&PlayLayer::animateInDualGround));
    playlayer.def("animateInDualGround", pybind::overload_cast<pybind::function>(&PlayLayer::animateInDualGround));
    playlayer.def("animateInDualGroundO", [](PlayLayer* self, GameObject* p0, float p1, bool p2) { return PlayLayer::animateInDualGroundO(self, p0, p1, p2); });
    playlayer.attr("animateInDualGroundA") = PlayLayer::animateInDualGroundA;
    playlayer.attr("animateInDualGroundN") = "animateInDualGround";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::animateInDualGroundA, PlayLayer::animateInDualGroundH, (LPVOID*)&PlayLayer::animateInDualGroundO_);

    playlayer.def("animateInGround", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::animateInGround));
    playlayer.def("animateInGround", pybind::overload_cast<pybind::function>(&PlayLayer::animateInGround));
    playlayer.def("animateInGroundO", [](PlayLayer* self, bool p0) { return PlayLayer::animateInGroundO(self, p0); });
    playlayer.attr("animateInGroundA") = PlayLayer::animateInGroundA;
    playlayer.attr("animateInGroundN") = "animateInGround";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::animateInGroundA, PlayLayer::animateInGroundH, (LPVOID*)&PlayLayer::animateInGroundO_);

    playlayer.def("animateOutGround", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::animateOutGround));
    playlayer.def("animateOutGround", pybind::overload_cast<pybind::function>(&PlayLayer::animateOutGround));
    playlayer.def("animateOutGroundO", [](PlayLayer* self, bool p0) { return PlayLayer::animateOutGroundO(self, p0); });
    playlayer.attr("animateOutGroundA") = PlayLayer::animateOutGroundA;
    playlayer.attr("animateOutGroundN") = "animateOutGround";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::animateOutGroundA, PlayLayer::animateOutGroundH, (LPVOID*)&PlayLayer::animateOutGroundO_);

    playlayer.def("applyEnterEffect", pybind::overload_cast<PlayLayer*, GameObject*>(&PlayLayer::applyEnterEffect));
    playlayer.def("applyEnterEffect", pybind::overload_cast<pybind::function>(&PlayLayer::applyEnterEffect));
    playlayer.def("applyEnterEffectO", [](PlayLayer* self, GameObject* p0) { return PlayLayer::applyEnterEffectO(self, p0); });
    playlayer.attr("applyEnterEffectA") = PlayLayer::applyEnterEffectA;
    playlayer.attr("applyEnterEffectN") = "applyEnterEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::applyEnterEffectA, PlayLayer::applyEnterEffectH, (LPVOID*)&PlayLayer::applyEnterEffectO_);

    playlayer.def("calculateColorValues", pybind::overload_cast<PlayLayer*, EffectGameObject*, EffectGameObject*, int, float, ColorActionSprite*, GJEffectManager*>(&PlayLayer::calculateColorValues));
    playlayer.def("calculateColorValues", pybind::overload_cast<pybind::function>(&PlayLayer::calculateColorValues));
    playlayer.def("calculateColorValuesO", [](PlayLayer* self, EffectGameObject* p0, EffectGameObject* p1, int p2, float p3, ColorActionSprite* p4, GJEffectManager* p5) { return PlayLayer::calculateColorValuesO(self, p0, p1, p2, p3, p4, p5); });
    playlayer.attr("calculateColorValuesA") = PlayLayer::calculateColorValuesA;
    playlayer.attr("calculateColorValuesN") = "calculateColorValues";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::calculateColorValuesA, PlayLayer::calculateColorValuesH, (LPVOID*)&PlayLayer::calculateColorValuesO_);

    playlayer.def("cameraMoveY", pybind::overload_cast<PlayLayer*, float, float, float>(&PlayLayer::cameraMoveY));
    playlayer.def("cameraMoveY", pybind::overload_cast<pybind::function>(&PlayLayer::cameraMoveY));
    playlayer.def("cameraMoveYO", [](PlayLayer* self, float p0, float p1, float p2) { return PlayLayer::cameraMoveYO(self, p0, p1, p2); });
    playlayer.attr("cameraMoveYA") = PlayLayer::cameraMoveYA;
    playlayer.attr("cameraMoveYN") = "cameraMoveY";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::cameraMoveYA, PlayLayer::cameraMoveYH, (LPVOID*)&PlayLayer::cameraMoveYO_);

    playlayer.def("checkCollisions", pybind::overload_cast<PlayLayer*, PlayerObject*, float>(&PlayLayer::checkCollisions));
    playlayer.def("checkCollisions", pybind::overload_cast<pybind::function>(&PlayLayer::checkCollisions));
    playlayer.def("checkCollisionsO", [](PlayLayer* self, PlayerObject* p0, float p1) { return PlayLayer::checkCollisionsO(self, p0, p1); });
    playlayer.attr("checkCollisionsA") = PlayLayer::checkCollisionsA;
    playlayer.attr("checkCollisionsN") = "checkCollisions";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::checkCollisionsA, PlayLayer::checkCollisionsH, (LPVOID*)&PlayLayer::checkCollisionsO_);

    playlayer.def("circleWaveWillBeRemoved", pybind::overload_cast<PlayLayer*, CCCircleWave*>(&PlayLayer::circleWaveWillBeRemoved));
    playlayer.def("circleWaveWillBeRemoved", pybind::overload_cast<pybind::function>(&PlayLayer::circleWaveWillBeRemoved));
    playlayer.def("circleWaveWillBeRemovedO", [](PlayLayer* self, CCCircleWave* p0) { return PlayLayer::circleWaveWillBeRemovedO(self, p0); });
    playlayer.attr("circleWaveWillBeRemovedA") = PlayLayer::circleWaveWillBeRemovedA;
    playlayer.attr("circleWaveWillBeRemovedN") = "circleWaveWillBeRemoved";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::circleWaveWillBeRemovedA, PlayLayer::circleWaveWillBeRemovedH, (LPVOID*)&PlayLayer::circleWaveWillBeRemovedO_);

    playlayer.def("create", pybind::overload_cast<GJGameLevel*>(&PlayLayer::create));
    playlayer.def("create", pybind::overload_cast<pybind::function>(&PlayLayer::create));
    playlayer.def("createO", [](GJGameLevel* p0) { return PlayLayer::createO(p0); });
    playlayer.attr("createA") = PlayLayer::createA;
    playlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::createA, PlayLayer::createH, (LPVOID*)&PlayLayer::createO_);

    playlayer.def("createCheckpoint", pybind::overload_cast<PlayLayer*>(&PlayLayer::createCheckpoint));
    playlayer.def("createCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::createCheckpoint));
    playlayer.def("createCheckpointO", [](PlayLayer* self) { return PlayLayer::createCheckpointO(self); });
    playlayer.attr("createCheckpointA") = PlayLayer::createCheckpointA;
    playlayer.attr("createCheckpointN") = "createCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::createCheckpointA, PlayLayer::createCheckpointH, (LPVOID*)&PlayLayer::createCheckpointO_);

    playlayer.def("createObjectsFromSetup", pybind::overload_cast<PlayLayer*, gd::string>(&PlayLayer::createObjectsFromSetup));
    playlayer.def("createObjectsFromSetup", pybind::overload_cast<pybind::function>(&PlayLayer::createObjectsFromSetup));
    playlayer.def("createObjectsFromSetupO", [](PlayLayer* self, gd::string p0) { return PlayLayer::createObjectsFromSetupO(self, p0); });
    playlayer.attr("createObjectsFromSetupA") = PlayLayer::createObjectsFromSetupA;
    playlayer.attr("createObjectsFromSetupN") = "createObjectsFromSetup";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::createObjectsFromSetupA, PlayLayer::createObjectsFromSetupH, (LPVOID*)&PlayLayer::createObjectsFromSetupO_);

    playlayer.def("currencyWillExit", pybind::overload_cast<PlayLayer*, CurrencyRewardLayer*>(&PlayLayer::currencyWillExit));
    playlayer.def("currencyWillExit", pybind::overload_cast<pybind::function>(&PlayLayer::currencyWillExit));
    playlayer.def("currencyWillExitO", [](PlayLayer* self, CurrencyRewardLayer* p0) { return PlayLayer::currencyWillExitO(self, p0); });
    playlayer.attr("currencyWillExitA") = PlayLayer::currencyWillExitA;
    playlayer.attr("currencyWillExitN") = "currencyWillExit";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::currencyWillExitA, PlayLayer::currencyWillExitH, (LPVOID*)&PlayLayer::currencyWillExitO_);

    playlayer.def("destroyPlayer", pybind::overload_cast<PlayLayer*, PlayerObject*, GameObject*>(&PlayLayer::destroyPlayer));
    playlayer.def("destroyPlayer", pybind::overload_cast<pybind::function>(&PlayLayer::destroyPlayer));
    playlayer.def("destroyPlayerO", [](PlayLayer* self, PlayerObject* p0, GameObject* p1) { return PlayLayer::destroyPlayerO(self, p0, p1); });
    playlayer.attr("destroyPlayerA") = PlayLayer::destroyPlayerA;
    playlayer.attr("destroyPlayerN") = "destroyPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::destroyPlayerA, PlayLayer::destroyPlayerH, (LPVOID*)&PlayLayer::destroyPlayerO_);

    playlayer.def("dialogClosed", pybind::overload_cast<PlayLayer*, DialogLayer*>(&PlayLayer::dialogClosed));
    playlayer.def("dialogClosed", pybind::overload_cast<pybind::function>(&PlayLayer::dialogClosed));
    playlayer.def("dialogClosedO", [](PlayLayer* self, DialogLayer* p0) { return PlayLayer::dialogClosedO(self, p0); });
    playlayer.attr("dialogClosedA") = PlayLayer::dialogClosedA;
    playlayer.attr("dialogClosedN") = "dialogClosed";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::dialogClosedA, PlayLayer::dialogClosedH, (LPVOID*)&PlayLayer::dialogClosedO_);

    playlayer.def("draw", pybind::overload_cast<PlayLayer*>(&PlayLayer::draw));
    playlayer.def("draw", pybind::overload_cast<pybind::function>(&PlayLayer::draw));
    playlayer.def("drawO", [](PlayLayer* self) { return PlayLayer::drawO(self); });
    playlayer.attr("drawA") = PlayLayer::drawA;
    playlayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::drawA, PlayLayer::drawH, (LPVOID*)&PlayLayer::drawO_);

    playlayer.def("flipFinished", pybind::overload_cast<PlayLayer*>(&PlayLayer::flipFinished));
    playlayer.def("flipFinished", pybind::overload_cast<pybind::function>(&PlayLayer::flipFinished));
    playlayer.def("flipFinishedO", [](PlayLayer* self) { return PlayLayer::flipFinishedO(self); });
    playlayer.attr("flipFinishedA") = PlayLayer::flipFinishedA;
    playlayer.attr("flipFinishedN") = "flipFinished";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::flipFinishedA, PlayLayer::flipFinishedH, (LPVOID*)&PlayLayer::flipFinishedO_);

    playlayer.def("flipGravity", pybind::overload_cast<PlayLayer*, PlayerObject*, bool, bool>(&PlayLayer::flipGravity));
    playlayer.def("flipGravity", pybind::overload_cast<pybind::function>(&PlayLayer::flipGravity));
    playlayer.def("flipGravityO", [](PlayLayer* self, PlayerObject* p0, bool p1, bool p2) { return PlayLayer::flipGravityO(self, p0, p1, p2); });
    playlayer.attr("flipGravityA") = PlayLayer::flipGravityA;
    playlayer.attr("flipGravityN") = "flipGravity";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::flipGravityA, PlayLayer::flipGravityH, (LPVOID*)&PlayLayer::flipGravityO_);

    playlayer.def("flipObjects", pybind::overload_cast<PlayLayer*>(&PlayLayer::flipObjects));
    playlayer.def("flipObjects", pybind::overload_cast<pybind::function>(&PlayLayer::flipObjects));
    playlayer.def("flipObjectsO", [](PlayLayer* self) { return PlayLayer::flipObjectsO(self); });
    playlayer.attr("flipObjectsA") = PlayLayer::flipObjectsA;
    playlayer.attr("flipObjectsN") = "flipObjects";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::flipObjectsA, PlayLayer::flipObjectsH, (LPVOID*)&PlayLayer::flipObjectsO_);

    playlayer.def("fullReset", pybind::overload_cast<PlayLayer*>(&PlayLayer::fullReset));
    playlayer.def("fullReset", pybind::overload_cast<pybind::function>(&PlayLayer::fullReset));
    playlayer.def("fullResetO", [](PlayLayer* self) { return PlayLayer::fullResetO(self); });
    playlayer.attr("fullResetA") = PlayLayer::fullResetA;
    playlayer.attr("fullResetN") = "fullReset";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::fullResetA, PlayLayer::fullResetH, (LPVOID*)&PlayLayer::fullResetO_);

    playlayer.def("getLastCheckpoint", pybind::overload_cast<PlayLayer*>(&PlayLayer::getLastCheckpoint));
    playlayer.def("getLastCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::getLastCheckpoint));
    playlayer.def("getLastCheckpointO", [](PlayLayer* self) { return PlayLayer::getLastCheckpointO(self); });
    playlayer.attr("getLastCheckpointA") = PlayLayer::getLastCheckpointA;
    playlayer.attr("getLastCheckpointN") = "getLastCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::getLastCheckpointA, PlayLayer::getLastCheckpointH, (LPVOID*)&PlayLayer::getLastCheckpointO_);

    playlayer.def("getObjectsState", pybind::overload_cast<PlayLayer*>(&PlayLayer::getObjectsState));
    playlayer.def("getObjectsState", pybind::overload_cast<pybind::function>(&PlayLayer::getObjectsState));
    playlayer.def("getObjectsStateO", [](PlayLayer* self) { return PlayLayer::getObjectsStateO(self); });
    playlayer.attr("getObjectsStateA") = PlayLayer::getObjectsStateA;
    playlayer.attr("getObjectsStateN") = "getObjectsState";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::getObjectsStateA, PlayLayer::getObjectsStateH, (LPVOID*)&PlayLayer::getObjectsStateO_);

    playlayer.def("getParticleKey2", pybind::overload_cast<PlayLayer*, gd::string>(&PlayLayer::getParticleKey2));
    playlayer.def("getParticleKey2", pybind::overload_cast<pybind::function>(&PlayLayer::getParticleKey2));
    playlayer.def("getParticleKey2O", [](PlayLayer* self, gd::string p0) { return PlayLayer::getParticleKey2O(self, p0); });
    playlayer.attr("getParticleKey2A") = PlayLayer::getParticleKey2A;
    playlayer.attr("getParticleKey2N") = "getParticleKey2";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::getParticleKey2A, PlayLayer::getParticleKey2H, (LPVOID*)&PlayLayer::getParticleKey2O_);

    playlayer.def("hasUniqueCoin", pybind::overload_cast<PlayLayer*, GameObject*>(&PlayLayer::hasUniqueCoin));
    playlayer.def("hasUniqueCoin", pybind::overload_cast<pybind::function>(&PlayLayer::hasUniqueCoin));
    playlayer.def("hasUniqueCoinO", [](PlayLayer* self, GameObject* p0) { return PlayLayer::hasUniqueCoinO(self, p0); });
    playlayer.attr("hasUniqueCoinA") = PlayLayer::hasUniqueCoinA;
    playlayer.attr("hasUniqueCoinN") = "hasUniqueCoin";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::hasUniqueCoinA, PlayLayer::hasUniqueCoinH, (LPVOID*)&PlayLayer::hasUniqueCoinO_);

    playlayer.def("init", pybind::overload_cast<PlayLayer*, GJGameLevel*>(&PlayLayer::init));
    playlayer.def("init", pybind::overload_cast<pybind::function>(&PlayLayer::init));
    playlayer.def("initO", [](PlayLayer* self, GJGameLevel* p0) { return PlayLayer::initO(self, p0); });
    playlayer.attr("initA") = PlayLayer::initA;
    playlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::initA, PlayLayer::initH, (LPVOID*)&PlayLayer::initO_);

    playlayer.def("levelComplete", pybind::overload_cast<PlayLayer*>(&PlayLayer::levelComplete));
    playlayer.def("levelComplete", pybind::overload_cast<pybind::function>(&PlayLayer::levelComplete));
    playlayer.def("levelCompleteO", [](PlayLayer* self) { return PlayLayer::levelCompleteO(self); });
    playlayer.attr("levelCompleteA") = PlayLayer::levelCompleteA;
    playlayer.attr("levelCompleteN") = "levelComplete";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::levelCompleteA, PlayLayer::levelCompleteH, (LPVOID*)&PlayLayer::levelCompleteO_);

    playlayer.def("lightningFlash", pybind::overload_cast<PlayLayer*, cocos2d::CCPoint, cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, int, bool, float>(&PlayLayer::lightningFlash));
    playlayer.def("lightningFlash", pybind::overload_cast<pybind::function>(&PlayLayer::lightningFlash));
    playlayer.def("lightningFlashO", [](PlayLayer* self, cocos2d::CCPoint p0, cocos2d::CCPoint p1, cocos2d::_ccColor3B p2, float p3, float p4, int p5, bool p6, float p7) { return PlayLayer::lightningFlashO(self, p0, p1, p2, p3, p4, p5, p6, p7); });
    playlayer.attr("lightningFlashA") = PlayLayer::lightningFlashA;
    playlayer.attr("lightningFlashN") = "lightningFlash";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::lightningFlashA, PlayLayer::lightningFlashH, (LPVOID*)&PlayLayer::lightningFlashO_);

    playlayer.def("lightningFlash", pybind::overload_cast<PlayLayer*, cocos2d::CCPoint, cocos2d::_ccColor3B>(&PlayLayer::lightningFlash));
    playlayer.def("loadDefaultColors", pybind::overload_cast<PlayLayer*>(&PlayLayer::loadDefaultColors));
    playlayer.def("loadDefaultColors", pybind::overload_cast<pybind::function>(&PlayLayer::loadDefaultColors));
    playlayer.def("loadDefaultColorsO", [](PlayLayer* self) { return PlayLayer::loadDefaultColorsO(self); });
    playlayer.attr("loadDefaultColorsA") = PlayLayer::loadDefaultColorsA;
    playlayer.attr("loadDefaultColorsN") = "loadDefaultColors";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::loadDefaultColorsA, PlayLayer::loadDefaultColorsH, (LPVOID*)&PlayLayer::loadDefaultColorsO_);

    playlayer.def("loadFromCheckpoint", pybind::overload_cast<PlayLayer*, CheckpointObject*>(&PlayLayer::loadFromCheckpoint));
    playlayer.def("loadFromCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::loadFromCheckpoint));
    playlayer.def("loadFromCheckpointO", [](PlayLayer* self, CheckpointObject* p0) { return PlayLayer::loadFromCheckpointO(self, p0); });
    playlayer.attr("loadFromCheckpointA") = PlayLayer::loadFromCheckpointA;
    playlayer.attr("loadFromCheckpointN") = "loadFromCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::loadFromCheckpointA, PlayLayer::loadFromCheckpointH, (LPVOID*)&PlayLayer::loadFromCheckpointO_);

    playlayer.def("markCheckpoint", pybind::overload_cast<PlayLayer*>(&PlayLayer::markCheckpoint));
    playlayer.def("markCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::markCheckpoint));
    playlayer.def("markCheckpointO", [](PlayLayer* self) { return PlayLayer::markCheckpointO(self); });
    playlayer.attr("markCheckpointA") = PlayLayer::markCheckpointA;
    playlayer.attr("markCheckpointN") = "markCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::markCheckpointA, PlayLayer::markCheckpointH, (LPVOID*)&PlayLayer::markCheckpointO_);

    playlayer.def("moveCameraToPos", pybind::overload_cast<PlayLayer*, cocos2d::CCPoint>(&PlayLayer::moveCameraToPos));
    playlayer.def("moveCameraToPos", pybind::overload_cast<pybind::function>(&PlayLayer::moveCameraToPos));
    playlayer.def("moveCameraToPosO", [](PlayLayer* self, cocos2d::CCPoint p0) { return PlayLayer::moveCameraToPosO(self, p0); });
    playlayer.attr("moveCameraToPosA") = PlayLayer::moveCameraToPosA;
    playlayer.attr("moveCameraToPosN") = "moveCameraToPos";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::moveCameraToPosA, PlayLayer::moveCameraToPosH, (LPVOID*)&PlayLayer::moveCameraToPosO_);

    playlayer.def("onEnterTransitionDidFinish", pybind::overload_cast<PlayLayer*>(&PlayLayer::onEnterTransitionDidFinish));
    playlayer.def("onEnterTransitionDidFinish", pybind::overload_cast<pybind::function>(&PlayLayer::onEnterTransitionDidFinish));
    playlayer.def("onEnterTransitionDidFinishO", [](PlayLayer* self) { return PlayLayer::onEnterTransitionDidFinishO(self); });
    playlayer.attr("onEnterTransitionDidFinishA") = PlayLayer::onEnterTransitionDidFinishA;
    playlayer.attr("onEnterTransitionDidFinishN") = "onEnterTransitionDidFinish";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::onEnterTransitionDidFinishA, PlayLayer::onEnterTransitionDidFinishH, (LPVOID*)&PlayLayer::onEnterTransitionDidFinishO_);

    playlayer.def("onExit", pybind::overload_cast<PlayLayer*>(&PlayLayer::onExit));
    playlayer.def("onExit", pybind::overload_cast<pybind::function>(&PlayLayer::onExit));
    playlayer.def("onExitO", [](PlayLayer* self) { return PlayLayer::onExitO(self); });
    playlayer.attr("onExitA") = PlayLayer::onExitA;
    playlayer.attr("onExitN") = "onExit";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::onExitA, PlayLayer::onExitH, (LPVOID*)&PlayLayer::onExitO_);

    playlayer.def("onQuit", pybind::overload_cast<PlayLayer*>(&PlayLayer::onQuit));
    playlayer.def("onQuit", pybind::overload_cast<pybind::function>(&PlayLayer::onQuit));
    playlayer.def("onQuitO", [](PlayLayer* self) { return PlayLayer::onQuitO(self); });
    playlayer.attr("onQuitA") = PlayLayer::onQuitA;
    playlayer.attr("onQuitN") = "onQuit";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::onQuitA, PlayLayer::onQuitH, (LPVOID*)&PlayLayer::onQuitO_);

    playlayer.def("optimizeColorGroups", pybind::overload_cast<PlayLayer*>(&PlayLayer::optimizeColorGroups));
    playlayer.def("optimizeColorGroups", pybind::overload_cast<pybind::function>(&PlayLayer::optimizeColorGroups));
    playlayer.def("optimizeColorGroupsO", [](PlayLayer* self) { return PlayLayer::optimizeColorGroupsO(self); });
    playlayer.attr("optimizeColorGroupsA") = PlayLayer::optimizeColorGroupsA;
    playlayer.attr("optimizeColorGroupsN") = "optimizeColorGroups";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::optimizeColorGroupsA, PlayLayer::optimizeColorGroupsH, (LPVOID*)&PlayLayer::optimizeColorGroupsO_);

    playlayer.def("optimizeOpacityGroups", pybind::overload_cast<PlayLayer*>(&PlayLayer::optimizeOpacityGroups));
    playlayer.def("optimizeOpacityGroups", pybind::overload_cast<pybind::function>(&PlayLayer::optimizeOpacityGroups));
    playlayer.def("optimizeOpacityGroupsO", [](PlayLayer* self) { return PlayLayer::optimizeOpacityGroupsO(self); });
    playlayer.attr("optimizeOpacityGroupsA") = PlayLayer::optimizeOpacityGroupsA;
    playlayer.attr("optimizeOpacityGroupsN") = "optimizeOpacityGroups";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::optimizeOpacityGroupsA, PlayLayer::optimizeOpacityGroupsH, (LPVOID*)&PlayLayer::optimizeOpacityGroupsO_);

    playlayer.def("optimizeSaveRequiredGroups", pybind::overload_cast<PlayLayer*>(&PlayLayer::optimizeSaveRequiredGroups));
    playlayer.def("optimizeSaveRequiredGroups", pybind::overload_cast<pybind::function>(&PlayLayer::optimizeSaveRequiredGroups));
    playlayer.def("optimizeSaveRequiredGroupsO", [](PlayLayer* self) { return PlayLayer::optimizeSaveRequiredGroupsO(self); });
    playlayer.attr("optimizeSaveRequiredGroupsA") = PlayLayer::optimizeSaveRequiredGroupsA;
    playlayer.attr("optimizeSaveRequiredGroupsN") = "optimizeSaveRequiredGroups";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::optimizeSaveRequiredGroupsA, PlayLayer::optimizeSaveRequiredGroupsH, (LPVOID*)&PlayLayer::optimizeSaveRequiredGroupsO_);

    playlayer.def("pauseGame", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::pauseGame));
    playlayer.def("pauseGame", pybind::overload_cast<pybind::function>(&PlayLayer::pauseGame));
    playlayer.def("pauseGameO", [](PlayLayer* self, bool p0) { return PlayLayer::pauseGameO(self, p0); });
    playlayer.attr("pauseGameA") = PlayLayer::pauseGameA;
    playlayer.attr("pauseGameN") = "pauseGame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::pauseGameA, PlayLayer::pauseGameH, (LPVOID*)&PlayLayer::pauseGameO_);

    playlayer.def("playAnimationCommand", pybind::overload_cast<PlayLayer*, int, int>(&PlayLayer::playAnimationCommand));
    playlayer.def("playAnimationCommand", pybind::overload_cast<pybind::function>(&PlayLayer::playAnimationCommand));
    playlayer.def("playAnimationCommandO", [](PlayLayer* self, int p0, int p1) { return PlayLayer::playAnimationCommandO(self, p0, p1); });
    playlayer.attr("playAnimationCommandA") = PlayLayer::playAnimationCommandA;
    playlayer.attr("playAnimationCommandN") = "playAnimationCommand";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::playAnimationCommandA, PlayLayer::playAnimationCommandH, (LPVOID*)&PlayLayer::playAnimationCommandO_);

    playlayer.def("playExitDualEffect", pybind::overload_cast<PlayLayer*, PlayerObject*>(&PlayLayer::playExitDualEffect));
    playlayer.def("playExitDualEffect", pybind::overload_cast<pybind::function>(&PlayLayer::playExitDualEffect));
    playlayer.def("playExitDualEffectO", [](PlayLayer* self, PlayerObject* p0) { return PlayLayer::playExitDualEffectO(self, p0); });
    playlayer.attr("playExitDualEffectA") = PlayLayer::playExitDualEffectA;
    playlayer.attr("playExitDualEffectN") = "playExitDualEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::playExitDualEffectA, PlayLayer::playExitDualEffectH, (LPVOID*)&PlayLayer::playExitDualEffectO_);

    playlayer.def("playGravityEffect", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::playGravityEffect));
    playlayer.def("playGravityEffect", pybind::overload_cast<pybind::function>(&PlayLayer::playGravityEffect));
    playlayer.def("playGravityEffectO", [](PlayLayer* self, bool p0) { return PlayLayer::playGravityEffectO(self, p0); });
    playlayer.attr("playGravityEffectA") = PlayLayer::playGravityEffectA;
    playlayer.attr("playGravityEffectN") = "playGravityEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::playGravityEffectA, PlayLayer::playGravityEffectH, (LPVOID*)&PlayLayer::playGravityEffectO_);

    playlayer.def("playSpeedParticle", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::playSpeedParticle));
    playlayer.def("playSpeedParticle", pybind::overload_cast<pybind::function>(&PlayLayer::playSpeedParticle));
    playlayer.def("playSpeedParticleO", [](PlayLayer* self, float p0) { return PlayLayer::playSpeedParticleO(self, p0); });
    playlayer.attr("playSpeedParticleA") = PlayLayer::playSpeedParticleA;
    playlayer.attr("playSpeedParticleN") = "playSpeedParticle";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::playSpeedParticleA, PlayLayer::playSpeedParticleH, (LPVOID*)&PlayLayer::playSpeedParticleO_);

    playlayer.def("playerWillSwitchMode", pybind::overload_cast<PlayLayer*, PlayerObject*, GameObject*>(&PlayLayer::playerWillSwitchMode));
    playlayer.def("playerWillSwitchMode", pybind::overload_cast<pybind::function>(&PlayLayer::playerWillSwitchMode));
    playlayer.def("playerWillSwitchModeO", [](PlayLayer* self, PlayerObject* p0, GameObject* p1) { return PlayLayer::playerWillSwitchModeO(self, p0, p1); });
    playlayer.attr("playerWillSwitchModeA") = PlayLayer::playerWillSwitchModeA;
    playlayer.attr("playerWillSwitchModeN") = "playerWillSwitchMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::playerWillSwitchModeA, PlayLayer::playerWillSwitchModeH, (LPVOID*)&PlayLayer::playerWillSwitchModeO_);

    playlayer.def("prepareSpawnObjects", pybind::overload_cast<PlayLayer*>(&PlayLayer::prepareSpawnObjects));
    playlayer.def("prepareSpawnObjects", pybind::overload_cast<pybind::function>(&PlayLayer::prepareSpawnObjects));
    playlayer.def("prepareSpawnObjectsO", [](PlayLayer* self) { return PlayLayer::prepareSpawnObjectsO(self); });
    playlayer.attr("prepareSpawnObjectsA") = PlayLayer::prepareSpawnObjectsA;
    playlayer.attr("prepareSpawnObjectsN") = "prepareSpawnObjects";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::prepareSpawnObjectsA, PlayLayer::prepareSpawnObjectsH, (LPVOID*)&PlayLayer::prepareSpawnObjectsO_);

    playlayer.def("removeAllObjects", pybind::overload_cast<PlayLayer*>(&PlayLayer::removeAllObjects));
    playlayer.def("removeAllObjects", pybind::overload_cast<pybind::function>(&PlayLayer::removeAllObjects));
    playlayer.def("removeAllObjectsO", [](PlayLayer* self) { return PlayLayer::removeAllObjectsO(self); });
    playlayer.attr("removeAllObjectsA") = PlayLayer::removeAllObjectsA;
    playlayer.attr("removeAllObjectsN") = "removeAllObjects";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::removeAllObjectsA, PlayLayer::removeAllObjectsH, (LPVOID*)&PlayLayer::removeAllObjectsO_);

    playlayer.def("removeLastCheckpoint", pybind::overload_cast<PlayLayer*>(&PlayLayer::removeLastCheckpoint));
    playlayer.def("removeLastCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::removeLastCheckpoint));
    playlayer.def("removeLastCheckpointO", [](PlayLayer* self) { return PlayLayer::removeLastCheckpointO(self); });
    playlayer.attr("removeLastCheckpointA") = PlayLayer::removeLastCheckpointA;
    playlayer.attr("removeLastCheckpointN") = "removeLastCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::removeLastCheckpointA, PlayLayer::removeLastCheckpointH, (LPVOID*)&PlayLayer::removeLastCheckpointO_);

    playlayer.def("resetLevel", pybind::overload_cast<PlayLayer*>(&PlayLayer::resetLevel));
    playlayer.def("resetLevel", pybind::overload_cast<pybind::function>(&PlayLayer::resetLevel));
    playlayer.def("resetLevelO", [](PlayLayer* self) { return PlayLayer::resetLevelO(self); });
    playlayer.attr("resetLevelA") = PlayLayer::resetLevelA;
    playlayer.attr("resetLevelN") = "resetLevel";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::resetLevelA, PlayLayer::resetLevelH, (LPVOID*)&PlayLayer::resetLevelO_);

    playlayer.def("resume", pybind::overload_cast<PlayLayer*>(&PlayLayer::resume));
    playlayer.def("resume", pybind::overload_cast<pybind::function>(&PlayLayer::resume));
    playlayer.def("resumeO", [](PlayLayer* self) { return PlayLayer::resumeO(self); });
    playlayer.attr("resumeA") = PlayLayer::resumeA;
    playlayer.attr("resumeN") = "resume";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::resumeA, PlayLayer::resumeH, (LPVOID*)&PlayLayer::resumeO_);

    playlayer.def("resumeAndRestart", pybind::overload_cast<PlayLayer*>(&PlayLayer::resumeAndRestart));
    playlayer.def("resumeAndRestart", pybind::overload_cast<pybind::function>(&PlayLayer::resumeAndRestart));
    playlayer.def("resumeAndRestartO", [](PlayLayer* self) { return PlayLayer::resumeAndRestartO(self); });
    playlayer.attr("resumeAndRestartA") = PlayLayer::resumeAndRestartA;
    playlayer.attr("resumeAndRestartN") = "resumeAndRestart";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::resumeAndRestartA, PlayLayer::resumeAndRestartH, (LPVOID*)&PlayLayer::resumeAndRestartO_);

    playlayer.def("saveRecordAction", pybind::overload_cast<PlayLayer*, bool, PlayerObject*>(&PlayLayer::saveRecordAction));
    playlayer.def("saveRecordAction", pybind::overload_cast<pybind::function>(&PlayLayer::saveRecordAction));
    playlayer.def("saveRecordActionO", [](PlayLayer* self, bool p0, PlayerObject* p1) { return PlayLayer::saveRecordActionO(self, p0, p1); });
    playlayer.attr("saveRecordActionA") = PlayLayer::saveRecordActionA;
    playlayer.attr("saveRecordActionN") = "saveRecordAction";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::saveRecordActionA, PlayLayer::saveRecordActionH, (LPVOID*)&PlayLayer::saveRecordActionO_);

    playlayer.def("setupLevelStart", pybind::overload_cast<PlayLayer*, LevelSettingsObject*>(&PlayLayer::setupLevelStart));
    playlayer.def("setupLevelStart", pybind::overload_cast<pybind::function>(&PlayLayer::setupLevelStart));
    playlayer.def("setupLevelStartO", [](PlayLayer* self, LevelSettingsObject* p0) { return PlayLayer::setupLevelStartO(self, p0); });
    playlayer.attr("setupLevelStartA") = PlayLayer::setupLevelStartA;
    playlayer.attr("setupLevelStartN") = "setupLevelStart";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::setupLevelStartA, PlayLayer::setupLevelStartH, (LPVOID*)&PlayLayer::setupLevelStartO_);

    playlayer.def("shakeCamera", pybind::overload_cast<PlayLayer*, float, float, float>(&PlayLayer::shakeCamera));
    playlayer.def("shakeCamera", pybind::overload_cast<pybind::function>(&PlayLayer::shakeCamera));
    playlayer.def("shakeCameraO", [](PlayLayer* self, float p0, float p1, float p2) { return PlayLayer::shakeCameraO(self, p0, p1, p2); });
    playlayer.attr("shakeCameraA") = PlayLayer::shakeCameraA;
    playlayer.attr("shakeCameraN") = "shakeCamera";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::shakeCameraA, PlayLayer::shakeCameraH, (LPVOID*)&PlayLayer::shakeCameraO_);

    playlayer.def("showCompleteEffect", pybind::overload_cast<PlayLayer*>(&PlayLayer::showCompleteEffect));
    playlayer.def("showCompleteEffect", pybind::overload_cast<pybind::function>(&PlayLayer::showCompleteEffect));
    playlayer.def("showCompleteEffectO", [](PlayLayer* self) { return PlayLayer::showCompleteEffectO(self); });
    playlayer.attr("showCompleteEffectA") = PlayLayer::showCompleteEffectA;
    playlayer.attr("showCompleteEffectN") = "showCompleteEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::showCompleteEffectA, PlayLayer::showCompleteEffectH, (LPVOID*)&PlayLayer::showCompleteEffectO_);

    playlayer.def("showCompleteText", pybind::overload_cast<PlayLayer*>(&PlayLayer::showCompleteText));
    playlayer.def("showCompleteText", pybind::overload_cast<pybind::function>(&PlayLayer::showCompleteText));
    playlayer.def("showCompleteTextO", [](PlayLayer* self) { return PlayLayer::showCompleteTextO(self); });
    playlayer.attr("showCompleteTextA") = PlayLayer::showCompleteTextA;
    playlayer.attr("showCompleteTextN") = "showCompleteText";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::showCompleteTextA, PlayLayer::showCompleteTextH, (LPVOID*)&PlayLayer::showCompleteTextO_);

    playlayer.def("showEndLayer", pybind::overload_cast<PlayLayer*>(&PlayLayer::showEndLayer));
    playlayer.def("showEndLayer", pybind::overload_cast<pybind::function>(&PlayLayer::showEndLayer));
    playlayer.def("showEndLayerO", [](PlayLayer* self) { return PlayLayer::showEndLayerO(self); });
    playlayer.attr("showEndLayerA") = PlayLayer::showEndLayerA;
    playlayer.attr("showEndLayerN") = "showEndLayer";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::showEndLayerA, PlayLayer::showEndLayerH, (LPVOID*)&PlayLayer::showEndLayerO_);

    playlayer.def("showNewBest", pybind::overload_cast<PlayLayer*, bool, int, int, bool, bool, bool>(&PlayLayer::showNewBest));
    playlayer.def("showNewBest", pybind::overload_cast<pybind::function>(&PlayLayer::showNewBest));
    playlayer.def("showNewBestO", [](PlayLayer* self, bool p0, int p1, int p2, bool p3, bool p4, bool p5) { return PlayLayer::showNewBestO(self, p0, p1, p2, p3, p4, p5); });
    playlayer.attr("showNewBestA") = PlayLayer::showNewBestA;
    playlayer.attr("showNewBestN") = "showNewBest";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::showNewBestA, PlayLayer::showNewBestH, (LPVOID*)&PlayLayer::showNewBestO_);

    playlayer.def("showTwoPlayerGuide", pybind::overload_cast<PlayLayer*>(&PlayLayer::showTwoPlayerGuide));
    playlayer.def("showTwoPlayerGuide", pybind::overload_cast<pybind::function>(&PlayLayer::showTwoPlayerGuide));
    playlayer.def("showTwoPlayerGuideO", [](PlayLayer* self) { return PlayLayer::showTwoPlayerGuideO(self); });
    playlayer.attr("showTwoPlayerGuideA") = PlayLayer::showTwoPlayerGuideA;
    playlayer.attr("showTwoPlayerGuideN") = "showTwoPlayerGuide";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::showTwoPlayerGuideA, PlayLayer::showTwoPlayerGuideH, (LPVOID*)&PlayLayer::showTwoPlayerGuideO_);

    playlayer.def("sortGroups", pybind::overload_cast<PlayLayer*>(&PlayLayer::sortGroups));
    playlayer.def("sortGroups", pybind::overload_cast<pybind::function>(&PlayLayer::sortGroups));
    playlayer.def("sortGroupsO", [](PlayLayer* self) { return PlayLayer::sortGroupsO(self); });
    playlayer.attr("sortGroupsA") = PlayLayer::sortGroupsA;
    playlayer.attr("sortGroupsN") = "sortGroups";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::sortGroupsA, PlayLayer::sortGroupsH, (LPVOID*)&PlayLayer::sortGroupsO_);

    playlayer.def("spawnPlayer2", pybind::overload_cast<PlayLayer*>(&PlayLayer::spawnPlayer2));
    playlayer.def("spawnPlayer2", pybind::overload_cast<pybind::function>(&PlayLayer::spawnPlayer2));
    playlayer.def("spawnPlayer2O", [](PlayLayer* self) { return PlayLayer::spawnPlayer2O(self); });
    playlayer.attr("spawnPlayer2A") = PlayLayer::spawnPlayer2A;
    playlayer.attr("spawnPlayer2N") = "spawnPlayer2";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::spawnPlayer2A, PlayLayer::spawnPlayer2H, (LPVOID*)&PlayLayer::spawnPlayer2O_);

    playlayer.def("startMusic", pybind::overload_cast<PlayLayer*>(&PlayLayer::startMusic));
    playlayer.def("startMusic", pybind::overload_cast<pybind::function>(&PlayLayer::startMusic));
    playlayer.def("startMusicO", [](PlayLayer* self) { return PlayLayer::startMusicO(self); });
    playlayer.attr("startMusicA") = PlayLayer::startMusicA;
    playlayer.attr("startMusicN") = "startMusic";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::startMusicA, PlayLayer::startMusicH, (LPVOID*)&PlayLayer::startMusicO_);

    playlayer.def("stopCameraShake", pybind::overload_cast<PlayLayer*>(&PlayLayer::stopCameraShake));
    playlayer.def("stopCameraShake", pybind::overload_cast<pybind::function>(&PlayLayer::stopCameraShake));
    playlayer.def("stopCameraShakeO", [](PlayLayer* self) { return PlayLayer::stopCameraShakeO(self); });
    playlayer.attr("stopCameraShakeA") = PlayLayer::stopCameraShakeA;
    playlayer.attr("stopCameraShakeN") = "stopCameraShake";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::stopCameraShakeA, PlayLayer::stopCameraShakeH, (LPVOID*)&PlayLayer::stopCameraShakeO_);

    playlayer.def("storeCheckpoint", pybind::overload_cast<PlayLayer*, CheckpointObject*>(&PlayLayer::storeCheckpoint));
    playlayer.def("storeCheckpoint", pybind::overload_cast<pybind::function>(&PlayLayer::storeCheckpoint));
    playlayer.def("storeCheckpointO", [](PlayLayer* self, CheckpointObject* p0) { return PlayLayer::storeCheckpointO(self, p0); });
    playlayer.attr("storeCheckpointA") = PlayLayer::storeCheckpointA;
    playlayer.attr("storeCheckpointN") = "storeCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::storeCheckpointA, PlayLayer::storeCheckpointH, (LPVOID*)&PlayLayer::storeCheckpointO_);

    playlayer.def("timeForXPos", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::timeForXPos));
    playlayer.def("timeForXPos", pybind::overload_cast<pybind::function>(&PlayLayer::timeForXPos));
    playlayer.def("timeForXPosO", [](PlayLayer* self, float p0) { return PlayLayer::timeForXPosO(self, p0); });
    playlayer.attr("timeForXPosA") = PlayLayer::timeForXPosA;
    playlayer.attr("timeForXPosN") = "timeForXPos";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::timeForXPosA, PlayLayer::timeForXPosH, (LPVOID*)&PlayLayer::timeForXPosO_);

    playlayer.def("timeForXPos2", pybind::overload_cast<PlayLayer*, float, bool>(&PlayLayer::timeForXPos2));
    playlayer.def("timeForXPos2", pybind::overload_cast<pybind::function>(&PlayLayer::timeForXPos2));
    playlayer.def("timeForXPos2O", [](PlayLayer* self, float p0, bool p1) { return PlayLayer::timeForXPos2O(self, p0, p1); });
    playlayer.attr("timeForXPos2A") = PlayLayer::timeForXPos2A;
    playlayer.attr("timeForXPos2N") = "timeForXPos2";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::timeForXPos2A, PlayLayer::timeForXPos2H, (LPVOID*)&PlayLayer::timeForXPos2O_);

    playlayer.def("toggleDualMode", pybind::overload_cast<PlayLayer*, GameObject*, bool, PlayerObject*, bool>(&PlayLayer::toggleDualMode));
    playlayer.def("toggleDualMode", pybind::overload_cast<pybind::function>(&PlayLayer::toggleDualMode));
    playlayer.def("toggleDualModeO", [](PlayLayer* self, GameObject* p0, bool p1, PlayerObject* p2, bool p3) { return PlayLayer::toggleDualModeO(self, p0, p1, p2, p3); });
    playlayer.attr("toggleDualModeA") = PlayLayer::toggleDualModeA;
    playlayer.attr("toggleDualModeN") = "toggleDualMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::toggleDualModeA, PlayLayer::toggleDualModeH, (LPVOID*)&PlayLayer::toggleDualModeO_);

    playlayer.def("toggleFlipped", pybind::overload_cast<PlayLayer*, bool, bool>(&PlayLayer::toggleFlipped));
    playlayer.def("toggleFlipped", pybind::overload_cast<pybind::function>(&PlayLayer::toggleFlipped));
    playlayer.def("toggleFlippedO", [](PlayLayer* self, bool p0, bool p1) { return PlayLayer::toggleFlippedO(self, p0, p1); });
    playlayer.attr("toggleFlippedA") = PlayLayer::toggleFlippedA;
    playlayer.attr("toggleFlippedN") = "toggleFlipped";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::toggleFlippedA, PlayLayer::toggleFlippedH, (LPVOID*)&PlayLayer::toggleFlippedO_);

    playlayer.def("toggleGlitter", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::toggleGlitter));
    playlayer.def("toggleGlitter", pybind::overload_cast<pybind::function>(&PlayLayer::toggleGlitter));
    playlayer.def("toggleGlitterO", [](PlayLayer* self, bool p0) { return PlayLayer::toggleGlitterO(self, p0); });
    playlayer.attr("toggleGlitterA") = PlayLayer::toggleGlitterA;
    playlayer.attr("toggleGlitterN") = "toggleGlitter";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::toggleGlitterA, PlayLayer::toggleGlitterH, (LPVOID*)&PlayLayer::toggleGlitterO_);

    playlayer.def("togglePracticeMode", pybind::overload_cast<PlayLayer*, bool>(&PlayLayer::togglePracticeMode));
    playlayer.def("togglePracticeMode", pybind::overload_cast<pybind::function>(&PlayLayer::togglePracticeMode));
    playlayer.def("togglePracticeModeO", [](PlayLayer* self, bool p0) { return PlayLayer::togglePracticeModeO(self, p0); });
    playlayer.attr("togglePracticeModeA") = PlayLayer::togglePracticeModeA;
    playlayer.attr("togglePracticeModeN") = "togglePracticeMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::togglePracticeModeA, PlayLayer::togglePracticeModeH, (LPVOID*)&PlayLayer::togglePracticeModeO_);

    playlayer.def("toggleProgressbar", pybind::overload_cast<PlayLayer*>(&PlayLayer::toggleProgressbar));
    playlayer.def("toggleProgressbar", pybind::overload_cast<pybind::function>(&PlayLayer::toggleProgressbar));
    playlayer.def("toggleProgressbarO", [](PlayLayer* self) { return PlayLayer::toggleProgressbarO(self); });
    playlayer.attr("toggleProgressbarA") = PlayLayer::toggleProgressbarA;
    playlayer.attr("toggleProgressbarN") = "toggleProgressbar";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::toggleProgressbarA, PlayLayer::toggleProgressbarH, (LPVOID*)&PlayLayer::toggleProgressbarO_);

    playlayer.def("update", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::update));
    playlayer.def("update", pybind::overload_cast<pybind::function>(&PlayLayer::update));
    playlayer.def("updateO", [](PlayLayer* self, float p0) { return PlayLayer::updateO(self, p0); });
    playlayer.attr("updateA") = PlayLayer::updateA;
    playlayer.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateA, PlayLayer::updateH, (LPVOID*)&PlayLayer::updateO_);

    playlayer.def("updateAttempts", pybind::overload_cast<PlayLayer*>(&PlayLayer::updateAttempts));
    playlayer.def("updateAttempts", pybind::overload_cast<pybind::function>(&PlayLayer::updateAttempts));
    playlayer.def("updateAttemptsO", [](PlayLayer* self) { return PlayLayer::updateAttemptsO(self); });
    playlayer.attr("updateAttemptsA") = PlayLayer::updateAttemptsA;
    playlayer.attr("updateAttemptsN") = "updateAttempts";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateAttemptsA, PlayLayer::updateAttemptsH, (LPVOID*)&PlayLayer::updateAttemptsO_);

    playlayer.def("updateCamera", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::updateCamera));
    playlayer.def("updateCamera", pybind::overload_cast<pybind::function>(&PlayLayer::updateCamera));
    playlayer.def("updateCameraO", [](PlayLayer* self, float p0) { return PlayLayer::updateCameraO(self, p0); });
    playlayer.attr("updateCameraA") = PlayLayer::updateCameraA;
    playlayer.attr("updateCameraN") = "updateCamera";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateCameraA, PlayLayer::updateCameraH, (LPVOID*)&PlayLayer::updateCameraO_);

    playlayer.def("updateColor", pybind::overload_cast<PlayLayer*, cocos2d::_ccColor3B, float, int, bool, float, cocos2d::_ccHSVValue, int, bool, int, EffectGameObject*>(&PlayLayer::updateColor));
    playlayer.def("updateColor", pybind::overload_cast<pybind::function>(&PlayLayer::updateColor));
    playlayer.def("updateColorO", [](PlayLayer* self, cocos2d::_ccColor3B p0, float p1, int p2, bool p3, float p4, cocos2d::_ccHSVValue p5, int p6, bool p7, int p8, EffectGameObject* p9) { return PlayLayer::updateColorO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    playlayer.attr("updateColorA") = PlayLayer::updateColorA;
    playlayer.attr("updateColorN") = "updateColor";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateColorA, PlayLayer::updateColorH, (LPVOID*)&PlayLayer::updateColorO_);

    playlayer.def("updateDualGround", pybind::overload_cast<PlayLayer*, PlayerObject*, int, bool>(&PlayLayer::updateDualGround));
    playlayer.def("updateDualGround", pybind::overload_cast<pybind::function>(&PlayLayer::updateDualGround));
    playlayer.def("updateDualGroundO", [](PlayLayer* self, PlayerObject* p0, int p1, bool p2) { return PlayLayer::updateDualGroundO(self, p0, p1, p2); });
    playlayer.attr("updateDualGroundA") = PlayLayer::updateDualGroundA;
    playlayer.attr("updateDualGroundN") = "updateDualGround";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateDualGroundA, PlayLayer::updateDualGroundH, (LPVOID*)&PlayLayer::updateDualGroundO_);

    playlayer.def("updateEffectPositions", pybind::overload_cast<PlayLayer*>(&PlayLayer::updateEffectPositions));
    playlayer.def("updateEffectPositions", pybind::overload_cast<pybind::function>(&PlayLayer::updateEffectPositions));
    playlayer.def("updateEffectPositionsO", [](PlayLayer* self) { return PlayLayer::updateEffectPositionsO(self); });
    playlayer.attr("updateEffectPositionsA") = PlayLayer::updateEffectPositionsA;
    playlayer.attr("updateEffectPositionsN") = "updateEffectPositions";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateEffectPositionsA, PlayLayer::updateEffectPositionsH, (LPVOID*)&PlayLayer::updateEffectPositionsO_);

    playlayer.def("updateLevelColors", pybind::overload_cast<PlayLayer*>(&PlayLayer::updateLevelColors));
    playlayer.def("updateLevelColors", pybind::overload_cast<pybind::function>(&PlayLayer::updateLevelColors));
    playlayer.def("updateLevelColorsO", [](PlayLayer* self) { return PlayLayer::updateLevelColorsO(self); });
    playlayer.attr("updateLevelColorsA") = PlayLayer::updateLevelColorsA;
    playlayer.attr("updateLevelColorsN") = "updateLevelColors";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateLevelColorsA, PlayLayer::updateLevelColorsH, (LPVOID*)&PlayLayer::updateLevelColorsO_);

    playlayer.def("updateProgressbar", pybind::overload_cast<PlayLayer*>(&PlayLayer::updateProgressbar));
    playlayer.def("updateProgressbar", pybind::overload_cast<pybind::function>(&PlayLayer::updateProgressbar));
    playlayer.def("updateProgressbarO", [](PlayLayer* self) { return PlayLayer::updateProgressbarO(self); });
    playlayer.attr("updateProgressbarA") = PlayLayer::updateProgressbarA;
    playlayer.attr("updateProgressbarN") = "updateProgressbar";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateProgressbarA, PlayLayer::updateProgressbarH, (LPVOID*)&PlayLayer::updateProgressbarO_);

    playlayer.def("updateReplay", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::updateReplay));
    playlayer.def("updateReplay", pybind::overload_cast<pybind::function>(&PlayLayer::updateReplay));
    playlayer.def("updateReplayO", [](PlayLayer* self, float p0) { return PlayLayer::updateReplayO(self, p0); });
    playlayer.attr("updateReplayA") = PlayLayer::updateReplayA;
    playlayer.attr("updateReplayN") = "updateReplay";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateReplayA, PlayLayer::updateReplayH, (LPVOID*)&PlayLayer::updateReplayO_);

    playlayer.def("updateTweenAction", pybind::overload_cast<PlayLayer*, float, char const*>(&PlayLayer::updateTweenAction));
    playlayer.def("updateTweenAction", pybind::overload_cast<pybind::function>(&PlayLayer::updateTweenAction));
    playlayer.def("updateTweenActionO", [](PlayLayer* self, float p0, char const* p1) { return PlayLayer::updateTweenActionO(self, p0, p1); });
    playlayer.attr("updateTweenActionA") = PlayLayer::updateTweenActionA;
    playlayer.attr("updateTweenActionN") = "updateTweenAction";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateTweenActionA, PlayLayer::updateTweenActionH, (LPVOID*)&PlayLayer::updateTweenActionO_);

    playlayer.def("updateVisibility", pybind::overload_cast<PlayLayer*>(&PlayLayer::updateVisibility));
    playlayer.def("updateVisibility", pybind::overload_cast<pybind::function>(&PlayLayer::updateVisibility));
    playlayer.def("updateVisibilityO", [](PlayLayer* self) { return PlayLayer::updateVisibilityO(self); });
    playlayer.attr("updateVisibilityA") = PlayLayer::updateVisibilityA;
    playlayer.attr("updateVisibilityN") = "updateVisibility";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::updateVisibilityA, PlayLayer::updateVisibilityH, (LPVOID*)&PlayLayer::updateVisibilityO_);

    playlayer.def("vfDChk", pybind::overload_cast<PlayLayer*>(&PlayLayer::vfDChk));
    playlayer.def("vfDChk", pybind::overload_cast<pybind::function>(&PlayLayer::vfDChk));
    playlayer.def("vfDChkO", [](PlayLayer* self) { return PlayLayer::vfDChkO(self); });
    playlayer.attr("vfDChkA") = PlayLayer::vfDChkA;
    playlayer.attr("vfDChkN") = "vfDChk";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::vfDChkA, PlayLayer::vfDChkH, (LPVOID*)&PlayLayer::vfDChkO_);

    playlayer.def("visit", pybind::overload_cast<PlayLayer*>(&PlayLayer::visit));
    playlayer.def("visit", pybind::overload_cast<pybind::function>(&PlayLayer::visit));
    playlayer.def("visitO", [](PlayLayer* self) { return PlayLayer::visitO(self); });
    playlayer.attr("visitA") = PlayLayer::visitA;
    playlayer.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::visitA, PlayLayer::visitH, (LPVOID*)&PlayLayer::visitO_);

    playlayer.def("visitWithColorFlash", pybind::overload_cast<PlayLayer*>(&PlayLayer::visitWithColorFlash));
    playlayer.def("visitWithColorFlash", pybind::overload_cast<pybind::function>(&PlayLayer::visitWithColorFlash));
    playlayer.def("visitWithColorFlashO", [](PlayLayer* self) { return PlayLayer::visitWithColorFlashO(self); });
    playlayer.attr("visitWithColorFlashA") = PlayLayer::visitWithColorFlashA;
    playlayer.attr("visitWithColorFlashN") = "visitWithColorFlash";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::visitWithColorFlashA, PlayLayer::visitWithColorFlashH, (LPVOID*)&PlayLayer::visitWithColorFlashO_);

    playlayer.def("xPosForTime", pybind::overload_cast<PlayLayer*, float>(&PlayLayer::xPosForTime));
    playlayer.def("xPosForTime", pybind::overload_cast<pybind::function>(&PlayLayer::xPosForTime));
    playlayer.def("xPosForTimeO", [](PlayLayer* self, float p0) { return PlayLayer::xPosForTimeO(self, p0); });
    playlayer.attr("xPosForTimeA") = PlayLayer::xPosForTimeA;
    playlayer.attr("xPosForTimeN") = "xPosForTime";
    cinnamon::hooks::hookCinnamon((PVOID)PlayLayer::xPosForTimeA, PlayLayer::xPosForTimeH, (LPVOID*)&PlayLayer::xPosForTimeO_);

    auto playercheckpoint = pybind::class_<PlayerCheckpoint, cocos2d::CCNode>(m, "PlayerCheckpoint");
    playercheckpoint.def("create", pybind::overload_cast<>(&PlayerCheckpoint::create));
    playercheckpoint.def("create", pybind::overload_cast<pybind::function>(&PlayerCheckpoint::create));
    playercheckpoint.def("createO", []() { return PlayerCheckpoint::createO(); });
    playercheckpoint.attr("createA") = PlayerCheckpoint::createA;
    playercheckpoint.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerCheckpoint::createA, PlayerCheckpoint::createH, (LPVOID*)&PlayerCheckpoint::createO_);

    auto playerobject = pybind::class_<PlayerObject, GameObject>(m, "PlayerObject");
    playerobject.def("update", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::update));
    playerobject.def("update", pybind::overload_cast<pybind::function>(&PlayerObject::update));
    playerobject.def("updateO", [](PlayerObject* self, float p0) { return PlayerObject::updateO(self, p0); });
    playerobject.attr("updateA") = PlayerObject::updateA;
    playerobject.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateA, PlayerObject::updateH, (LPVOID*)&PlayerObject::updateO_);

    playerobject.def("setScaleX", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::setScaleX));
    playerobject.def("setScaleX", pybind::overload_cast<pybind::function>(&PlayerObject::setScaleX));
    playerobject.def("setScaleXO", [](PlayerObject* self, float p0) { return PlayerObject::setScaleXO(self, p0); });
    playerobject.attr("setScaleXA") = PlayerObject::setScaleXA;
    playerobject.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setScaleXA, PlayerObject::setScaleXH, (LPVOID*)&PlayerObject::setScaleXO_);

    playerobject.def("setScaleY", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::setScaleY));
    playerobject.def("setScaleY", pybind::overload_cast<pybind::function>(&PlayerObject::setScaleY));
    playerobject.def("setScaleYO", [](PlayerObject* self, float p0) { return PlayerObject::setScaleYO(self, p0); });
    playerobject.attr("setScaleYA") = PlayerObject::setScaleYA;
    playerobject.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setScaleYA, PlayerObject::setScaleYH, (LPVOID*)&PlayerObject::setScaleYO_);

    playerobject.def("setScale", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::setScale));
    playerobject.def("setScale", pybind::overload_cast<pybind::function>(&PlayerObject::setScale));
    playerobject.def("setScaleO", [](PlayerObject* self, float p0) { return PlayerObject::setScaleO(self, p0); });
    playerobject.attr("setScaleA") = PlayerObject::setScaleA;
    playerobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setScaleA, PlayerObject::setScaleH, (LPVOID*)&PlayerObject::setScaleO_);

    playerobject.def("setPosition", pybind::overload_cast<PlayerObject*, cocos2d::CCPoint const&>(&PlayerObject::setPosition));
    playerobject.def("setPosition", pybind::overload_cast<pybind::function>(&PlayerObject::setPosition));
    playerobject.def("setPositionO", [](PlayerObject* self, cocos2d::CCPoint const& p0) { return PlayerObject::setPositionO(self, p0); });
    playerobject.attr("setPositionA") = PlayerObject::setPositionA;
    playerobject.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setPositionA, PlayerObject::setPositionH, (LPVOID*)&PlayerObject::setPositionO_);

    playerobject.def("setVisible", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::setVisible));
    playerobject.def("setVisible", pybind::overload_cast<pybind::function>(&PlayerObject::setVisible));
    playerobject.def("setVisibleO", [](PlayerObject* self, bool p0) { return PlayerObject::setVisibleO(self, p0); });
    playerobject.attr("setVisibleA") = PlayerObject::setVisibleA;
    playerobject.attr("setVisibleN") = "setVisible";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setVisibleA, PlayerObject::setVisibleH, (LPVOID*)&PlayerObject::setVisibleO_);

    playerobject.def("setRotation", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::setRotation));
    playerobject.def("setRotation", pybind::overload_cast<pybind::function>(&PlayerObject::setRotation));
    playerobject.def("setRotationO", [](PlayerObject* self, float p0) { return PlayerObject::setRotationO(self, p0); });
    playerobject.attr("setRotationA") = PlayerObject::setRotationA;
    playerobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setRotationA, PlayerObject::setRotationH, (LPVOID*)&PlayerObject::setRotationO_);

    playerobject.def("setOpacity", pybind::overload_cast<PlayerObject*, unsigned char>(&PlayerObject::setOpacity));
    playerobject.def("setOpacity", pybind::overload_cast<pybind::function>(&PlayerObject::setOpacity));
    playerobject.def("setOpacityO", [](PlayerObject* self, unsigned char p0) { return PlayerObject::setOpacityO(self, p0); });
    playerobject.attr("setOpacityA") = PlayerObject::setOpacityA;
    playerobject.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setOpacityA, PlayerObject::setOpacityH, (LPVOID*)&PlayerObject::setOpacityO_);

    playerobject.def("setColor", pybind::overload_cast<PlayerObject*, cocos2d::_ccColor3B const&>(&PlayerObject::setColor));
    playerobject.def("setColor", pybind::overload_cast<pybind::function>(&PlayerObject::setColor));
    playerobject.def("setColorO", [](PlayerObject* self, cocos2d::_ccColor3B const& p0) { return PlayerObject::setColorO(self, p0); });
    playerobject.attr("setColorA") = PlayerObject::setColorA;
    playerobject.attr("setColorN") = "setColor";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setColorA, PlayerObject::setColorH, (LPVOID*)&PlayerObject::setColorO_);

    playerobject.def("setFlipX", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::setFlipX));
    playerobject.def("setFlipX", pybind::overload_cast<pybind::function>(&PlayerObject::setFlipX));
    playerobject.def("setFlipXO", [](PlayerObject* self, bool p0) { return PlayerObject::setFlipXO(self, p0); });
    playerobject.attr("setFlipXA") = PlayerObject::setFlipXA;
    playerobject.attr("setFlipXN") = "setFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setFlipXA, PlayerObject::setFlipXH, (LPVOID*)&PlayerObject::setFlipXO_);

    playerobject.def("setFlipY", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::setFlipY));
    playerobject.def("setFlipY", pybind::overload_cast<pybind::function>(&PlayerObject::setFlipY));
    playerobject.def("setFlipYO", [](PlayerObject* self, bool p0) { return PlayerObject::setFlipYO(self, p0); });
    playerobject.attr("setFlipYA") = PlayerObject::setFlipYA;
    playerobject.attr("setFlipYN") = "setFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setFlipYA, PlayerObject::setFlipYH, (LPVOID*)&PlayerObject::setFlipYO_);

    playerobject.def("resetObject", pybind::overload_cast<PlayerObject*>(&PlayerObject::resetObject));
    playerobject.def("resetObject", pybind::overload_cast<pybind::function>(&PlayerObject::resetObject));
    playerobject.def("resetObjectO", [](PlayerObject* self) { return PlayerObject::resetObjectO(self); });
    playerobject.attr("resetObjectA") = PlayerObject::resetObjectA;
    playerobject.attr("resetObjectN") = "resetObject";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::resetObjectA, PlayerObject::resetObjectH, (LPVOID*)&PlayerObject::resetObjectO_);

    playerobject.def("getRealPosition", pybind::overload_cast<PlayerObject*>(&PlayerObject::getRealPosition));
    playerobject.def("getRealPosition", pybind::overload_cast<pybind::function>(&PlayerObject::getRealPosition));
    playerobject.def("getRealPositionO", [](PlayerObject* self) { return PlayerObject::getRealPositionO(self); });
    playerobject.attr("getRealPositionA") = PlayerObject::getRealPositionA;
    playerobject.attr("getRealPositionN") = "getRealPosition";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::getRealPositionA, PlayerObject::getRealPositionH, (LPVOID*)&PlayerObject::getRealPositionO_);

    playerobject.def("getOrientedBox", pybind::overload_cast<PlayerObject*>(&PlayerObject::getOrientedBox));
    playerobject.def("getOrientedBox", pybind::overload_cast<pybind::function>(&PlayerObject::getOrientedBox));
    playerobject.def("getOrientedBoxO", [](PlayerObject* self) { return PlayerObject::getOrientedBoxO(self); });
    playerobject.attr("getOrientedBoxA") = PlayerObject::getOrientedBoxA;
    playerobject.attr("getOrientedBoxN") = "getOrientedBox";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::getOrientedBoxA, PlayerObject::getOrientedBoxH, (LPVOID*)&PlayerObject::getOrientedBoxO_);

    playerobject.def("animationFinished", pybind::overload_cast<PlayerObject*, char const*>(&PlayerObject::animationFinished));
    playerobject.def("animationFinished", pybind::overload_cast<pybind::function>(&PlayerObject::animationFinished));
    playerobject.def("animationFinishedO", [](PlayerObject* self, char const* p0) { return PlayerObject::animationFinishedO(self, p0); });
    playerobject.attr("animationFinishedA") = PlayerObject::animationFinishedA;
    playerobject.attr("animationFinishedN") = "animationFinished";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::animationFinishedA, PlayerObject::animationFinishedH, (LPVOID*)&PlayerObject::animationFinishedO_);

    playerobject.def("activateStreak", pybind::overload_cast<PlayerObject*>(&PlayerObject::activateStreak));
    playerobject.def("activateStreak", pybind::overload_cast<pybind::function>(&PlayerObject::activateStreak));
    playerobject.def("activateStreakO", [](PlayerObject* self) { return PlayerObject::activateStreakO(self); });
    playerobject.attr("activateStreakA") = PlayerObject::activateStreakA;
    playerobject.attr("activateStreakN") = "activateStreak";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::activateStreakA, PlayerObject::activateStreakH, (LPVOID*)&PlayerObject::activateStreakO_);

    playerobject.def("addAllParticles", pybind::overload_cast<PlayerObject*>(&PlayerObject::addAllParticles));
    playerobject.def("addAllParticles", pybind::overload_cast<pybind::function>(&PlayerObject::addAllParticles));
    playerobject.def("addAllParticlesO", [](PlayerObject* self) { return PlayerObject::addAllParticlesO(self); });
    playerobject.attr("addAllParticlesA") = PlayerObject::addAllParticlesA;
    playerobject.attr("addAllParticlesN") = "addAllParticles";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::addAllParticlesA, PlayerObject::addAllParticlesH, (LPVOID*)&PlayerObject::addAllParticlesO_);

    playerobject.def("boostPlayer", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::boostPlayer));
    playerobject.def("boostPlayer", pybind::overload_cast<pybind::function>(&PlayerObject::boostPlayer));
    playerobject.def("boostPlayerO", [](PlayerObject* self, float p0) { return PlayerObject::boostPlayerO(self, p0); });
    playerobject.attr("boostPlayerA") = PlayerObject::boostPlayerA;
    playerobject.attr("boostPlayerN") = "boostPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::boostPlayerA, PlayerObject::boostPlayerH, (LPVOID*)&PlayerObject::boostPlayerO_);

    playerobject.def("collidedWithObject", pybind::overload_cast<PlayerObject*, float, GameObject*, cocos2d::CCRect>(&PlayerObject::collidedWithObject));
    playerobject.def("collidedWithObject", pybind::overload_cast<pybind::function>(&PlayerObject::collidedWithObject));
    playerobject.def("collidedWithObjectO", [](PlayerObject* self, float p0, GameObject* p1, cocos2d::CCRect p2) { return PlayerObject::collidedWithObjectO(self, p0, p1, p2); });
    playerobject.attr("collidedWithObjectA") = PlayerObject::collidedWithObjectA;
    playerobject.attr("collidedWithObjectN") = "collidedWithObject";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::collidedWithObjectA, PlayerObject::collidedWithObjectH, (LPVOID*)&PlayerObject::collidedWithObjectO_);

    playerobject.def("convertToClosestRotation", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::convertToClosestRotation));
    playerobject.def("convertToClosestRotation", pybind::overload_cast<pybind::function>(&PlayerObject::convertToClosestRotation));
    playerobject.def("convertToClosestRotationO", [](PlayerObject* self, float p0) { return PlayerObject::convertToClosestRotationO(self, p0); });
    playerobject.attr("convertToClosestRotationA") = PlayerObject::convertToClosestRotationA;
    playerobject.attr("convertToClosestRotationN") = "convertToClosestRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::convertToClosestRotationA, PlayerObject::convertToClosestRotationH, (LPVOID*)&PlayerObject::convertToClosestRotationO_);

    playerobject.def("copyAttributes", pybind::overload_cast<PlayerObject*, PlayerObject*>(&PlayerObject::copyAttributes));
    playerobject.def("copyAttributes", pybind::overload_cast<pybind::function>(&PlayerObject::copyAttributes));
    playerobject.def("copyAttributesO", [](PlayerObject* self, PlayerObject* p0) { return PlayerObject::copyAttributesO(self, p0); });
    playerobject.attr("copyAttributesA") = PlayerObject::copyAttributesA;
    playerobject.attr("copyAttributesN") = "copyAttributes";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::copyAttributesA, PlayerObject::copyAttributesH, (LPVOID*)&PlayerObject::copyAttributesO_);

    playerobject.def("create", pybind::overload_cast<int, int, cocos2d::CCLayer*>(&PlayerObject::create));
    playerobject.def("create", pybind::overload_cast<pybind::function>(&PlayerObject::create));
    playerobject.def("createO", [](int p0, int p1, cocos2d::CCLayer* p2) { return PlayerObject::createO(p0, p1, p2); });
    playerobject.attr("createA") = PlayerObject::createA;
    playerobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::createA, PlayerObject::createH, (LPVOID*)&PlayerObject::createO_);

    playerobject.def("deactivateParticle", pybind::overload_cast<PlayerObject*>(&PlayerObject::deactivateParticle));
    playerobject.def("deactivateParticle", pybind::overload_cast<pybind::function>(&PlayerObject::deactivateParticle));
    playerobject.def("deactivateParticleO", [](PlayerObject* self) { return PlayerObject::deactivateParticleO(self); });
    playerobject.attr("deactivateParticleA") = PlayerObject::deactivateParticleA;
    playerobject.attr("deactivateParticleN") = "deactivateParticle";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::deactivateParticleA, PlayerObject::deactivateParticleH, (LPVOID*)&PlayerObject::deactivateParticleO_);

    playerobject.def("fadeOutStreak2", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::fadeOutStreak2));
    playerobject.def("fadeOutStreak2", pybind::overload_cast<pybind::function>(&PlayerObject::fadeOutStreak2));
    playerobject.def("fadeOutStreak2O", [](PlayerObject* self, float p0) { return PlayerObject::fadeOutStreak2O(self, p0); });
    playerobject.attr("fadeOutStreak2A") = PlayerObject::fadeOutStreak2A;
    playerobject.attr("fadeOutStreak2N") = "fadeOutStreak2";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::fadeOutStreak2A, PlayerObject::fadeOutStreak2H, (LPVOID*)&PlayerObject::fadeOutStreak2O_);

    playerobject.def("flipGravity", pybind::overload_cast<PlayerObject*, bool, bool>(&PlayerObject::flipGravity));
    playerobject.def("flipGravity", pybind::overload_cast<pybind::function>(&PlayerObject::flipGravity));
    playerobject.def("flipGravityO", [](PlayerObject* self, bool p0, bool p1) { return PlayerObject::flipGravityO(self, p0, p1); });
    playerobject.attr("flipGravityA") = PlayerObject::flipGravityA;
    playerobject.attr("flipGravityN") = "flipGravity";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::flipGravityA, PlayerObject::flipGravityH, (LPVOID*)&PlayerObject::flipGravityO_);

    playerobject.def("getActiveMode", pybind::overload_cast<PlayerObject*>(&PlayerObject::getActiveMode));
    playerobject.def("getActiveMode", pybind::overload_cast<pybind::function>(&PlayerObject::getActiveMode));
    playerobject.def("getActiveModeO", [](PlayerObject* self) { return PlayerObject::getActiveModeO(self); });
    playerobject.attr("getActiveModeA") = PlayerObject::getActiveModeA;
    playerobject.attr("getActiveModeN") = "getActiveMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::getActiveModeA, PlayerObject::getActiveModeH, (LPVOID*)&PlayerObject::getActiveModeO_);

    playerobject.def("getModifiedSlopeYVel", pybind::overload_cast<PlayerObject*>(&PlayerObject::getModifiedSlopeYVel));
    playerobject.def("getModifiedSlopeYVel", pybind::overload_cast<pybind::function>(&PlayerObject::getModifiedSlopeYVel));
    playerobject.def("getModifiedSlopeYVelO", [](PlayerObject* self) { return PlayerObject::getModifiedSlopeYVelO(self); });
    playerobject.attr("getModifiedSlopeYVelA") = PlayerObject::getModifiedSlopeYVelA;
    playerobject.attr("getModifiedSlopeYVelN") = "getModifiedSlopeYVel";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::getModifiedSlopeYVelA, PlayerObject::getModifiedSlopeYVelH, (LPVOID*)&PlayerObject::getModifiedSlopeYVelO_);

    playerobject.def("incrementJumps", pybind::overload_cast<PlayerObject*>(&PlayerObject::incrementJumps));
    playerobject.def("incrementJumps", pybind::overload_cast<pybind::function>(&PlayerObject::incrementJumps));
    playerobject.def("incrementJumpsO", [](PlayerObject* self) { return PlayerObject::incrementJumpsO(self); });
    playerobject.attr("incrementJumpsA") = PlayerObject::incrementJumpsA;
    playerobject.attr("incrementJumpsN") = "incrementJumps";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::incrementJumpsA, PlayerObject::incrementJumpsH, (LPVOID*)&PlayerObject::incrementJumpsO_);

    playerobject.def("init", pybind::overload_cast<PlayerObject*, int, int, cocos2d::CCLayer*>(&PlayerObject::init));
    playerobject.def("init", pybind::overload_cast<pybind::function>(&PlayerObject::init));
    playerobject.def("initO", [](PlayerObject* self, int p0, int p1, cocos2d::CCLayer* p2) { return PlayerObject::initO(self, p0, p1, p2); });
    playerobject.attr("initA") = PlayerObject::initA;
    playerobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::initA, PlayerObject::initH, (LPVOID*)&PlayerObject::initO_);

    playerobject.def("isBoostValid", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::isBoostValid));
    playerobject.def("isBoostValid", pybind::overload_cast<pybind::function>(&PlayerObject::isBoostValid));
    playerobject.def("isBoostValidO", [](PlayerObject* self, float p0) { return PlayerObject::isBoostValidO(self, p0); });
    playerobject.attr("isBoostValidA") = PlayerObject::isBoostValidA;
    playerobject.attr("isBoostValidN") = "isBoostValid";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::isBoostValidA, PlayerObject::isBoostValidH, (LPVOID*)&PlayerObject::isBoostValidO_);

    playerobject.def("isFlying", pybind::overload_cast<PlayerObject*>(&PlayerObject::isFlying));
    playerobject.def("isFlying", pybind::overload_cast<pybind::function>(&PlayerObject::isFlying));
    playerobject.def("isFlyingO", [](PlayerObject* self) { return PlayerObject::isFlyingO(self); });
    playerobject.attr("isFlyingA") = PlayerObject::isFlyingA;
    playerobject.attr("isFlyingN") = "isFlying";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::isFlyingA, PlayerObject::isFlyingH, (LPVOID*)&PlayerObject::isFlyingO_);

    playerobject.def("levelFlipFinished", pybind::overload_cast<PlayerObject*>(&PlayerObject::levelFlipFinished));
    playerobject.def("levelFlipFinished", pybind::overload_cast<pybind::function>(&PlayerObject::levelFlipFinished));
    playerobject.def("levelFlipFinishedO", [](PlayerObject* self) { return PlayerObject::levelFlipFinishedO(self); });
    playerobject.attr("levelFlipFinishedA") = PlayerObject::levelFlipFinishedA;
    playerobject.attr("levelFlipFinishedN") = "levelFlipFinished";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::levelFlipFinishedA, PlayerObject::levelFlipFinishedH, (LPVOID*)&PlayerObject::levelFlipFinishedO_);

    playerobject.def("levelFlipping", pybind::overload_cast<PlayerObject*>(&PlayerObject::levelFlipping));
    playerobject.def("levelFlipping", pybind::overload_cast<pybind::function>(&PlayerObject::levelFlipping));
    playerobject.def("levelFlippingO", [](PlayerObject* self) { return PlayerObject::levelFlippingO(self); });
    playerobject.attr("levelFlippingA") = PlayerObject::levelFlippingA;
    playerobject.attr("levelFlippingN") = "levelFlipping";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::levelFlippingA, PlayerObject::levelFlippingH, (LPVOID*)&PlayerObject::levelFlippingO_);

    playerobject.def("loadFromCheckpoint", pybind::overload_cast<PlayerObject*, PlayerCheckpoint*>(&PlayerObject::loadFromCheckpoint));
    playerobject.def("loadFromCheckpoint", pybind::overload_cast<pybind::function>(&PlayerObject::loadFromCheckpoint));
    playerobject.def("loadFromCheckpointO", [](PlayerObject* self, PlayerCheckpoint* p0) { return PlayerObject::loadFromCheckpointO(self, p0); });
    playerobject.attr("loadFromCheckpointA") = PlayerObject::loadFromCheckpointA;
    playerobject.attr("loadFromCheckpointN") = "loadFromCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::loadFromCheckpointA, PlayerObject::loadFromCheckpointH, (LPVOID*)&PlayerObject::loadFromCheckpointO_);

    playerobject.def("placeStreakPoint", pybind::overload_cast<PlayerObject*>(&PlayerObject::placeStreakPoint));
    playerobject.def("placeStreakPoint", pybind::overload_cast<pybind::function>(&PlayerObject::placeStreakPoint));
    playerobject.def("placeStreakPointO", [](PlayerObject* self) { return PlayerObject::placeStreakPointO(self); });
    playerobject.attr("placeStreakPointA") = PlayerObject::placeStreakPointA;
    playerobject.attr("placeStreakPointN") = "placeStreakPoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::placeStreakPointA, PlayerObject::placeStreakPointH, (LPVOID*)&PlayerObject::placeStreakPointO_);

    playerobject.def("playBurstEffect", pybind::overload_cast<PlayerObject*>(&PlayerObject::playBurstEffect));
    playerobject.def("playBurstEffect", pybind::overload_cast<pybind::function>(&PlayerObject::playBurstEffect));
    playerobject.def("playBurstEffectO", [](PlayerObject* self) { return PlayerObject::playBurstEffectO(self); });
    playerobject.attr("playBurstEffectA") = PlayerObject::playBurstEffectA;
    playerobject.attr("playBurstEffectN") = "playBurstEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::playBurstEffectA, PlayerObject::playBurstEffectH, (LPVOID*)&PlayerObject::playBurstEffectO_);

    playerobject.def("playDeathEffect", pybind::overload_cast<PlayerObject*>(&PlayerObject::playDeathEffect));
    playerobject.def("playDeathEffect", pybind::overload_cast<pybind::function>(&PlayerObject::playDeathEffect));
    playerobject.def("playDeathEffectO", [](PlayerObject* self) { return PlayerObject::playDeathEffectO(self); });
    playerobject.attr("playDeathEffectA") = PlayerObject::playDeathEffectA;
    playerobject.attr("playDeathEffectN") = "playDeathEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::playDeathEffectA, PlayerObject::playDeathEffectH, (LPVOID*)&PlayerObject::playDeathEffectO_);

    playerobject.def("playDynamicSpiderRun", pybind::overload_cast<PlayerObject*>(&PlayerObject::playDynamicSpiderRun));
    playerobject.def("playDynamicSpiderRun", pybind::overload_cast<pybind::function>(&PlayerObject::playDynamicSpiderRun));
    playerobject.def("playDynamicSpiderRunO", [](PlayerObject* self) { return PlayerObject::playDynamicSpiderRunO(self); });
    playerobject.attr("playDynamicSpiderRunA") = PlayerObject::playDynamicSpiderRunA;
    playerobject.attr("playDynamicSpiderRunN") = "playDynamicSpiderRun";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::playDynamicSpiderRunA, PlayerObject::playDynamicSpiderRunH, (LPVOID*)&PlayerObject::playDynamicSpiderRunO_);

    playerobject.def("playerDestroyed", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::playerDestroyed));
    playerobject.def("playerDestroyed", pybind::overload_cast<pybind::function>(&PlayerObject::playerDestroyed));
    playerobject.def("playerDestroyedO", [](PlayerObject* self, bool p0) { return PlayerObject::playerDestroyedO(self, p0); });
    playerobject.attr("playerDestroyedA") = PlayerObject::playerDestroyedA;
    playerobject.attr("playerDestroyedN") = "playerDestroyed";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::playerDestroyedA, PlayerObject::playerDestroyedH, (LPVOID*)&PlayerObject::playerDestroyedO_);

    playerobject.def("playerIsFalling", pybind::overload_cast<PlayerObject*>(&PlayerObject::playerIsFalling));
    playerobject.def("playerIsFalling", pybind::overload_cast<pybind::function>(&PlayerObject::playerIsFalling));
    playerobject.def("playerIsFallingO", [](PlayerObject* self) { return PlayerObject::playerIsFallingO(self); });
    playerobject.attr("playerIsFallingA") = PlayerObject::playerIsFallingA;
    playerobject.attr("playerIsFallingN") = "playerIsFalling";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::playerIsFallingA, PlayerObject::playerIsFallingH, (LPVOID*)&PlayerObject::playerIsFallingO_);

    playerobject.def("postCollision", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::postCollision));
    playerobject.def("postCollision", pybind::overload_cast<pybind::function>(&PlayerObject::postCollision));
    playerobject.def("postCollisionO", [](PlayerObject* self, float p0) { return PlayerObject::postCollisionO(self, p0); });
    playerobject.attr("postCollisionA") = PlayerObject::postCollisionA;
    playerobject.attr("postCollisionN") = "postCollision";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::postCollisionA, PlayerObject::postCollisionH, (LPVOID*)&PlayerObject::postCollisionO_);

    playerobject.def("propellPlayer", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::propellPlayer));
    playerobject.def("propellPlayer", pybind::overload_cast<pybind::function>(&PlayerObject::propellPlayer));
    playerobject.def("propellPlayerO", [](PlayerObject* self, float p0) { return PlayerObject::propellPlayerO(self, p0); });
    playerobject.attr("propellPlayerA") = PlayerObject::propellPlayerA;
    playerobject.attr("propellPlayerN") = "propellPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::propellPlayerA, PlayerObject::propellPlayerH, (LPVOID*)&PlayerObject::propellPlayerO_);

    playerobject.def("pushButton", pybind::overload_cast<PlayerObject*, PlayerButton>(&PlayerObject::pushButton));
    playerobject.def("pushButton", pybind::overload_cast<pybind::function>(&PlayerObject::pushButton));
    playerobject.def("pushButtonO", [](PlayerObject* self, PlayerButton p0) { return PlayerObject::pushButtonO(self, p0); });
    playerobject.attr("pushButtonA") = PlayerObject::pushButtonA;
    playerobject.attr("pushButtonN") = "pushButton";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::pushButtonA, PlayerObject::pushButtonH, (LPVOID*)&PlayerObject::pushButtonO_);

    playerobject.def("releaseButton", pybind::overload_cast<PlayerObject*, PlayerButton>(&PlayerObject::releaseButton));
    playerobject.def("releaseButton", pybind::overload_cast<pybind::function>(&PlayerObject::releaseButton));
    playerobject.def("releaseButtonO", [](PlayerObject* self, PlayerButton p0) { return PlayerObject::releaseButtonO(self, p0); });
    playerobject.attr("releaseButtonA") = PlayerObject::releaseButtonA;
    playerobject.attr("releaseButtonN") = "releaseButton";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::releaseButtonA, PlayerObject::releaseButtonH, (LPVOID*)&PlayerObject::releaseButtonO_);

    playerobject.def("removePendingCheckpoint", pybind::overload_cast<PlayerObject*>(&PlayerObject::removePendingCheckpoint));
    playerobject.def("removePendingCheckpoint", pybind::overload_cast<pybind::function>(&PlayerObject::removePendingCheckpoint));
    playerobject.def("removePendingCheckpointO", [](PlayerObject* self) { return PlayerObject::removePendingCheckpointO(self); });
    playerobject.attr("removePendingCheckpointA") = PlayerObject::removePendingCheckpointA;
    playerobject.attr("removePendingCheckpointN") = "removePendingCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::removePendingCheckpointA, PlayerObject::removePendingCheckpointH, (LPVOID*)&PlayerObject::removePendingCheckpointO_);

    playerobject.def("resetAllParticles", pybind::overload_cast<PlayerObject*>(&PlayerObject::resetAllParticles));
    playerobject.def("resetAllParticles", pybind::overload_cast<pybind::function>(&PlayerObject::resetAllParticles));
    playerobject.def("resetAllParticlesO", [](PlayerObject* self) { return PlayerObject::resetAllParticlesO(self); });
    playerobject.attr("resetAllParticlesA") = PlayerObject::resetAllParticlesA;
    playerobject.attr("resetAllParticlesN") = "resetAllParticles";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::resetAllParticlesA, PlayerObject::resetAllParticlesH, (LPVOID*)&PlayerObject::resetAllParticlesO_);

    playerobject.def("resetPlayerIcon", pybind::overload_cast<PlayerObject*>(&PlayerObject::resetPlayerIcon));
    playerobject.def("resetPlayerIcon", pybind::overload_cast<pybind::function>(&PlayerObject::resetPlayerIcon));
    playerobject.def("resetPlayerIconO", [](PlayerObject* self) { return PlayerObject::resetPlayerIconO(self); });
    playerobject.attr("resetPlayerIconA") = PlayerObject::resetPlayerIconA;
    playerobject.attr("resetPlayerIconN") = "resetPlayerIcon";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::resetPlayerIconA, PlayerObject::resetPlayerIconH, (LPVOID*)&PlayerObject::resetPlayerIconO_);

    playerobject.def("resetStreak", pybind::overload_cast<PlayerObject*>(&PlayerObject::resetStreak));
    playerobject.def("resetStreak", pybind::overload_cast<pybind::function>(&PlayerObject::resetStreak));
    playerobject.def("resetStreakO", [](PlayerObject* self) { return PlayerObject::resetStreakO(self); });
    playerobject.attr("resetStreakA") = PlayerObject::resetStreakA;
    playerobject.attr("resetStreakN") = "resetStreak";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::resetStreakA, PlayerObject::resetStreakH, (LPVOID*)&PlayerObject::resetStreakO_);

    playerobject.def("ringJump", pybind::overload_cast<PlayerObject*, GameObject*>(&PlayerObject::ringJump));
    playerobject.def("ringJump", pybind::overload_cast<pybind::function>(&PlayerObject::ringJump));
    playerobject.def("ringJumpO", [](PlayerObject* self, GameObject* p0) { return PlayerObject::ringJumpO(self, p0); });
    playerobject.attr("ringJumpA") = PlayerObject::ringJumpA;
    playerobject.attr("ringJumpN") = "ringJump";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::ringJumpA, PlayerObject::ringJumpH, (LPVOID*)&PlayerObject::ringJumpO_);

    playerobject.def("runBallRotation", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::runBallRotation));
    playerobject.def("runBallRotation", pybind::overload_cast<pybind::function>(&PlayerObject::runBallRotation));
    playerobject.def("runBallRotationO", [](PlayerObject* self, float p0) { return PlayerObject::runBallRotationO(self, p0); });
    playerobject.attr("runBallRotationA") = PlayerObject::runBallRotationA;
    playerobject.attr("runBallRotationN") = "runBallRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::runBallRotationA, PlayerObject::runBallRotationH, (LPVOID*)&PlayerObject::runBallRotationO_);

    playerobject.def("runNormalRotation", pybind::overload_cast<PlayerObject*>(&PlayerObject::runNormalRotation));
    playerobject.def("runNormalRotation", pybind::overload_cast<pybind::function>(&PlayerObject::runNormalRotation));
    playerobject.def("runNormalRotationO", [](PlayerObject* self) { return PlayerObject::runNormalRotationO(self); });
    playerobject.attr("runNormalRotationA") = PlayerObject::runNormalRotationA;
    playerobject.attr("runNormalRotationN") = "runNormalRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::runNormalRotationA, PlayerObject::runNormalRotationH, (LPVOID*)&PlayerObject::runNormalRotationO_);

    playerobject.def("runRotateAction", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::runRotateAction));
    playerobject.def("runRotateAction", pybind::overload_cast<pybind::function>(&PlayerObject::runRotateAction));
    playerobject.def("runRotateActionO", [](PlayerObject* self, bool p0) { return PlayerObject::runRotateActionO(self, p0); });
    playerobject.attr("runRotateActionA") = PlayerObject::runRotateActionA;
    playerobject.attr("runRotateActionN") = "runRotateAction";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::runRotateActionA, PlayerObject::runRotateActionH, (LPVOID*)&PlayerObject::runRotateActionO_);

    playerobject.def("saveToCheckpoint", pybind::overload_cast<PlayerObject*, PlayerCheckpoint*>(&PlayerObject::saveToCheckpoint));
    playerobject.def("saveToCheckpoint", pybind::overload_cast<pybind::function>(&PlayerObject::saveToCheckpoint));
    playerobject.def("saveToCheckpointO", [](PlayerObject* self, PlayerCheckpoint* p0) { return PlayerObject::saveToCheckpointO(self, p0); });
    playerobject.attr("saveToCheckpointA") = PlayerObject::saveToCheckpointA;
    playerobject.attr("saveToCheckpointN") = "saveToCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::saveToCheckpointA, PlayerObject::saveToCheckpointH, (LPVOID*)&PlayerObject::saveToCheckpointO_);

    playerobject.def("setSecondColor", pybind::overload_cast<PlayerObject*, cocos2d::_ccColor3B const&>(&PlayerObject::setSecondColor));
    playerobject.def("setSecondColor", pybind::overload_cast<pybind::function>(&PlayerObject::setSecondColor));
    playerobject.def("setSecondColorO", [](PlayerObject* self, cocos2d::_ccColor3B const& p0) { return PlayerObject::setSecondColorO(self, p0); });
    playerobject.attr("setSecondColorA") = PlayerObject::setSecondColorA;
    playerobject.attr("setSecondColorN") = "setSecondColor";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setSecondColorA, PlayerObject::setSecondColorH, (LPVOID*)&PlayerObject::setSecondColorO_);

    playerobject.def("setupStreak", pybind::overload_cast<PlayerObject*>(&PlayerObject::setupStreak));
    playerobject.def("setupStreak", pybind::overload_cast<pybind::function>(&PlayerObject::setupStreak));
    playerobject.def("setupStreakO", [](PlayerObject* self) { return PlayerObject::setupStreakO(self); });
    playerobject.attr("setupStreakA") = PlayerObject::setupStreakA;
    playerobject.attr("setupStreakN") = "setupStreak";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::setupStreakA, PlayerObject::setupStreakH, (LPVOID*)&PlayerObject::setupStreakO_);

    playerobject.def("spawnFromPlayer", pybind::overload_cast<PlayerObject*, PlayerObject*>(&PlayerObject::spawnFromPlayer));
    playerobject.def("spawnFromPlayer", pybind::overload_cast<pybind::function>(&PlayerObject::spawnFromPlayer));
    playerobject.def("spawnFromPlayerO", [](PlayerObject* self, PlayerObject* p0) { return PlayerObject::spawnFromPlayerO(self, p0); });
    playerobject.attr("spawnFromPlayerA") = PlayerObject::spawnFromPlayerA;
    playerobject.attr("spawnFromPlayerN") = "spawnFromPlayer";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::spawnFromPlayerA, PlayerObject::spawnFromPlayerH, (LPVOID*)&PlayerObject::spawnFromPlayerO_);

    playerobject.def("spawnPortalCircle", pybind::overload_cast<PlayerObject*, cocos2d::_ccColor3B, float>(&PlayerObject::spawnPortalCircle));
    playerobject.def("spawnPortalCircle", pybind::overload_cast<pybind::function>(&PlayerObject::spawnPortalCircle));
    playerobject.def("spawnPortalCircleO", [](PlayerObject* self, cocos2d::_ccColor3B p0, float p1) { return PlayerObject::spawnPortalCircleO(self, p0, p1); });
    playerobject.attr("spawnPortalCircleA") = PlayerObject::spawnPortalCircleA;
    playerobject.attr("spawnPortalCircleN") = "spawnPortalCircle";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::spawnPortalCircleA, PlayerObject::spawnPortalCircleH, (LPVOID*)&PlayerObject::spawnPortalCircleO_);

    playerobject.def("spawnScaleCircle", pybind::overload_cast<PlayerObject*>(&PlayerObject::spawnScaleCircle));
    playerobject.def("spawnScaleCircle", pybind::overload_cast<pybind::function>(&PlayerObject::spawnScaleCircle));
    playerobject.def("spawnScaleCircleO", [](PlayerObject* self) { return PlayerObject::spawnScaleCircleO(self); });
    playerobject.attr("spawnScaleCircleA") = PlayerObject::spawnScaleCircleA;
    playerobject.attr("spawnScaleCircleN") = "spawnScaleCircle";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::spawnScaleCircleA, PlayerObject::spawnScaleCircleH, (LPVOID*)&PlayerObject::spawnScaleCircleO_);

    playerobject.def("spiderTestJump", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::spiderTestJump));
    playerobject.def("spiderTestJump", pybind::overload_cast<pybind::function>(&PlayerObject::spiderTestJump));
    playerobject.def("spiderTestJumpO", [](PlayerObject* self, bool p0) { return PlayerObject::spiderTestJumpO(self, p0); });
    playerobject.attr("spiderTestJumpA") = PlayerObject::spiderTestJumpA;
    playerobject.attr("spiderTestJumpN") = "spiderTestJump";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::spiderTestJumpA, PlayerObject::spiderTestJumpH, (LPVOID*)&PlayerObject::spiderTestJumpO_);

    playerobject.def("stopBurstEffect", pybind::overload_cast<PlayerObject*>(&PlayerObject::stopBurstEffect));
    playerobject.def("stopBurstEffect", pybind::overload_cast<pybind::function>(&PlayerObject::stopBurstEffect));
    playerobject.def("stopBurstEffectO", [](PlayerObject* self) { return PlayerObject::stopBurstEffectO(self); });
    playerobject.attr("stopBurstEffectA") = PlayerObject::stopBurstEffectA;
    playerobject.attr("stopBurstEffectN") = "stopBurstEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::stopBurstEffectA, PlayerObject::stopBurstEffectH, (LPVOID*)&PlayerObject::stopBurstEffectO_);

    playerobject.def("stopDashing", pybind::overload_cast<PlayerObject*>(&PlayerObject::stopDashing));
    playerobject.def("stopDashing", pybind::overload_cast<pybind::function>(&PlayerObject::stopDashing));
    playerobject.def("stopDashingO", [](PlayerObject* self) { return PlayerObject::stopDashingO(self); });
    playerobject.attr("stopDashingA") = PlayerObject::stopDashingA;
    playerobject.attr("stopDashingN") = "stopDashing";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::stopDashingA, PlayerObject::stopDashingH, (LPVOID*)&PlayerObject::stopDashingO_);

    playerobject.def("stopRotation", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::stopRotation));
    playerobject.def("stopRotation", pybind::overload_cast<pybind::function>(&PlayerObject::stopRotation));
    playerobject.def("stopRotationO", [](PlayerObject* self, bool p0) { return PlayerObject::stopRotationO(self, p0); });
    playerobject.attr("stopRotationA") = PlayerObject::stopRotationA;
    playerobject.attr("stopRotationN") = "stopRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::stopRotationA, PlayerObject::stopRotationH, (LPVOID*)&PlayerObject::stopRotationO_);

    playerobject.def("switchedToMode", pybind::overload_cast<PlayerObject*, GameObjectType>(&PlayerObject::switchedToMode));
    playerobject.def("switchedToMode", pybind::overload_cast<pybind::function>(&PlayerObject::switchedToMode));
    playerobject.def("switchedToModeO", [](PlayerObject* self, GameObjectType p0) { return PlayerObject::switchedToModeO(self, p0); });
    playerobject.attr("switchedToModeA") = PlayerObject::switchedToModeA;
    playerobject.attr("switchedToModeN") = "switchedToMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::switchedToModeA, PlayerObject::switchedToModeH, (LPVOID*)&PlayerObject::switchedToModeO_);

    playerobject.def("toggleBirdMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleBirdMode));
    playerobject.def("toggleBirdMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleBirdMode));
    playerobject.def("toggleBirdModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleBirdModeO(self, p0); });
    playerobject.attr("toggleBirdModeA") = PlayerObject::toggleBirdModeA;
    playerobject.attr("toggleBirdModeN") = "toggleBirdMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleBirdModeA, PlayerObject::toggleBirdModeH, (LPVOID*)&PlayerObject::toggleBirdModeO_);

    playerobject.def("toggleDartMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleDartMode));
    playerobject.def("toggleDartMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleDartMode));
    playerobject.def("toggleDartModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleDartModeO(self, p0); });
    playerobject.attr("toggleDartModeA") = PlayerObject::toggleDartModeA;
    playerobject.attr("toggleDartModeN") = "toggleDartMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleDartModeA, PlayerObject::toggleDartModeH, (LPVOID*)&PlayerObject::toggleDartModeO_);

    playerobject.def("toggleFlyMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleFlyMode));
    playerobject.def("toggleFlyMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleFlyMode));
    playerobject.def("toggleFlyModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleFlyModeO(self, p0); });
    playerobject.attr("toggleFlyModeA") = PlayerObject::toggleFlyModeA;
    playerobject.attr("toggleFlyModeN") = "toggleFlyMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleFlyModeA, PlayerObject::toggleFlyModeH, (LPVOID*)&PlayerObject::toggleFlyModeO_);

    playerobject.def("toggleGhostEffect", pybind::overload_cast<PlayerObject*, GhostType>(&PlayerObject::toggleGhostEffect));
    playerobject.def("toggleGhostEffect", pybind::overload_cast<pybind::function>(&PlayerObject::toggleGhostEffect));
    playerobject.def("toggleGhostEffectO", [](PlayerObject* self, GhostType p0) { return PlayerObject::toggleGhostEffectO(self, p0); });
    playerobject.attr("toggleGhostEffectA") = PlayerObject::toggleGhostEffectA;
    playerobject.attr("toggleGhostEffectN") = "toggleGhostEffect";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleGhostEffectA, PlayerObject::toggleGhostEffectH, (LPVOID*)&PlayerObject::toggleGhostEffectO_);

    playerobject.def("togglePlayerScale", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::togglePlayerScale));
    playerobject.def("togglePlayerScale", pybind::overload_cast<pybind::function>(&PlayerObject::togglePlayerScale));
    playerobject.def("togglePlayerScaleO", [](PlayerObject* self, bool p0) { return PlayerObject::togglePlayerScaleO(self, p0); });
    playerobject.attr("togglePlayerScaleA") = PlayerObject::togglePlayerScaleA;
    playerobject.attr("togglePlayerScaleN") = "togglePlayerScale";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::togglePlayerScaleA, PlayerObject::togglePlayerScaleH, (LPVOID*)&PlayerObject::togglePlayerScaleO_);

    playerobject.def("toggleRobotMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleRobotMode));
    playerobject.def("toggleRobotMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleRobotMode));
    playerobject.def("toggleRobotModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleRobotModeO(self, p0); });
    playerobject.attr("toggleRobotModeA") = PlayerObject::toggleRobotModeA;
    playerobject.attr("toggleRobotModeN") = "toggleRobotMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleRobotModeA, PlayerObject::toggleRobotModeH, (LPVOID*)&PlayerObject::toggleRobotModeO_);

    playerobject.def("toggleRollMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleRollMode));
    playerobject.def("toggleRollMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleRollMode));
    playerobject.def("toggleRollModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleRollModeO(self, p0); });
    playerobject.attr("toggleRollModeA") = PlayerObject::toggleRollModeA;
    playerobject.attr("toggleRollModeN") = "toggleRollMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleRollModeA, PlayerObject::toggleRollModeH, (LPVOID*)&PlayerObject::toggleRollModeO_);

    playerobject.def("toggleSpiderMode", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleSpiderMode));
    playerobject.def("toggleSpiderMode", pybind::overload_cast<pybind::function>(&PlayerObject::toggleSpiderMode));
    playerobject.def("toggleSpiderModeO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleSpiderModeO(self, p0); });
    playerobject.attr("toggleSpiderModeA") = PlayerObject::toggleSpiderModeA;
    playerobject.attr("toggleSpiderModeN") = "toggleSpiderMode";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleSpiderModeA, PlayerObject::toggleSpiderModeH, (LPVOID*)&PlayerObject::toggleSpiderModeO_);

    playerobject.def("toggleVisibility", pybind::overload_cast<PlayerObject*, bool>(&PlayerObject::toggleVisibility));
    playerobject.def("toggleVisibility", pybind::overload_cast<pybind::function>(&PlayerObject::toggleVisibility));
    playerobject.def("toggleVisibilityO", [](PlayerObject* self, bool p0) { return PlayerObject::toggleVisibilityO(self, p0); });
    playerobject.attr("toggleVisibilityA") = PlayerObject::toggleVisibilityA;
    playerobject.attr("toggleVisibilityN") = "toggleVisibility";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::toggleVisibilityA, PlayerObject::toggleVisibilityH, (LPVOID*)&PlayerObject::toggleVisibilityO_);

    playerobject.def("tryPlaceCheckpoint", pybind::overload_cast<PlayerObject*>(&PlayerObject::tryPlaceCheckpoint));
    playerobject.def("tryPlaceCheckpoint", pybind::overload_cast<pybind::function>(&PlayerObject::tryPlaceCheckpoint));
    playerobject.def("tryPlaceCheckpointO", [](PlayerObject* self) { return PlayerObject::tryPlaceCheckpointO(self); });
    playerobject.attr("tryPlaceCheckpointA") = PlayerObject::tryPlaceCheckpointA;
    playerobject.attr("tryPlaceCheckpointN") = "tryPlaceCheckpoint";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::tryPlaceCheckpointA, PlayerObject::tryPlaceCheckpointH, (LPVOID*)&PlayerObject::tryPlaceCheckpointO_);

    playerobject.def("updateCheckpointTest", pybind::overload_cast<PlayerObject*>(&PlayerObject::updateCheckpointTest));
    playerobject.def("updateCheckpointTest", pybind::overload_cast<pybind::function>(&PlayerObject::updateCheckpointTest));
    playerobject.def("updateCheckpointTestO", [](PlayerObject* self) { return PlayerObject::updateCheckpointTestO(self); });
    playerobject.attr("updateCheckpointTestA") = PlayerObject::updateCheckpointTestA;
    playerobject.attr("updateCheckpointTestN") = "updateCheckpointTest";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateCheckpointTestA, PlayerObject::updateCheckpointTestH, (LPVOID*)&PlayerObject::updateCheckpointTestO_);

    playerobject.def("updateDashAnimation", pybind::overload_cast<PlayerObject*>(&PlayerObject::updateDashAnimation));
    playerobject.def("updateDashAnimation", pybind::overload_cast<pybind::function>(&PlayerObject::updateDashAnimation));
    playerobject.def("updateDashAnimationO", [](PlayerObject* self) { return PlayerObject::updateDashAnimationO(self); });
    playerobject.attr("updateDashAnimationA") = PlayerObject::updateDashAnimationA;
    playerobject.attr("updateDashAnimationN") = "updateDashAnimation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateDashAnimationA, PlayerObject::updateDashAnimationH, (LPVOID*)&PlayerObject::updateDashAnimationO_);

    playerobject.def("updateDashArt", pybind::overload_cast<PlayerObject*>(&PlayerObject::updateDashArt));
    playerobject.def("updateDashArt", pybind::overload_cast<pybind::function>(&PlayerObject::updateDashArt));
    playerobject.def("updateDashArtO", [](PlayerObject* self) { return PlayerObject::updateDashArtO(self); });
    playerobject.attr("updateDashArtA") = PlayerObject::updateDashArtA;
    playerobject.attr("updateDashArtN") = "updateDashArt";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateDashArtA, PlayerObject::updateDashArtH, (LPVOID*)&PlayerObject::updateDashArtO_);

    playerobject.def("updateJump", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::updateJump));
    playerobject.def("updateJump", pybind::overload_cast<pybind::function>(&PlayerObject::updateJump));
    playerobject.def("updateJumpO", [](PlayerObject* self, float p0) { return PlayerObject::updateJumpO(self, p0); });
    playerobject.attr("updateJumpA") = PlayerObject::updateJumpA;
    playerobject.attr("updateJumpN") = "updateJump";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateJumpA, PlayerObject::updateJumpH, (LPVOID*)&PlayerObject::updateJumpO_);

    playerobject.def("updatePlayerBirdFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerBirdFrame));
    playerobject.def("updatePlayerBirdFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerBirdFrame));
    playerobject.def("updatePlayerBirdFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerBirdFrameO(self, p0); });
    playerobject.attr("updatePlayerBirdFrameA") = PlayerObject::updatePlayerBirdFrameA;
    playerobject.attr("updatePlayerBirdFrameN") = "updatePlayerBirdFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerBirdFrameA, PlayerObject::updatePlayerBirdFrameH, (LPVOID*)&PlayerObject::updatePlayerBirdFrameO_);

    playerobject.def("updatePlayerDartFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerDartFrame));
    playerobject.def("updatePlayerDartFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerDartFrame));
    playerobject.def("updatePlayerDartFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerDartFrameO(self, p0); });
    playerobject.attr("updatePlayerDartFrameA") = PlayerObject::updatePlayerDartFrameA;
    playerobject.attr("updatePlayerDartFrameN") = "updatePlayerDartFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerDartFrameA, PlayerObject::updatePlayerDartFrameH, (LPVOID*)&PlayerObject::updatePlayerDartFrameO_);

    playerobject.def("updatePlayerFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerFrame));
    playerobject.def("updatePlayerFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerFrame));
    playerobject.def("updatePlayerFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerFrameO(self, p0); });
    playerobject.attr("updatePlayerFrameA") = PlayerObject::updatePlayerFrameA;
    playerobject.attr("updatePlayerFrameN") = "updatePlayerFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerFrameA, PlayerObject::updatePlayerFrameH, (LPVOID*)&PlayerObject::updatePlayerFrameO_);

    playerobject.def("updatePlayerGlow", pybind::overload_cast<PlayerObject*>(&PlayerObject::updatePlayerGlow));
    playerobject.def("updatePlayerGlow", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerGlow));
    playerobject.def("updatePlayerGlowO", [](PlayerObject* self) { return PlayerObject::updatePlayerGlowO(self); });
    playerobject.attr("updatePlayerGlowA") = PlayerObject::updatePlayerGlowA;
    playerobject.attr("updatePlayerGlowN") = "updatePlayerGlow";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerGlowA, PlayerObject::updatePlayerGlowH, (LPVOID*)&PlayerObject::updatePlayerGlowO_);

    playerobject.def("updatePlayerRobotFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerRobotFrame));
    playerobject.def("updatePlayerRobotFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerRobotFrame));
    playerobject.def("updatePlayerRobotFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerRobotFrameO(self, p0); });
    playerobject.attr("updatePlayerRobotFrameA") = PlayerObject::updatePlayerRobotFrameA;
    playerobject.attr("updatePlayerRobotFrameN") = "updatePlayerRobotFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerRobotFrameA, PlayerObject::updatePlayerRobotFrameH, (LPVOID*)&PlayerObject::updatePlayerRobotFrameO_);

    playerobject.def("updatePlayerRollFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerRollFrame));
    playerobject.def("updatePlayerRollFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerRollFrame));
    playerobject.def("updatePlayerRollFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerRollFrameO(self, p0); });
    playerobject.attr("updatePlayerRollFrameA") = PlayerObject::updatePlayerRollFrameA;
    playerobject.attr("updatePlayerRollFrameN") = "updatePlayerRollFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerRollFrameA, PlayerObject::updatePlayerRollFrameH, (LPVOID*)&PlayerObject::updatePlayerRollFrameO_);

    playerobject.def("updatePlayerScale", pybind::overload_cast<PlayerObject*>(&PlayerObject::updatePlayerScale));
    playerobject.def("updatePlayerScale", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerScale));
    playerobject.def("updatePlayerScaleO", [](PlayerObject* self) { return PlayerObject::updatePlayerScaleO(self); });
    playerobject.attr("updatePlayerScaleA") = PlayerObject::updatePlayerScaleA;
    playerobject.attr("updatePlayerScaleN") = "updatePlayerScale";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerScaleA, PlayerObject::updatePlayerScaleH, (LPVOID*)&PlayerObject::updatePlayerScaleO_);

    playerobject.def("updatePlayerShipFrame", pybind::overload_cast<PlayerObject*, int>(&PlayerObject::updatePlayerShipFrame));
    playerobject.def("updatePlayerShipFrame", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerShipFrame));
    playerobject.def("updatePlayerShipFrameO", [](PlayerObject* self, int p0) { return PlayerObject::updatePlayerShipFrameO(self, p0); });
    playerobject.attr("updatePlayerShipFrameA") = PlayerObject::updatePlayerShipFrameA;
    playerobject.attr("updatePlayerShipFrameN") = "updatePlayerShipFrame";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerShipFrameA, PlayerObject::updatePlayerShipFrameH, (LPVOID*)&PlayerObject::updatePlayerShipFrameO_);

    playerobject.def("updatePlayerSpriteExtra", pybind::overload_cast<PlayerObject*, gd::string>(&PlayerObject::updatePlayerSpriteExtra));
    playerobject.def("updatePlayerSpriteExtra", pybind::overload_cast<pybind::function>(&PlayerObject::updatePlayerSpriteExtra));
    playerobject.def("updatePlayerSpriteExtraO", [](PlayerObject* self, gd::string p0) { return PlayerObject::updatePlayerSpriteExtraO(self, p0); });
    playerobject.attr("updatePlayerSpriteExtraA") = PlayerObject::updatePlayerSpriteExtraA;
    playerobject.attr("updatePlayerSpriteExtraN") = "updatePlayerSpriteExtra";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updatePlayerSpriteExtraA, PlayerObject::updatePlayerSpriteExtraH, (LPVOID*)&PlayerObject::updatePlayerSpriteExtraO_);

    playerobject.def("updateRobotAnimationSpeed", pybind::overload_cast<PlayerObject*>(&PlayerObject::updateRobotAnimationSpeed));
    playerobject.def("updateRobotAnimationSpeed", pybind::overload_cast<pybind::function>(&PlayerObject::updateRobotAnimationSpeed));
    playerobject.def("updateRobotAnimationSpeedO", [](PlayerObject* self) { return PlayerObject::updateRobotAnimationSpeedO(self); });
    playerobject.attr("updateRobotAnimationSpeedA") = PlayerObject::updateRobotAnimationSpeedA;
    playerobject.attr("updateRobotAnimationSpeedN") = "updateRobotAnimationSpeed";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateRobotAnimationSpeedA, PlayerObject::updateRobotAnimationSpeedH, (LPVOID*)&PlayerObject::updateRobotAnimationSpeedO_);

    playerobject.def("updateRotation", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::updateRotation));
    playerobject.def("updateRotation", pybind::overload_cast<pybind::function>(&PlayerObject::updateRotation));
    playerobject.def("updateRotationO", [](PlayerObject* self, float p0) { return PlayerObject::updateRotationO(self, p0); });
    playerobject.attr("updateRotationA") = PlayerObject::updateRotationA;
    playerobject.attr("updateRotationN") = "updateRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateRotationA, PlayerObject::updateRotationH, (LPVOID*)&PlayerObject::updateRotationO_);

    playerobject.def("updateRotation", pybind::overload_cast<PlayerObject*, float, float>(&PlayerObject::updateRotation));
    playerobject.def("updateShipRotation", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::updateShipRotation));
    playerobject.def("updateShipRotation", pybind::overload_cast<pybind::function>(&PlayerObject::updateShipRotation));
    playerobject.def("updateShipRotationO", [](PlayerObject* self, float p0) { return PlayerObject::updateShipRotationO(self, p0); });
    playerobject.attr("updateShipRotationA") = PlayerObject::updateShipRotationA;
    playerobject.attr("updateShipRotationN") = "updateShipRotation";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateShipRotationA, PlayerObject::updateShipRotationH, (LPVOID*)&PlayerObject::updateShipRotationO_);

    playerobject.def("updateShipSpriteExtra", pybind::overload_cast<PlayerObject*, gd::string>(&PlayerObject::updateShipSpriteExtra));
    playerobject.def("updateShipSpriteExtra", pybind::overload_cast<pybind::function>(&PlayerObject::updateShipSpriteExtra));
    playerobject.def("updateShipSpriteExtraO", [](PlayerObject* self, gd::string p0) { return PlayerObject::updateShipSpriteExtraO(self, p0); });
    playerobject.attr("updateShipSpriteExtraA") = PlayerObject::updateShipSpriteExtraA;
    playerobject.attr("updateShipSpriteExtraN") = "updateShipSpriteExtra";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateShipSpriteExtraA, PlayerObject::updateShipSpriteExtraH, (LPVOID*)&PlayerObject::updateShipSpriteExtraO_);

    playerobject.def("updateSpecial", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::updateSpecial));
    playerobject.def("updateSpecial", pybind::overload_cast<pybind::function>(&PlayerObject::updateSpecial));
    playerobject.def("updateSpecialO", [](PlayerObject* self, float p0) { return PlayerObject::updateSpecialO(self, p0); });
    playerobject.attr("updateSpecialA") = PlayerObject::updateSpecialA;
    playerobject.attr("updateSpecialN") = "updateSpecial";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateSpecialA, PlayerObject::updateSpecialH, (LPVOID*)&PlayerObject::updateSpecialO_);

    playerobject.def("updateTimeMod", pybind::overload_cast<PlayerObject*, float>(&PlayerObject::updateTimeMod));
    playerobject.def("updateTimeMod", pybind::overload_cast<pybind::function>(&PlayerObject::updateTimeMod));
    playerobject.def("updateTimeModO", [](PlayerObject* self, float p0) { return PlayerObject::updateTimeModO(self, p0); });
    playerobject.attr("updateTimeModA") = PlayerObject::updateTimeModA;
    playerobject.attr("updateTimeModN") = "updateTimeMod";
    cinnamon::hooks::hookCinnamon((PVOID)PlayerObject::updateTimeModA, PlayerObject::updateTimeModH, (LPVOID*)&PlayerObject::updateTimeModO_);

    auto pointnode = pybind::class_<PointNode, cocos2d::CCObject>(m, "PointNode");
    pointnode.def("create", pybind::overload_cast<cocos2d::CCPoint>(&PointNode::create));
    pointnode.def("create", pybind::overload_cast<pybind::function>(&PointNode::create));
    pointnode.def("createO", [](cocos2d::CCPoint point) { return PointNode::createO(point); });
    pointnode.attr("createA") = PointNode::createA;
    pointnode.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)PointNode::createA, PointNode::createH, (LPVOID*)&PointNode::createO_);

    auto userinfodelegate = pybind::class_<UserInfoDelegate>(m, "UserInfoDelegate");
    auto profilepage = pybind::class_<ProfilePage, FLAlertLayer>(m, "ProfilePage");
    profilepage.def("create", pybind::overload_cast<int, bool>(&ProfilePage::create));
    profilepage.def("create", pybind::overload_cast<pybind::function>(&ProfilePage::create));
    profilepage.def("createO", [](int accountID, bool idk) { return ProfilePage::createO(accountID, idk); });
    profilepage.attr("createA") = ProfilePage::createA;
    profilepage.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::createA, ProfilePage::createH, (LPVOID*)&ProfilePage::createO_);

    profilepage.def("getUserInfoFailed", pybind::overload_cast<ProfilePage*, int>(&ProfilePage::getUserInfoFailed));
    profilepage.def("getUserInfoFailed", pybind::overload_cast<pybind::function>(&ProfilePage::getUserInfoFailed));
    profilepage.def("getUserInfoFailedO", [](ProfilePage* self, int p0) { return ProfilePage::getUserInfoFailedO(self, p0); });
    profilepage.attr("getUserInfoFailedA") = ProfilePage::getUserInfoFailedA;
    profilepage.attr("getUserInfoFailedN") = "getUserInfoFailed";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::getUserInfoFailedA, ProfilePage::getUserInfoFailedH, (LPVOID*)&ProfilePage::getUserInfoFailedO_);

    profilepage.def("userInfoChanged", pybind::overload_cast<ProfilePage*, GJUserScore*>(&ProfilePage::userInfoChanged));
    profilepage.def("userInfoChanged", pybind::overload_cast<pybind::function>(&ProfilePage::userInfoChanged));
    profilepage.def("userInfoChangedO", [](ProfilePage* self, GJUserScore* p0) { return ProfilePage::userInfoChangedO(self, p0); });
    profilepage.attr("userInfoChangedA") = ProfilePage::userInfoChangedA;
    profilepage.attr("userInfoChangedN") = "userInfoChanged";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::userInfoChangedA, ProfilePage::userInfoChangedH, (LPVOID*)&ProfilePage::userInfoChangedO_);

    profilepage.def("init", pybind::overload_cast<ProfilePage*, int, bool>(&ProfilePage::init));
    profilepage.def("init", pybind::overload_cast<pybind::function>(&ProfilePage::init));
    profilepage.def("initO", [](ProfilePage* self, int accountID, bool idk) { return ProfilePage::initO(self, accountID, idk); });
    profilepage.attr("initA") = ProfilePage::initA;
    profilepage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::initA, ProfilePage::initH, (LPVOID*)&ProfilePage::initO_);

    profilepage.def("onMyLevels", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onMyLevels));
    profilepage.def("onMyLevels", pybind::overload_cast<pybind::function>(&ProfilePage::onMyLevels));
    profilepage.def("onMyLevelsO", [](ProfilePage* self, cocos2d::CCObject* p0) { return ProfilePage::onMyLevelsO(self, p0); });
    profilepage.attr("onMyLevelsA") = ProfilePage::onMyLevelsA;
    profilepage.attr("onMyLevelsN") = "onMyLevels";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onMyLevelsA, ProfilePage::onMyLevelsH, (LPVOID*)&ProfilePage::onMyLevelsO_);

    profilepage.def("onUpdate", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onUpdate));
    profilepage.def("onUpdate", pybind::overload_cast<pybind::function>(&ProfilePage::onUpdate));
    profilepage.def("onUpdateO", [](ProfilePage* self, cocos2d::CCObject* p0) { return ProfilePage::onUpdateO(self, p0); });
    profilepage.attr("onUpdateA") = ProfilePage::onUpdateA;
    profilepage.attr("onUpdateN") = "onUpdate";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onUpdateA, ProfilePage::onUpdateH, (LPVOID*)&ProfilePage::onUpdateO_);

    profilepage.def("onClose", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onClose));
    profilepage.def("onClose", pybind::overload_cast<pybind::function>(&ProfilePage::onClose));
    profilepage.def("onCloseO", [](ProfilePage* self, cocos2d::CCObject* p0) { return ProfilePage::onCloseO(self, p0); });
    profilepage.attr("onCloseA") = ProfilePage::onCloseA;
    profilepage.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onCloseA, ProfilePage::onCloseH, (LPVOID*)&ProfilePage::onCloseO_);

    profilepage.def("keyBackClicked", pybind::overload_cast<ProfilePage*>(&ProfilePage::keyBackClicked));
    profilepage.def("keyBackClicked", pybind::overload_cast<pybind::function>(&ProfilePage::keyBackClicked));
    profilepage.def("keyBackClickedO", [](ProfilePage* self) { return ProfilePage::keyBackClickedO(self); });
    profilepage.attr("keyBackClickedA") = ProfilePage::keyBackClickedA;
    profilepage.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::keyBackClickedA, ProfilePage::keyBackClickedH, (LPVOID*)&ProfilePage::keyBackClickedO_);

    profilepage.def("loadPageFromUserInfo", pybind::overload_cast<ProfilePage*, GJUserScore*>(&ProfilePage::loadPageFromUserInfo));
    profilepage.def("loadPageFromUserInfo", pybind::overload_cast<pybind::function>(&ProfilePage::loadPageFromUserInfo));
    profilepage.def("loadPageFromUserInfoO", [](ProfilePage* self, GJUserScore* score) { return ProfilePage::loadPageFromUserInfoO(self, score); });
    profilepage.attr("loadPageFromUserInfoA") = ProfilePage::loadPageFromUserInfoA;
    profilepage.attr("loadPageFromUserInfoN") = "loadPageFromUserInfo";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::loadPageFromUserInfoA, ProfilePage::loadPageFromUserInfoH, (LPVOID*)&ProfilePage::loadPageFromUserInfoO_);

    auto pulseeffectaction = pybind::class_<PulseEffectAction, cocos2d::CCNode>(m, "PulseEffectAction");
    pulseeffectaction.def("createFromString", pybind::overload_cast<gd::string>(&PulseEffectAction::createFromString));
    pulseeffectaction.def("createFromString", pybind::overload_cast<pybind::function>(&PulseEffectAction::createFromString));
    pulseeffectaction.def("createFromStringO", [](gd::string p0) { return PulseEffectAction::createFromStringO(p0); });
    pulseeffectaction.attr("createFromStringA") = PulseEffectAction::createFromStringA;
    pulseeffectaction.attr("createFromStringN") = "createFromString";
    cinnamon::hooks::hookCinnamon((PVOID)PulseEffectAction::createFromStringA, PulseEffectAction::createFromStringH, (LPVOID*)&PulseEffectAction::createFromStringO_);

    pulseeffectaction.def("getSaveString", pybind::overload_cast<PulseEffectAction*>(&PulseEffectAction::getSaveString));
    pulseeffectaction.def("getSaveString", pybind::overload_cast<pybind::function>(&PulseEffectAction::getSaveString));
    pulseeffectaction.def("getSaveStringO", [](PulseEffectAction* self) { return PulseEffectAction::getSaveStringO(self); });
    pulseeffectaction.attr("getSaveStringA") = PulseEffectAction::getSaveStringA;
    pulseeffectaction.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)PulseEffectAction::getSaveStringA, PulseEffectAction::getSaveStringH, (LPVOID*)&PulseEffectAction::getSaveStringO_);

    auto ratestarslayer = pybind::class_<RateStarsLayer, FLAlertLayer>(m, "RateStarsLayer");
    auto retrylevellayer = pybind::class_<RetryLevelLayer>(m, "RetryLevelLayer");
    retrylevellayer.def("create", pybind::overload_cast<>(&RetryLevelLayer::create));
    retrylevellayer.def("create", pybind::overload_cast<pybind::function>(&RetryLevelLayer::create));
    retrylevellayer.def("createO", []() { return RetryLevelLayer::createO(); });
    retrylevellayer.attr("createA") = RetryLevelLayer::createA;
    retrylevellayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)RetryLevelLayer::createA, RetryLevelLayer::createH, (LPVOID*)&RetryLevelLayer::createO_);

    auto rewardspage = pybind::class_<RewardsPage, FLAlertLayer>(m, "RewardsPage");
    rewardspage.def("init", pybind::overload_cast<RewardsPage*>(&RewardsPage::init));
    rewardspage.def("init", pybind::overload_cast<pybind::function>(&RewardsPage::init));
    rewardspage.def("initO", [](RewardsPage* self) { return RewardsPage::initO(self); });
    rewardspage.attr("initA") = RewardsPage::initA;
    rewardspage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)RewardsPage::initA, RewardsPage::initH, (LPVOID*)&RewardsPage::initO_);

    auto ringobject = pybind::class_<RingObject, EffectGameObject>(m, "RingObject");
    ringobject.def("create", pybind::overload_cast<RingObject*, char const*>(&RingObject::create));
    ringobject.def("create", pybind::overload_cast<pybind::function>(&RingObject::create));
    ringobject.def("createO", [](RingObject* self, char const* p0) { return RingObject::createO(self, p0); });
    ringobject.attr("createA") = RingObject::createA;
    ringobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::createA, RingObject::createH, (LPVOID*)&RingObject::createO_);

    ringobject.def("init", pybind::overload_cast<RingObject*, char const*>(&RingObject::init));
    ringobject.def("init", pybind::overload_cast<pybind::function>(&RingObject::init));
    ringobject.def("initO", [](RingObject* self, char const* p0) { return RingObject::initO(self, p0); });
    ringobject.attr("initA") = RingObject::initA;
    ringobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::initA, RingObject::initH, (LPVOID*)&RingObject::initO_);

    ringobject.def("spawnCircle", pybind::overload_cast<RingObject*>(&RingObject::spawnCircle));
    ringobject.def("spawnCircle", pybind::overload_cast<pybind::function>(&RingObject::spawnCircle));
    ringobject.def("spawnCircleO", [](RingObject* self) { return RingObject::spawnCircleO(self); });
    ringobject.attr("spawnCircleA") = RingObject::spawnCircleA;
    ringobject.attr("spawnCircleN") = "spawnCircle";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::spawnCircleA, RingObject::spawnCircleH, (LPVOID*)&RingObject::spawnCircleO_);

    ringobject.def("setRotation", pybind::overload_cast<RingObject*, float>(&RingObject::setRotation));
    ringobject.def("setRotation", pybind::overload_cast<pybind::function>(&RingObject::setRotation));
    ringobject.def("setRotationO", [](RingObject* self, float p0) { return RingObject::setRotationO(self, p0); });
    ringobject.attr("setRotationA") = RingObject::setRotationA;
    ringobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setRotationA, RingObject::setRotationH, (LPVOID*)&RingObject::setRotationO_);

    ringobject.def("setScale", pybind::overload_cast<RingObject*, float>(&RingObject::setScale));
    ringobject.def("setScale", pybind::overload_cast<pybind::function>(&RingObject::setScale));
    ringobject.def("setScaleO", [](RingObject* self, float p0) { return RingObject::setScaleO(self, p0); });
    ringobject.attr("setScaleA") = RingObject::setScaleA;
    ringobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setScaleA, RingObject::setScaleH, (LPVOID*)&RingObject::setScaleO_);

    ringobject.def("resetObject", pybind::overload_cast<RingObject*>(&RingObject::resetObject));
    ringobject.def("resetObject", pybind::overload_cast<pybind::function>(&RingObject::resetObject));
    ringobject.def("resetObjectO", [](RingObject* self) { return RingObject::resetObjectO(self); });
    ringobject.attr("resetObjectA") = RingObject::resetObjectA;
    ringobject.attr("resetObjectN") = "resetObject";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::resetObjectA, RingObject::resetObjectH, (LPVOID*)&RingObject::resetObjectO_);

    ringobject.def("customObjectSetup", pybind::overload_cast<RingObject*, gd::map<gd::string, gd::string>&>(&RingObject::customObjectSetup));
    ringobject.def("customObjectSetup", pybind::overload_cast<pybind::function>(&RingObject::customObjectSetup));
    ringobject.def("customObjectSetupO", [](RingObject* self, gd::map<gd::string, gd::string>& p0) { return RingObject::customObjectSetupO(self, p0); });
    ringobject.attr("customObjectSetupA") = RingObject::customObjectSetupA;
    ringobject.attr("customObjectSetupN") = "customObjectSetup";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::customObjectSetupA, RingObject::customObjectSetupH, (LPVOID*)&RingObject::customObjectSetupO_);

    ringobject.def("getSaveString", pybind::overload_cast<RingObject*>(&RingObject::getSaveString));
    ringobject.def("getSaveString", pybind::overload_cast<pybind::function>(&RingObject::getSaveString));
    ringobject.def("getSaveStringO", [](RingObject* self) { return RingObject::getSaveStringO(self); });
    ringobject.attr("getSaveStringA") = RingObject::getSaveStringA;
    ringobject.attr("getSaveStringN") = "getSaveString";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::getSaveStringA, RingObject::getSaveStringH, (LPVOID*)&RingObject::getSaveStringO_);

    ringobject.def("powerOnObject", pybind::overload_cast<RingObject*>(&RingObject::powerOnObject));
    ringobject.def("powerOnObject", pybind::overload_cast<pybind::function>(&RingObject::powerOnObject));
    ringobject.def("powerOnObjectO", [](RingObject* self) { return RingObject::powerOnObjectO(self); });
    ringobject.attr("powerOnObjectA") = RingObject::powerOnObjectA;
    ringobject.attr("powerOnObjectN") = "powerOnObject";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::powerOnObjectA, RingObject::powerOnObjectH, (LPVOID*)&RingObject::powerOnObjectO_);

    ringobject.def("powerOffObject", pybind::overload_cast<RingObject*>(&RingObject::powerOffObject));
    ringobject.def("powerOffObject", pybind::overload_cast<pybind::function>(&RingObject::powerOffObject));
    ringobject.def("powerOffObjectO", [](RingObject* self) { return RingObject::powerOffObjectO(self); });
    ringobject.attr("powerOffObjectA") = RingObject::powerOffObjectA;
    ringobject.attr("powerOffObjectN") = "powerOffObject";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::powerOffObjectA, RingObject::powerOffObjectH, (LPVOID*)&RingObject::powerOffObjectO_);

    ringobject.def("setRScale", pybind::overload_cast<RingObject*, float>(&RingObject::setRScale));
    ringobject.def("setRScale", pybind::overload_cast<pybind::function>(&RingObject::setRScale));
    ringobject.def("setRScaleO", [](RingObject* self, float p0) { return RingObject::setRScaleO(self, p0); });
    ringobject.attr("setRScaleA") = RingObject::setRScaleA;
    ringobject.attr("setRScaleN") = "setRScale";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setRScaleA, RingObject::setRScaleH, (LPVOID*)&RingObject::setRScaleO_);

    ringobject.def("triggerActivated", pybind::overload_cast<RingObject*, float>(&RingObject::triggerActivated));
    ringobject.def("triggerActivated", pybind::overload_cast<pybind::function>(&RingObject::triggerActivated));
    ringobject.def("triggerActivatedO", [](RingObject* self, float p0) { return RingObject::triggerActivatedO(self, p0); });
    ringobject.attr("triggerActivatedA") = RingObject::triggerActivatedA;
    ringobject.attr("triggerActivatedN") = "triggerActivated";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::triggerActivatedA, RingObject::triggerActivatedH, (LPVOID*)&RingObject::triggerActivatedO_);

    auto scrollinglayer = pybind::class_<ScrollingLayer, cocos2d::CCLayerColor>(m, "ScrollingLayer");
    scrollinglayer.def("create", pybind::overload_cast<cocos2d::CCSize, cocos2d::CCPoint, float>(&ScrollingLayer::create));
    scrollinglayer.def("create", pybind::overload_cast<pybind::function>(&ScrollingLayer::create));
    scrollinglayer.def("createO", [](cocos2d::CCSize p0, cocos2d::CCPoint p1, float p2) { return ScrollingLayer::createO(p0, p1, p2); });
    scrollinglayer.attr("createA") = ScrollingLayer::createA;
    scrollinglayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::createA, ScrollingLayer::createH, (LPVOID*)&ScrollingLayer::createO_);

    auto selectartlayer = pybind::class_<SelectArtLayer>(m, "SelectArtLayer");
    selectartlayer.def("create", pybind::overload_cast<SelectArtType>(&SelectArtLayer::create));
    selectartlayer.def("create", pybind::overload_cast<pybind::function>(&SelectArtLayer::create));
    selectartlayer.def("createO", [](SelectArtType type) { return SelectArtLayer::createO(type); });
    selectartlayer.attr("createA") = SelectArtLayer::createA;
    selectartlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SelectArtLayer::createA, SelectArtLayer::createH, (LPVOID*)&SelectArtLayer::createO_);

    auto selectfontlayer = pybind::class_<SelectFontLayer, FLAlertLayer>(m, "SelectFontLayer");
    selectfontlayer.def("create", pybind::overload_cast<LevelEditorLayer*>(&SelectFontLayer::create));
    selectfontlayer.def("create", pybind::overload_cast<pybind::function>(&SelectFontLayer::create));
    selectfontlayer.def("createO", [](LevelEditorLayer* lel) { return SelectFontLayer::createO(lel); });
    selectfontlayer.attr("createA") = SelectFontLayer::createA;
    selectfontlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::createA, SelectFontLayer::createH, (LPVOID*)&SelectFontLayer::createO_);

    selectfontlayer.def("init", pybind::overload_cast<SelectFontLayer*, LevelEditorLayer*>(&SelectFontLayer::init));
    selectfontlayer.def("init", pybind::overload_cast<pybind::function>(&SelectFontLayer::init));
    selectfontlayer.def("initO", [](SelectFontLayer* self, LevelEditorLayer* lel) { return SelectFontLayer::initO(self, lel); });
    selectfontlayer.attr("initA") = SelectFontLayer::initA;
    selectfontlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::initA, SelectFontLayer::initH, (LPVOID*)&SelectFontLayer::initO_);

    selectfontlayer.def("onChangeFont", pybind::overload_cast<SelectFontLayer*, cocos2d::CCObject*>(&SelectFontLayer::onChangeFont));
    selectfontlayer.def("onChangeFont", pybind::overload_cast<pybind::function>(&SelectFontLayer::onChangeFont));
    selectfontlayer.def("onChangeFontO", [](SelectFontLayer* self, cocos2d::CCObject* sender) { return SelectFontLayer::onChangeFontO(self, sender); });
    selectfontlayer.attr("onChangeFontA") = SelectFontLayer::onChangeFontA;
    selectfontlayer.attr("onChangeFontN") = "onChangeFont";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::onChangeFontA, SelectFontLayer::onChangeFontH, (LPVOID*)&SelectFontLayer::onChangeFontO_);

    selectfontlayer.def("updateFontLabel", pybind::overload_cast<SelectFontLayer*>(&SelectFontLayer::updateFontLabel));
    selectfontlayer.def("updateFontLabel", pybind::overload_cast<pybind::function>(&SelectFontLayer::updateFontLabel));
    selectfontlayer.def("updateFontLabelO", [](SelectFontLayer* self) { return SelectFontLayer::updateFontLabelO(self); });
    selectfontlayer.attr("updateFontLabelA") = SelectFontLayer::updateFontLabelA;
    selectfontlayer.attr("updateFontLabelN") = "updateFontLabel";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::updateFontLabelA, SelectFontLayer::updateFontLabelH, (LPVOID*)&SelectFontLayer::updateFontLabelO_);

    selectfontlayer.def("onClose", pybind::overload_cast<SelectFontLayer*, cocos2d::CCObject*>(&SelectFontLayer::onClose));
    selectfontlayer.def("onClose", pybind::overload_cast<pybind::function>(&SelectFontLayer::onClose));
    selectfontlayer.def("onCloseO", [](SelectFontLayer* self, cocos2d::CCObject* sender) { return SelectFontLayer::onCloseO(self, sender); });
    selectfontlayer.attr("onCloseA") = SelectFontLayer::onCloseA;
    selectfontlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::onCloseA, SelectFontLayer::onCloseH, (LPVOID*)&SelectFontLayer::onCloseO_);

    selectfontlayer.def("keyBackClicked", pybind::overload_cast<SelectFontLayer*>(&SelectFontLayer::keyBackClicked));
    selectfontlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&SelectFontLayer::keyBackClicked));
    selectfontlayer.def("keyBackClickedO", [](SelectFontLayer* self) { return SelectFontLayer::keyBackClickedO(self); });
    selectfontlayer.attr("keyBackClickedA") = SelectFontLayer::keyBackClickedA;
    selectfontlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)SelectFontLayer::keyBackClickedA, SelectFontLayer::keyBackClickedH, (LPVOID*)&SelectFontLayer::keyBackClickedO_);

    auto setgroupidlayer = pybind::class_<SetGroupIDLayer, FLAlertLayer>(m, "SetGroupIDLayer");
    setgroupidlayer.def("init", pybind::overload_cast<SetGroupIDLayer*, GameObject*, cocos2d::CCArray*>(&SetGroupIDLayer::init));
    setgroupidlayer.def("init", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::init));
    setgroupidlayer.def("initO", [](SetGroupIDLayer* self, GameObject* object, cocos2d::CCArray* objects) { return SetGroupIDLayer::initO(self, object, objects); });
    setgroupidlayer.attr("initA") = SetGroupIDLayer::initA;
    setgroupidlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::initA, SetGroupIDLayer::initH, (LPVOID*)&SetGroupIDLayer::initO_);

    setgroupidlayer.def("onNextGroupID1", pybind::overload_cast<SetGroupIDLayer*, cocos2d::CCObject*>(&SetGroupIDLayer::onNextGroupID1));
    setgroupidlayer.def("onNextGroupID1", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::onNextGroupID1));
    setgroupidlayer.def("onNextGroupID1O", [](SetGroupIDLayer* self, cocos2d::CCObject* p0) { return SetGroupIDLayer::onNextGroupID1O(self, p0); });
    setgroupidlayer.attr("onNextGroupID1A") = SetGroupIDLayer::onNextGroupID1A;
    setgroupidlayer.attr("onNextGroupID1N") = "onNextGroupID1";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::onNextGroupID1A, SetGroupIDLayer::onNextGroupID1H, (LPVOID*)&SetGroupIDLayer::onNextGroupID1O_);

    setgroupidlayer.def("updateGroupIDLabel", pybind::overload_cast<SetGroupIDLayer*>(&SetGroupIDLayer::updateGroupIDLabel));
    setgroupidlayer.def("updateGroupIDLabel", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::updateGroupIDLabel));
    setgroupidlayer.def("updateGroupIDLabelO", [](SetGroupIDLayer* self) { return SetGroupIDLayer::updateGroupIDLabelO(self); });
    setgroupidlayer.attr("updateGroupIDLabelA") = SetGroupIDLayer::updateGroupIDLabelA;
    setgroupidlayer.attr("updateGroupIDLabelN") = "updateGroupIDLabel";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::updateGroupIDLabelA, SetGroupIDLayer::updateGroupIDLabelH, (LPVOID*)&SetGroupIDLayer::updateGroupIDLabelO_);

    setgroupidlayer.def("updateEditorLayerID", pybind::overload_cast<SetGroupIDLayer*>(&SetGroupIDLayer::updateEditorLayerID));
    setgroupidlayer.def("updateEditorLayerID", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::updateEditorLayerID));
    setgroupidlayer.def("updateEditorLayerIDO", [](SetGroupIDLayer* self) { return SetGroupIDLayer::updateEditorLayerIDO(self); });
    setgroupidlayer.attr("updateEditorLayerIDA") = SetGroupIDLayer::updateEditorLayerIDA;
    setgroupidlayer.attr("updateEditorLayerIDN") = "updateEditorLayerID";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::updateEditorLayerIDA, SetGroupIDLayer::updateEditorLayerIDH, (LPVOID*)&SetGroupIDLayer::updateEditorLayerIDO_);

    setgroupidlayer.def("updateEditorLayerID2", pybind::overload_cast<SetGroupIDLayer*>(&SetGroupIDLayer::updateEditorLayerID2));
    setgroupidlayer.def("updateEditorLayerID2", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::updateEditorLayerID2));
    setgroupidlayer.def("updateEditorLayerID2O", [](SetGroupIDLayer* self) { return SetGroupIDLayer::updateEditorLayerID2O(self); });
    setgroupidlayer.attr("updateEditorLayerID2A") = SetGroupIDLayer::updateEditorLayerID2A;
    setgroupidlayer.attr("updateEditorLayerID2N") = "updateEditorLayerID2";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::updateEditorLayerID2A, SetGroupIDLayer::updateEditorLayerID2H, (LPVOID*)&SetGroupIDLayer::updateEditorLayerID2O_);

    setgroupidlayer.def("updateZOrder", pybind::overload_cast<SetGroupIDLayer*>(&SetGroupIDLayer::updateZOrder));
    setgroupidlayer.def("updateZOrder", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::updateZOrder));
    setgroupidlayer.def("updateZOrderO", [](SetGroupIDLayer* self) { return SetGroupIDLayer::updateZOrderO(self); });
    setgroupidlayer.attr("updateZOrderA") = SetGroupIDLayer::updateZOrderA;
    setgroupidlayer.attr("updateZOrderN") = "updateZOrder";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::updateZOrderA, SetGroupIDLayer::updateZOrderH, (LPVOID*)&SetGroupIDLayer::updateZOrderO_);

    setgroupidlayer.def("onAddGroup", pybind::overload_cast<SetGroupIDLayer*, cocos2d::CCObject*>(&SetGroupIDLayer::onAddGroup));
    setgroupidlayer.def("onAddGroup", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::onAddGroup));
    setgroupidlayer.def("onAddGroupO", [](SetGroupIDLayer* self, cocos2d::CCObject* sender) { return SetGroupIDLayer::onAddGroupO(self, sender); });
    setgroupidlayer.attr("onAddGroupA") = SetGroupIDLayer::onAddGroupA;
    setgroupidlayer.attr("onAddGroupN") = "onAddGroup";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::onAddGroupA, SetGroupIDLayer::onAddGroupH, (LPVOID*)&SetGroupIDLayer::onAddGroupO_);

    setgroupidlayer.def("onClose", pybind::overload_cast<SetGroupIDLayer*, cocos2d::CCObject*>(&SetGroupIDLayer::onClose));
    setgroupidlayer.def("onClose", pybind::overload_cast<pybind::function>(&SetGroupIDLayer::onClose));
    setgroupidlayer.def("onCloseO", [](SetGroupIDLayer* self, cocos2d::CCObject* sender) { return SetGroupIDLayer::onCloseO(self, sender); });
    setgroupidlayer.attr("onCloseA") = SetGroupIDLayer::onCloseA;
    setgroupidlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)SetGroupIDLayer::onCloseA, SetGroupIDLayer::onCloseH, (LPVOID*)&SetGroupIDLayer::onCloseO_);

    auto setidlayer = pybind::class_<SetIDLayer>(m, "SetIDLayer");
    setidlayer.def("create", pybind::overload_cast<GameObject*>(&SetIDLayer::create));
    setidlayer.def("create", pybind::overload_cast<pybind::function>(&SetIDLayer::create));
    setidlayer.def("createO", [](GameObject* p0) { return SetIDLayer::createO(p0); });
    setidlayer.attr("createA") = SetIDLayer::createA;
    setidlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDLayer::createA, SetIDLayer::createH, (LPVOID*)&SetIDLayer::createO_);

    auto setidpopup = pybind::class_<SetIDPopup, FLAlertLayer>(m, "SetIDPopup");
    setidpopup.def("valueChanged", pybind::overload_cast<SetIDPopup*>(&SetIDPopup::valueChanged));
    setidpopup.def("valueChanged", pybind::overload_cast<pybind::function>(&SetIDPopup::valueChanged));
    setidpopup.def("valueChangedO", [](SetIDPopup* self) { return SetIDPopup::valueChangedO(self); });
    setidpopup.attr("valueChangedA") = SetIDPopup::valueChangedA;
    setidpopup.attr("valueChangedN") = "valueChanged";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::valueChangedA, SetIDPopup::valueChangedH, (LPVOID*)&SetIDPopup::valueChangedO_);

    setidpopup.def("init", pybind::overload_cast<SetIDPopup*, int, int, int, gd::string, gd::string, bool, int>(&SetIDPopup::init));
    setidpopup.def("init", pybind::overload_cast<pybind::function>(&SetIDPopup::init));
    setidpopup.def("initO", [](SetIDPopup* self, int p0, int p1, int p2, gd::string p3, gd::string p4, bool p5, int p6) { return SetIDPopup::initO(self, p0, p1, p2, p3, p4, p5, p6); });
    setidpopup.attr("initA") = SetIDPopup::initA;
    setidpopup.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::initA, SetIDPopup::initH, (LPVOID*)&SetIDPopup::initO_);

    setidpopup.def("create", pybind::overload_cast<int, int, int, gd::string, gd::string, bool, int>(&SetIDPopup::create));
    setidpopup.def("create", pybind::overload_cast<pybind::function>(&SetIDPopup::create));
    setidpopup.def("createO", [](int p0, int p1, int p2, gd::string p3, gd::string p4, bool p5, int p6) { return SetIDPopup::createO(p0, p1, p2, p3, p4, p5, p6); });
    setidpopup.attr("createA") = SetIDPopup::createA;
    setidpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::createA, SetIDPopup::createH, (LPVOID*)&SetIDPopup::createO_);

    auto setitemidlayer = pybind::class_<SetItemIDLayer>(m, "SetItemIDLayer");
    auto settargetidlayer = pybind::class_<SetTargetIDLayer>(m, "SetTargetIDLayer");
    auto setupanimationpopup = pybind::class_<SetupAnimationPopup, FLAlertLayer>(m, "SetupAnimationPopup");
    auto setupcollisiontriggerpopup = pybind::class_<SetupCollisionTriggerPopup, FLAlertLayer>(m, "SetupCollisionTriggerPopup");
    setupcollisiontriggerpopup.def("init", pybind::overload_cast<SetupCollisionTriggerPopup*, EffectGameObject*, cocos2d::CCArray*>(&SetupCollisionTriggerPopup::init));
    setupcollisiontriggerpopup.def("init", pybind::overload_cast<pybind::function>(&SetupCollisionTriggerPopup::init));
    setupcollisiontriggerpopup.def("initO", [](SetupCollisionTriggerPopup* self, EffectGameObject* p0, cocos2d::CCArray* p1) { return SetupCollisionTriggerPopup::initO(self, p0, p1); });
    setupcollisiontriggerpopup.attr("initA") = SetupCollisionTriggerPopup::initA;
    setupcollisiontriggerpopup.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SetupCollisionTriggerPopup::initA, SetupCollisionTriggerPopup::initH, (LPVOID*)&SetupCollisionTriggerPopup::initO_);

    setupcollisiontriggerpopup.def("onClose", pybind::overload_cast<SetupCollisionTriggerPopup*, cocos2d::CCObject*>(&SetupCollisionTriggerPopup::onClose));
    setupcollisiontriggerpopup.def("onClose", pybind::overload_cast<pybind::function>(&SetupCollisionTriggerPopup::onClose));
    setupcollisiontriggerpopup.def("onCloseO", [](SetupCollisionTriggerPopup* self, cocos2d::CCObject* p0) { return SetupCollisionTriggerPopup::onCloseO(self, p0); });
    setupcollisiontriggerpopup.attr("onCloseA") = SetupCollisionTriggerPopup::onCloseA;
    setupcollisiontriggerpopup.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)SetupCollisionTriggerPopup::onCloseA, SetupCollisionTriggerPopup::onCloseH, (LPVOID*)&SetupCollisionTriggerPopup::onCloseO_);

    auto setupcounttriggerpopup = pybind::class_<SetupCountTriggerPopup, FLAlertLayer>(m, "SetupCountTriggerPopup");
    auto setupinstantcountpopup = pybind::class_<SetupInstantCountPopup, FLAlertLayer>(m, "SetupInstantCountPopup");
    auto setupinteractobjectpopup = pybind::class_<SetupInteractObjectPopup, FLAlertLayer>(m, "SetupInteractObjectPopup");
    auto setupobjecttogglepopup = pybind::class_<SetupObjectTogglePopup, FLAlertLayer>(m, "SetupObjectTogglePopup");
    auto setupopacitypopup = pybind::class_<SetupOpacityPopup, FLAlertLayer>(m, "SetupOpacityPopup");
    setupopacitypopup.def("create", pybind::overload_cast<EffectGameObject*, cocos2d::CCArray*>(&SetupOpacityPopup::create));
    setupopacitypopup.def("create", pybind::overload_cast<pybind::function>(&SetupOpacityPopup::create));
    setupopacitypopup.def("createO", [](EffectGameObject* p0, cocos2d::CCArray* p1) { return SetupOpacityPopup::createO(p0, p1); });
    setupopacitypopup.attr("createA") = SetupOpacityPopup::createA;
    setupopacitypopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SetupOpacityPopup::createA, SetupOpacityPopup::createH, (LPVOID*)&SetupOpacityPopup::createO_);

    auto setuppickuptriggerpopup = pybind::class_<SetupPickupTriggerPopup, FLAlertLayer>(m, "SetupPickupTriggerPopup");
    setuppickuptriggerpopup.def("create", pybind::overload_cast<EffectGameObject*, cocos2d::CCArray*>(&SetupPickupTriggerPopup::create));
    setuppickuptriggerpopup.def("create", pybind::overload_cast<pybind::function>(&SetupPickupTriggerPopup::create));
    setuppickuptriggerpopup.def("createO", [](EffectGameObject* p0, cocos2d::CCArray* p1) { return SetupPickupTriggerPopup::createO(p0, p1); });
    setuppickuptriggerpopup.attr("createA") = SetupPickupTriggerPopup::createA;
    setuppickuptriggerpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SetupPickupTriggerPopup::createA, SetupPickupTriggerPopup::createH, (LPVOID*)&SetupPickupTriggerPopup::createO_);

    setuppickuptriggerpopup.def("updateItemID", pybind::overload_cast<SetupPickupTriggerPopup*>(&SetupPickupTriggerPopup::updateItemID));
    setuppickuptriggerpopup.def("updateItemID", pybind::overload_cast<pybind::function>(&SetupPickupTriggerPopup::updateItemID));
    setuppickuptriggerpopup.def("updateItemIDO", [](SetupPickupTriggerPopup* self) { return SetupPickupTriggerPopup::updateItemIDO(self); });
    setuppickuptriggerpopup.attr("updateItemIDA") = SetupPickupTriggerPopup::updateItemIDA;
    setuppickuptriggerpopup.attr("updateItemIDN") = "updateItemID";
    cinnamon::hooks::hookCinnamon((PVOID)SetupPickupTriggerPopup::updateItemIDA, SetupPickupTriggerPopup::updateItemIDH, (LPVOID*)&SetupPickupTriggerPopup::updateItemIDO_);

    auto setupshakepopup = pybind::class_<SetupShakePopup, FLAlertLayer>(m, "SetupShakePopup");
    auto setupspawnpopup = pybind::class_<SetupSpawnPopup, FLAlertLayer>(m, "SetupSpawnPopup");
    auto setuptouchtogglepopup = pybind::class_<SetupTouchTogglePopup, FLAlertLayer>(m, "SetupTouchTogglePopup");
    auto simpleplayer = pybind::class_<SimplePlayer, cocos2d::CCSprite>(m, "SimplePlayer");
    simpleplayer.def("init", pybind::overload_cast<SimplePlayer*, int>(&SimplePlayer::init));
    simpleplayer.def("init", pybind::overload_cast<pybind::function>(&SimplePlayer::init));
    simpleplayer.def("initO", [](SimplePlayer* self, int iconID) { return SimplePlayer::initO(self, iconID); });
    simpleplayer.attr("initA") = SimplePlayer::initA;
    simpleplayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::initA, SimplePlayer::initH, (LPVOID*)&SimplePlayer::initO_);

    simpleplayer.def("create", pybind::overload_cast<int>(&SimplePlayer::create));
    simpleplayer.def("create", pybind::overload_cast<pybind::function>(&SimplePlayer::create));
    simpleplayer.def("createO", [](int iconID) { return SimplePlayer::createO(iconID); });
    simpleplayer.attr("createA") = SimplePlayer::createA;
    simpleplayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::createA, SimplePlayer::createH, (LPVOID*)&SimplePlayer::createO_);

    simpleplayer.def("updatePlayerFrame", pybind::overload_cast<SimplePlayer*, int, IconType>(&SimplePlayer::updatePlayerFrame));
    simpleplayer.def("updatePlayerFrame", pybind::overload_cast<pybind::function>(&SimplePlayer::updatePlayerFrame));
    simpleplayer.def("updatePlayerFrameO", [](SimplePlayer* self, int iconID, IconType iconType) { return SimplePlayer::updatePlayerFrameO(self, iconID, iconType); });
    simpleplayer.attr("updatePlayerFrameA") = SimplePlayer::updatePlayerFrameA;
    simpleplayer.attr("updatePlayerFrameN") = "updatePlayerFrame";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::updatePlayerFrameA, SimplePlayer::updatePlayerFrameH, (LPVOID*)&SimplePlayer::updatePlayerFrameO_);

    simpleplayer.def("updateColors", pybind::overload_cast<SimplePlayer*>(&SimplePlayer::updateColors));
    simpleplayer.def("updateColors", pybind::overload_cast<pybind::function>(&SimplePlayer::updateColors));
    simpleplayer.def("updateColorsO", [](SimplePlayer* self) { return SimplePlayer::updateColorsO(self); });
    simpleplayer.attr("updateColorsA") = SimplePlayer::updateColorsA;
    simpleplayer.attr("updateColorsN") = "updateColors";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::updateColorsA, SimplePlayer::updateColorsH, (LPVOID*)&SimplePlayer::updateColorsO_);

    simpleplayer.def("setFrames", pybind::overload_cast<SimplePlayer*, const char*, const char*, const char*, const char*, const char*>(&SimplePlayer::setFrames));
    simpleplayer.def("setFrames", pybind::overload_cast<pybind::function>(&SimplePlayer::setFrames));
    simpleplayer.def("setFramesO", [](SimplePlayer* self, const char* firstLayer, const char* secondLayer, const char* birdDome, const char* outlineSprite, const char* detailSprite) { return SimplePlayer::setFramesO(self, firstLayer, secondLayer, birdDome, outlineSprite, detailSprite); });
    simpleplayer.attr("setFramesA") = SimplePlayer::setFramesA;
    simpleplayer.attr("setFramesN") = "setFrames";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::setFramesA, SimplePlayer::setFramesH, (LPVOID*)&SimplePlayer::setFramesO_);

    simpleplayer.def("setColor", pybind::overload_cast<SimplePlayer*, const cocos2d::ccColor3B&>(&SimplePlayer::setColor));
    simpleplayer.def("setColor", pybind::overload_cast<pybind::function>(&SimplePlayer::setColor));
    simpleplayer.def("setColorO", [](SimplePlayer* self, const cocos2d::ccColor3B& color) { return SimplePlayer::setColorO(self, color); });
    simpleplayer.attr("setColorA") = SimplePlayer::setColorA;
    simpleplayer.attr("setColorN") = "setColor";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::setColorA, SimplePlayer::setColorH, (LPVOID*)&SimplePlayer::setColorO_);

    simpleplayer.def("setOpacity", pybind::overload_cast<SimplePlayer*, unsigned char>(&SimplePlayer::setOpacity));
    simpleplayer.def("setOpacity", pybind::overload_cast<pybind::function>(&SimplePlayer::setOpacity));
    simpleplayer.def("setOpacityO", [](SimplePlayer* self, unsigned char opacity) { return SimplePlayer::setOpacityO(self, opacity); });
    simpleplayer.attr("setOpacityA") = SimplePlayer::setOpacityA;
    simpleplayer.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)SimplePlayer::setOpacityA, SimplePlayer::setOpacityH, (LPVOID*)&SimplePlayer::setOpacityO_);

    auto slider = pybind::class_<Slider, cocos2d::CCLayer>(m, "Slider");
    slider.def("getValue", pybind::overload_cast<Slider*>(&Slider::getValue));
    slider.def("getValue", pybind::overload_cast<pybind::function>(&Slider::getValue));
    slider.def("getValueO", [](Slider* self) { return Slider::getValueO(self); });
    slider.attr("getValueA") = Slider::getValueA;
    slider.attr("getValueN") = "getValue";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::getValueA, Slider::getValueH, (LPVOID*)&Slider::getValueO_);

    slider.def("updateBar", pybind::overload_cast<Slider*>(&Slider::updateBar));
    slider.def("updateBar", pybind::overload_cast<pybind::function>(&Slider::updateBar));
    slider.def("updateBarO", [](Slider* self) { return Slider::updateBarO(self); });
    slider.attr("updateBarA") = Slider::updateBarA;
    slider.attr("updateBarN") = "updateBar";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::updateBarA, Slider::updateBarH, (LPVOID*)&Slider::updateBarO_);

    slider.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler, const char*, const char*, const char*, const char*, float>(&Slider::create));
    slider.def("create", pybind::overload_cast<pybind::function>(&Slider::create));
    slider.def("createO", [](cocos2d::CCNode* target, cocos2d::SEL_MenuHandler click, const char* unused, const char* grooveSpr, const char* thumbSpr, const char* thumbSprSel, float scale) { return Slider::createO(target, click, unused, grooveSpr, thumbSpr, thumbSprSel, scale); });
    slider.attr("createA") = Slider::createA;
    slider.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::createA, Slider::createH, (LPVOID*)&Slider::createO_);

    auto slidertouchlogic = pybind::class_<SliderTouchLogic, cocos2d::CCMenu>(m, "SliderTouchLogic");
    auto songcell = pybind::class_<SongCell, TableViewCell>(m, "SongCell");
    songcell.def("updateBGColor", pybind::overload_cast<SongCell*, int>(&SongCell::updateBGColor));
    songcell.def("updateBGColor", pybind::overload_cast<pybind::function>(&SongCell::updateBGColor));
    songcell.def("updateBGColorO", [](SongCell* self, int index) { return SongCell::updateBGColorO(self, index); });
    songcell.attr("updateBGColorA") = SongCell::updateBGColorA;
    songcell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)SongCell::updateBGColorA, SongCell::updateBGColorH, (LPVOID*)&SongCell::updateBGColorO_);

    auto songinfolayer = pybind::class_<SongInfoLayer, FLAlertLayer>(m, "SongInfoLayer");
    songinfolayer.def("create", pybind::overload_cast<int>(&SongInfoLayer::create));
    songinfolayer.def("create", pybind::overload_cast<pybind::function>(&SongInfoLayer::create));
    songinfolayer.def("createO", [](int songID) { return SongInfoLayer::createO(songID); });
    songinfolayer.attr("createA") = SongInfoLayer::createA;
    songinfolayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SongInfoLayer::createA, SongInfoLayer::createH, (LPVOID*)&SongInfoLayer::createO_);

    songinfolayer.def("create", pybind::overload_cast<gd::string, gd::string, gd::string, gd::string, gd::string, gd::string>(&SongInfoLayer::create));
    auto spawntriggeraction = pybind::class_<SpawnTriggerAction, cocos2d::CCNode>(m, "SpawnTriggerAction");
    auto speedobject = pybind::class_<SpeedObject, cocos2d::CCNode>(m, "SpeedObject");
    auto startposobject = pybind::class_<StartPosObject, EffectGameObject>(m, "StartPosObject");
    startposobject.def("create", pybind::overload_cast<>(&StartPosObject::create));
    startposobject.def("create", pybind::overload_cast<pybind::function>(&StartPosObject::create));
    startposobject.def("createO", []() { return StartPosObject::createO(); });
    startposobject.attr("createA") = StartPosObject::createA;
    startposobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)StartPosObject::createA, StartPosObject::createH, (LPVOID*)&StartPosObject::createO_);

    auto statscell = pybind::class_<StatsCell, TableViewCell>(m, "StatsCell");
    statscell.def("updateBGColor", pybind::overload_cast<StatsCell*, int>(&StatsCell::updateBGColor));
    statscell.def("updateBGColor", pybind::overload_cast<pybind::function>(&StatsCell::updateBGColor));
    statscell.def("updateBGColorO", [](StatsCell* self, int index) { return StatsCell::updateBGColorO(self, index); });
    statscell.attr("updateBGColorA") = StatsCell::updateBGColorA;
    statscell.attr("updateBGColorN") = "updateBGColor";
    cinnamon::hooks::hookCinnamon((PVOID)StatsCell::updateBGColorA, StatsCell::updateBGColorH, (LPVOID*)&StatsCell::updateBGColorO_);

    statscell.def("draw", pybind::overload_cast<StatsCell*>(&StatsCell::draw));
    statscell.def("draw", pybind::overload_cast<pybind::function>(&StatsCell::draw));
    statscell.def("drawO", [](StatsCell* self) { return StatsCell::drawO(self); });
    statscell.attr("drawA") = StatsCell::drawA;
    statscell.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)StatsCell::drawA, StatsCell::drawH, (LPVOID*)&StatsCell::drawO_);

    auto statslayer = pybind::class_<StatsLayer, GJDropDownLayer>(m, "StatsLayer");
    statslayer.def("create", pybind::overload_cast<>(&StatsLayer::create));
    statslayer.def("create", pybind::overload_cast<pybind::function>(&StatsLayer::create));
    statslayer.def("createO", []() { return StatsLayer::createO(); });
    statslayer.attr("createA") = StatsLayer::createA;
    statslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)StatsLayer::createA, StatsLayer::createH, (LPVOID*)&StatsLayer::createO_);

    auto tableview = pybind::class_<TableView, CCScrollLayerExt>(m, "TableView");
    tableview.def("create", pybind::overload_cast<TableViewDelegate*, TableViewDataSource*, cocos2d::CCRect>(&TableView::create));
    tableview.def("create", pybind::overload_cast<pybind::function>(&TableView::create));
    tableview.def("createO", [](TableViewDelegate* p0, TableViewDataSource* p1, cocos2d::CCRect p2) { return TableView::createO(p0, p1, p2); });
    tableview.attr("createA") = TableView::createA;
    tableview.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::createA, TableView::createH, (LPVOID*)&TableView::createO_);

    tableview.def("reloadData", pybind::overload_cast<TableView*>(&TableView::reloadData));
    tableview.def("reloadData", pybind::overload_cast<pybind::function>(&TableView::reloadData));
    tableview.def("reloadDataO", [](TableView* self) { return TableView::reloadDataO(self); });
    tableview.attr("reloadDataA") = TableView::reloadDataA;
    tableview.attr("reloadDataN") = "reloadData";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::reloadDataA, TableView::reloadDataH, (LPVOID*)&TableView::reloadDataO_);

    tableview.def("registerWithTouchDispatcher", pybind::overload_cast<TableView*>(&TableView::registerWithTouchDispatcher));
    tableview.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&TableView::registerWithTouchDispatcher));
    tableview.def("registerWithTouchDispatcherO", [](TableView* self) { return TableView::registerWithTouchDispatcherO(self); });
    tableview.attr("registerWithTouchDispatcherA") = TableView::registerWithTouchDispatcherA;
    tableview.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::registerWithTouchDispatcherA, TableView::registerWithTouchDispatcherH, (LPVOID*)&TableView::registerWithTouchDispatcherO_);

    tableview.def("scrollWheel", pybind::overload_cast<TableView*, float, float>(&TableView::scrollWheel));
    tableview.def("scrollWheel", pybind::overload_cast<pybind::function>(&TableView::scrollWheel));
    tableview.def("scrollWheelO", [](TableView* self, float p0, float p1) { return TableView::scrollWheelO(self, p0, p1); });
    tableview.attr("scrollWheelA") = TableView::scrollWheelA;
    tableview.attr("scrollWheelN") = "scrollWheel";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::scrollWheelA, TableView::scrollWheelH, (LPVOID*)&TableView::scrollWheelO_);

    auto teleportportalobject = pybind::class_<TeleportPortalObject, GameObject>(m, "TeleportPortalObject");
    auto textalertpopup = pybind::class_<TextAlertPopup, cocos2d::CCNode>(m, "TextAlertPopup");
    textalertpopup.def("create", pybind::overload_cast<gd::string, float, float>(&TextAlertPopup::create));
    textalertpopup.def("create", pybind::overload_cast<pybind::function>(&TextAlertPopup::create));
    textalertpopup.def("createO", [](gd::string text, float time, float scale) { return TextAlertPopup::createO(text, time, scale); });
    textalertpopup.attr("createA") = TextAlertPopup::createA;
    textalertpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TextAlertPopup::createA, TextAlertPopup::createH, (LPVOID*)&TextAlertPopup::createO_);

    auto textarea = pybind::class_<TextArea, cocos2d::CCSprite>(m, "TextArea");
    textarea.def("setOpacity", pybind::overload_cast<TextArea*, unsigned char>(&TextArea::setOpacity));
    textarea.def("setOpacity", pybind::overload_cast<pybind::function>(&TextArea::setOpacity));
    textarea.def("setOpacityO", [](TextArea* self, unsigned char p0) { return TextArea::setOpacityO(self, p0); });
    textarea.attr("setOpacityA") = TextArea::setOpacityA;
    textarea.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::setOpacityA, TextArea::setOpacityH, (LPVOID*)&TextArea::setOpacityO_);

    textarea.def("init", pybind::overload_cast<TextArea*, gd::string, char const*, float, float, cocos2d::CCPoint, float, bool>(&TextArea::init));
    textarea.def("init", pybind::overload_cast<pybind::function>(&TextArea::init));
    textarea.def("initO", [](TextArea* self, gd::string str, char const* font, float width, float height, cocos2d::CCPoint anchor, float scale, bool disableColor) { return TextArea::initO(self, str, font, width, height, anchor, scale, disableColor); });
    textarea.attr("initA") = TextArea::initA;
    textarea.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::initA, TextArea::initH, (LPVOID*)&TextArea::initO_);

    textarea.def("create", pybind::overload_cast<gd::string, char const*, float, float, cocos2d::CCPoint, float, bool>(&TextArea::create));
    textarea.def("create", pybind::overload_cast<pybind::function>(&TextArea::create));
    textarea.def("createO", [](gd::string str, char const* font, float scale, float width, cocos2d::CCPoint anchor, float lineHeight, bool disableColor) { return TextArea::createO(str, font, scale, width, anchor, lineHeight, disableColor); });
    textarea.attr("createA") = TextArea::createA;
    textarea.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::createA, TextArea::createH, (LPVOID*)&TextArea::createO_);

    textarea.def("colorAllCharactersTo", pybind::overload_cast<TextArea*, cocos2d::ccColor3B>(&TextArea::colorAllCharactersTo));
    textarea.def("colorAllCharactersTo", pybind::overload_cast<pybind::function>(&TextArea::colorAllCharactersTo));
    textarea.def("colorAllCharactersToO", [](TextArea* self, cocos2d::ccColor3B color) { return TextArea::colorAllCharactersToO(self, color); });
    textarea.attr("colorAllCharactersToA") = TextArea::colorAllCharactersToA;
    textarea.attr("colorAllCharactersToN") = "colorAllCharactersTo";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::colorAllCharactersToA, TextArea::colorAllCharactersToH, (LPVOID*)&TextArea::colorAllCharactersToO_);

    textarea.def("setString", pybind::overload_cast<TextArea*, gd::string>(&TextArea::setString));
    textarea.def("setString", pybind::overload_cast<pybind::function>(&TextArea::setString));
    textarea.def("setStringO", [](TextArea* self, gd::string str) { return TextArea::setStringO(self, str); });
    textarea.attr("setStringA") = TextArea::setStringA;
    textarea.attr("setStringN") = "setString";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::setStringA, TextArea::setStringH, (LPVOID*)&TextArea::setStringO_);

    auto toggletriggeraction = pybind::class_<ToggleTriggerAction, cocos2d::CCNode>(m, "ToggleTriggerAction");
    auto topartistslayer = pybind::class_<TopArtistsLayer, FLAlertLayer>(m, "TopArtistsLayer");
    topartistslayer.def("create", pybind::overload_cast<>(&TopArtistsLayer::create));
    topartistslayer.def("create", pybind::overload_cast<pybind::function>(&TopArtistsLayer::create));
    topartistslayer.def("createO", []() { return TopArtistsLayer::createO(); });
    topartistslayer.attr("createA") = TopArtistsLayer::createA;
    topartistslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TopArtistsLayer::createA, TopArtistsLayer::createH, (LPVOID*)&TopArtistsLayer::createO_);

    topartistslayer.def("init", pybind::overload_cast<TopArtistsLayer*>(&TopArtistsLayer::init));
    topartistslayer.def("init", pybind::overload_cast<pybind::function>(&TopArtistsLayer::init));
    topartistslayer.def("initO", [](TopArtistsLayer* self) { return TopArtistsLayer::initO(self); });
    topartistslayer.attr("initA") = TopArtistsLayer::initA;
    topartistslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)TopArtistsLayer::initA, TopArtistsLayer::initH, (LPVOID*)&TopArtistsLayer::initO_);

    auto touchtoggleaction = pybind::class_<TouchToggleAction, cocos2d::CCNode>(m, "TouchToggleAction");
    auto uilayer = pybind::class_<UILayer, cocos2d::CCLayerColor>(m, "UILayer");
    uilayer.def("create", pybind::overload_cast<>(&UILayer::create));
    uilayer.def("create", pybind::overload_cast<pybind::function>(&UILayer::create));
    uilayer.def("createO", []() { return UILayer::createO(); });
    uilayer.attr("createA") = UILayer::createA;
    uilayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::createA, UILayer::createH, (LPVOID*)&UILayer::createO_);

    uilayer.def("init", pybind::overload_cast<UILayer*>(&UILayer::init));
    uilayer.def("init", pybind::overload_cast<pybind::function>(&UILayer::init));
    uilayer.def("initO", [](UILayer* self) { return UILayer::initO(self); });
    uilayer.attr("initA") = UILayer::initA;
    uilayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::initA, UILayer::initH, (LPVOID*)&UILayer::initO_);

    uilayer.def("onCheck", pybind::overload_cast<UILayer*, cocos2d::CCObject*>(&UILayer::onCheck));
    uilayer.def("onCheck", pybind::overload_cast<pybind::function>(&UILayer::onCheck));
    uilayer.def("onCheckO", [](UILayer* self, cocos2d::CCObject* sender) { return UILayer::onCheckO(self, sender); });
    uilayer.attr("onCheckA") = UILayer::onCheckA;
    uilayer.attr("onCheckN") = "onCheck";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::onCheckA, UILayer::onCheckH, (LPVOID*)&UILayer::onCheckO_);

    uilayer.def("onDeleteCheck", pybind::overload_cast<UILayer*, cocos2d::CCObject*>(&UILayer::onDeleteCheck));
    uilayer.def("onDeleteCheck", pybind::overload_cast<pybind::function>(&UILayer::onDeleteCheck));
    uilayer.def("onDeleteCheckO", [](UILayer* self, cocos2d::CCObject* sender) { return UILayer::onDeleteCheckO(self, sender); });
    uilayer.attr("onDeleteCheckA") = UILayer::onDeleteCheckA;
    uilayer.attr("onDeleteCheckN") = "onDeleteCheck";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::onDeleteCheckA, UILayer::onDeleteCheckH, (LPVOID*)&UILayer::onDeleteCheckO_);

    uilayer.def("onPause", pybind::overload_cast<UILayer*, cocos2d::CCObject*>(&UILayer::onPause));
    uilayer.def("onPause", pybind::overload_cast<pybind::function>(&UILayer::onPause));
    uilayer.def("onPauseO", [](UILayer* self, cocos2d::CCObject* sender) { return UILayer::onPauseO(self, sender); });
    uilayer.attr("onPauseA") = UILayer::onPauseA;
    uilayer.attr("onPauseN") = "onPause";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::onPauseA, UILayer::onPauseH, (LPVOID*)&UILayer::onPauseO_);

    uilayer.def("keyDown", pybind::overload_cast<UILayer*, cocos2d::enumKeyCodes>(&UILayer::keyDown));
    uilayer.def("keyDown", pybind::overload_cast<pybind::function>(&UILayer::keyDown));
    uilayer.def("keyDownO", [](UILayer* self, cocos2d::enumKeyCodes key) { return UILayer::keyDownO(self, key); });
    uilayer.attr("keyDownA") = UILayer::keyDownA;
    uilayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::keyDownA, UILayer::keyDownH, (LPVOID*)&UILayer::keyDownO_);

    uilayer.def("keyUp", pybind::overload_cast<UILayer*, cocos2d::enumKeyCodes>(&UILayer::keyUp));
    uilayer.def("keyUp", pybind::overload_cast<pybind::function>(&UILayer::keyUp));
    uilayer.def("keyUpO", [](UILayer* self, cocos2d::enumKeyCodes key) { return UILayer::keyUpO(self, key); });
    uilayer.attr("keyUpA") = UILayer::keyUpA;
    uilayer.attr("keyUpN") = "keyUp";
    cinnamon::hooks::hookCinnamon((PVOID)UILayer::keyUpA, UILayer::keyUpH, (LPVOID*)&UILayer::keyUpO_);

    auto undoobject = pybind::class_<UndoObject, cocos2d::CCObject>(m, "UndoObject");
    undoobject.def("create", pybind::overload_cast<GameObject*, UndoCommand>(&UndoObject::create));
    undoobject.def("create", pybind::overload_cast<pybind::function>(&UndoObject::create));
    undoobject.def("createO", [](GameObject* p0, UndoCommand p1) { return UndoObject::createO(p0, p1); });
    undoobject.attr("createA") = UndoObject::createA;
    undoobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)UndoObject::createA, UndoObject::createH, (LPVOID*)&UndoObject::createO_);

    undoobject.def("createWithArray", pybind::overload_cast<cocos2d::CCArray*, UndoCommand>(&UndoObject::createWithArray));
    undoobject.def("createWithArray", pybind::overload_cast<pybind::function>(&UndoObject::createWithArray));
    undoobject.def("createWithArrayO", [](cocos2d::CCArray* p0, UndoCommand p1) { return UndoObject::createWithArrayO(p0, p1); });
    undoobject.attr("createWithArrayA") = UndoObject::createWithArrayA;
    undoobject.attr("createWithArrayN") = "createWithArray";
    cinnamon::hooks::hookCinnamon((PVOID)UndoObject::createWithArrayA, UndoObject::createWithArrayH, (LPVOID*)&UndoObject::createWithArrayO_);

    undoobject.def("createWithTransformObjects", pybind::overload_cast<cocos2d::CCArray*, UndoCommand>(&UndoObject::createWithTransformObjects));
    undoobject.def("createWithTransformObjects", pybind::overload_cast<pybind::function>(&UndoObject::createWithTransformObjects));
    undoobject.def("createWithTransformObjectsO", [](cocos2d::CCArray* pObjects, UndoCommand nCommand) { return UndoObject::createWithTransformObjectsO(pObjects, nCommand); });
    undoobject.attr("createWithTransformObjectsA") = UndoObject::createWithTransformObjectsA;
    undoobject.attr("createWithTransformObjectsN") = "createWithTransformObjects";
    cinnamon::hooks::hookCinnamon((PVOID)UndoObject::createWithTransformObjectsA, UndoObject::createWithTransformObjectsH, (LPVOID*)&UndoObject::createWithTransformObjectsO_);

    auto uploadactionpopup = pybind::class_<UploadActionPopup, FLAlertLayer>(m, "UploadActionPopup");
    auto uploadmessagedelegate = pybind::class_<UploadMessageDelegate>(m, "UploadMessageDelegate");
    auto videooptionslayer = pybind::class_<VideoOptionsLayer, FLAlertLayer>(m, "VideoOptionsLayer");
    videooptionslayer.def("create", pybind::overload_cast<VideoOptionsLayer*>(&VideoOptionsLayer::create));
    videooptionslayer.def("create", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::create));
    videooptionslayer.def("createO", [](VideoOptionsLayer* self) { return VideoOptionsLayer::createO(self); });
    videooptionslayer.attr("createA") = VideoOptionsLayer::createA;
    videooptionslayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::createA, VideoOptionsLayer::createH, (LPVOID*)&VideoOptionsLayer::createO_);

    videooptionslayer.def("init", pybind::overload_cast<VideoOptionsLayer*>(&VideoOptionsLayer::init));
    videooptionslayer.def("init", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::init));
    videooptionslayer.def("initO", [](VideoOptionsLayer* self) { return VideoOptionsLayer::initO(self); });
    videooptionslayer.attr("initA") = VideoOptionsLayer::initA;
    videooptionslayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::initA, VideoOptionsLayer::initH, (LPVOID*)&VideoOptionsLayer::initO_);

    videooptionslayer.def("onAdvanced", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onAdvanced));
    videooptionslayer.def("onAdvanced", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onAdvanced));
    videooptionslayer.def("onAdvancedO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onAdvancedO(self, p0); });
    videooptionslayer.attr("onAdvancedA") = VideoOptionsLayer::onAdvancedA;
    videooptionslayer.attr("onAdvancedN") = "onAdvanced";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onAdvancedA, VideoOptionsLayer::onAdvancedH, (LPVOID*)&VideoOptionsLayer::onAdvancedO_);

    videooptionslayer.def("onFullscreen", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onFullscreen));
    videooptionslayer.def("onFullscreen", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onFullscreen));
    videooptionslayer.def("onFullscreenO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onFullscreenO(self, p0); });
    videooptionslayer.attr("onFullscreenA") = VideoOptionsLayer::onFullscreenA;
    videooptionslayer.attr("onFullscreenN") = "onFullscreen";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onFullscreenA, VideoOptionsLayer::onFullscreenH, (LPVOID*)&VideoOptionsLayer::onFullscreenO_);

    videooptionslayer.def("onTextureQualityNext", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onTextureQualityNext));
    videooptionslayer.def("onTextureQualityNext", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onTextureQualityNext));
    videooptionslayer.def("onTextureQualityNextO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onTextureQualityNextO(self, p0); });
    videooptionslayer.attr("onTextureQualityNextA") = VideoOptionsLayer::onTextureQualityNextA;
    videooptionslayer.attr("onTextureQualityNextN") = "onTextureQualityNext";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onTextureQualityNextA, VideoOptionsLayer::onTextureQualityNextH, (LPVOID*)&VideoOptionsLayer::onTextureQualityNextO_);

    videooptionslayer.def("onTextureQualityPrev", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onTextureQualityPrev));
    videooptionslayer.def("onTextureQualityPrev", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onTextureQualityPrev));
    videooptionslayer.def("onTextureQualityPrevO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onTextureQualityPrevO(self, p0); });
    videooptionslayer.attr("onTextureQualityPrevA") = VideoOptionsLayer::onTextureQualityPrevA;
    videooptionslayer.attr("onTextureQualityPrevN") = "onTextureQualityPrev";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onTextureQualityPrevA, VideoOptionsLayer::onTextureQualityPrevH, (LPVOID*)&VideoOptionsLayer::onTextureQualityPrevO_);

    videooptionslayer.def("updateTextureQuality", pybind::overload_cast<VideoOptionsLayer*, int>(&VideoOptionsLayer::updateTextureQuality));
    videooptionslayer.def("updateTextureQuality", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::updateTextureQuality));
    videooptionslayer.def("updateTextureQualityO", [](VideoOptionsLayer* self, int index) { return VideoOptionsLayer::updateTextureQualityO(self, index); });
    videooptionslayer.attr("updateTextureQualityA") = VideoOptionsLayer::updateTextureQualityA;
    videooptionslayer.attr("updateTextureQualityN") = "updateTextureQuality";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::updateTextureQualityA, VideoOptionsLayer::updateTextureQualityH, (LPVOID*)&VideoOptionsLayer::updateTextureQualityO_);

    videooptionslayer.def("onResolutionPrev", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onResolutionPrev));
    videooptionslayer.def("onResolutionPrev", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onResolutionPrev));
    videooptionslayer.def("onResolutionPrevO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onResolutionPrevO(self, p0); });
    videooptionslayer.attr("onResolutionPrevA") = VideoOptionsLayer::onResolutionPrevA;
    videooptionslayer.attr("onResolutionPrevN") = "onResolutionPrev";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onResolutionPrevA, VideoOptionsLayer::onResolutionPrevH, (LPVOID*)&VideoOptionsLayer::onResolutionPrevO_);

    videooptionslayer.def("onResolutionNext", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onResolutionNext));
    videooptionslayer.def("onResolutionNext", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onResolutionNext));
    videooptionslayer.def("onResolutionNextO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onResolutionNextO(self, p0); });
    videooptionslayer.attr("onResolutionNextA") = VideoOptionsLayer::onResolutionNextA;
    videooptionslayer.attr("onResolutionNextN") = "onResolutionNext";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onResolutionNextA, VideoOptionsLayer::onResolutionNextH, (LPVOID*)&VideoOptionsLayer::onResolutionNextO_);

    videooptionslayer.def("updateResolution", pybind::overload_cast<VideoOptionsLayer*, int>(&VideoOptionsLayer::updateResolution));
    videooptionslayer.def("updateResolution", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::updateResolution));
    videooptionslayer.def("updateResolutionO", [](VideoOptionsLayer* self, int index) { return VideoOptionsLayer::updateResolutionO(self, index); });
    videooptionslayer.attr("updateResolutionA") = VideoOptionsLayer::updateResolutionA;
    videooptionslayer.attr("updateResolutionN") = "updateResolution";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::updateResolutionA, VideoOptionsLayer::updateResolutionH, (LPVOID*)&VideoOptionsLayer::updateResolutionO_);

    videooptionslayer.def("toggleResolution", pybind::overload_cast<VideoOptionsLayer*>(&VideoOptionsLayer::toggleResolution));
    videooptionslayer.def("toggleResolution", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::toggleResolution));
    videooptionslayer.def("toggleResolutionO", [](VideoOptionsLayer* self) { return VideoOptionsLayer::toggleResolutionO(self); });
    videooptionslayer.attr("toggleResolutionA") = VideoOptionsLayer::toggleResolutionA;
    videooptionslayer.attr("toggleResolutionN") = "toggleResolution";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::toggleResolutionA, VideoOptionsLayer::toggleResolutionH, (LPVOID*)&VideoOptionsLayer::toggleResolutionO_);

    videooptionslayer.def("onApply", pybind::overload_cast<VideoOptionsLayer*, cocos2d::CCObject*>(&VideoOptionsLayer::onApply));
    videooptionslayer.def("onApply", pybind::overload_cast<pybind::function>(&VideoOptionsLayer::onApply));
    videooptionslayer.def("onApplyO", [](VideoOptionsLayer* self, cocos2d::CCObject* p0) { return VideoOptionsLayer::onApplyO(self, p0); });
    videooptionslayer.attr("onApplyA") = VideoOptionsLayer::onApplyA;
    videooptionslayer.attr("onApplyN") = "onApply";
    cinnamon::hooks::hookCinnamon((PVOID)VideoOptionsLayer::onApplyA, VideoOptionsLayer::onApplyH, (LPVOID*)&VideoOptionsLayer::onApplyO_);

    auto leveltools = pybind::class_<LevelTools>(m, "LevelTools");
    leveltools.def("base64EncodeString", pybind::overload_cast<gd::string>(&LevelTools::base64EncodeString));
    leveltools.def("base64EncodeString", pybind::overload_cast<pybind::function>(&LevelTools::base64EncodeString));
    leveltools.def("base64EncodeStringO", [](gd::string p0) { return LevelTools::base64EncodeStringO(p0); });
    leveltools.attr("base64EncodeStringA") = LevelTools::base64EncodeStringA;
    leveltools.attr("base64EncodeStringN") = "base64EncodeString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::base64EncodeStringA, LevelTools::base64EncodeStringH, (LPVOID*)&LevelTools::base64EncodeStringO_);

    leveltools.def("base64DecodeString", pybind::overload_cast<gd::string>(&LevelTools::base64DecodeString));
    leveltools.def("base64DecodeString", pybind::overload_cast<pybind::function>(&LevelTools::base64DecodeString));
    leveltools.def("base64DecodeStringO", [](gd::string p0) { return LevelTools::base64DecodeStringO(p0); });
    leveltools.attr("base64DecodeStringA") = LevelTools::base64DecodeStringA;
    leveltools.attr("base64DecodeStringN") = "base64DecodeString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::base64DecodeStringA, LevelTools::base64DecodeStringH, (LPVOID*)&LevelTools::base64DecodeStringO_);

    leveltools.def("getLevel", pybind::overload_cast<int, bool>(&LevelTools::getLevel));
    leveltools.def("getLevel", pybind::overload_cast<pybind::function>(&LevelTools::getLevel));
    leveltools.def("getLevelO", [](int p0, bool p1) { return LevelTools::getLevelO(p0, p1); });
    leveltools.attr("getLevelA") = LevelTools::getLevelA;
    leveltools.attr("getLevelN") = "getLevel";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::getLevelA, LevelTools::getLevelH, (LPVOID*)&LevelTools::getLevelO_);

    leveltools.def("verifyLevelIntegrity", pybind::overload_cast<gd::string, int>(&LevelTools::verifyLevelIntegrity));
    leveltools.def("verifyLevelIntegrity", pybind::overload_cast<pybind::function>(&LevelTools::verifyLevelIntegrity));
    leveltools.def("verifyLevelIntegrityO", [](gd::string p0, int p1) { return LevelTools::verifyLevelIntegrityO(p0, p1); });
    leveltools.attr("verifyLevelIntegrityA") = LevelTools::verifyLevelIntegrityA;
    leveltools.attr("verifyLevelIntegrityN") = "verifyLevelIntegrity";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::verifyLevelIntegrityA, LevelTools::verifyLevelIntegrityH, (LPVOID*)&LevelTools::verifyLevelIntegrityO_);

    leveltools.def("xPosForTime", pybind::overload_cast<float, cocos2d::CCArray*, int>(&LevelTools::xPosForTime));
    leveltools.def("xPosForTime", pybind::overload_cast<pybind::function>(&LevelTools::xPosForTime));
    leveltools.def("xPosForTimeO", [](float p0, cocos2d::CCArray* p1, int p2) { return LevelTools::xPosForTimeO(p0, p1, p2); });
    leveltools.attr("xPosForTimeA") = LevelTools::xPosForTimeA;
    leveltools.attr("xPosForTimeN") = "xPosForTime";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::xPosForTimeA, LevelTools::xPosForTimeH, (LPVOID*)&LevelTools::xPosForTimeO_);

    leveltools.def("timeForXPos", pybind::overload_cast<float, cocos2d::CCArray*, int>(&LevelTools::timeForXPos));
    leveltools.def("timeForXPos", pybind::overload_cast<pybind::function>(&LevelTools::timeForXPos));
    leveltools.def("timeForXPosO", [](float p0, cocos2d::CCArray* p1, int p2) { return LevelTools::timeForXPosO(p0, p1, p2); });
    leveltools.attr("timeForXPosA") = LevelTools::timeForXPosA;
    leveltools.attr("timeForXPosN") = "timeForXPos";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::timeForXPosA, LevelTools::timeForXPosH, (LPVOID*)&LevelTools::timeForXPosO_);


}