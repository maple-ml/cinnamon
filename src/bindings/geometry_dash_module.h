// AUTOMATICALLY GENERATED HOOK BINDING for "src/bindings/geometry_dash_module.h" module
// Generated by vanilla v0.0.1
#pragma once
#include <cocos2d.h>
#include "core/utilities/game.h"
#include "core/python.h"
#include "core/hooks.h"
#include "pybind11.h"
#include "pybind11/embed.h"
#include "bindings/manual_bindings.h"
#include <cocos-ext.h>
#include "bindings/enums.h"
#include "bindings/winstl.h"
#include "bindings/geometry_dash_bindings.h"
USING_NS_CC;
namespace pybind = pybind11;
PYBIND11_EMBEDDED_MODULE(geometry_dash, m) {

    manualbindings::geometry_dash_init(m);
    auto flalertlayer = pybind::class_<FLAlertLayer, cocos2d::CCLayerColor>(m, "FLAlertLayer");
    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*>(&FLAlertLayer::create));
    flalertlayer.def("create", pybind::overload_cast<pybind::function>(&FLAlertLayer::create));
    flalertlayer.def("createO", [](FLAlertLayerProtocol* p0, char const* p1, gd::string p2, char const* p3, char const* p4) { return FLAlertLayer::createO(p0, p1, p2, p3, p4); });
    flalertlayer.attr("createA") = FLAlertLayer::createA;
    flalertlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::createA, FLAlertLayer::createH, (LPVOID*)&FLAlertLayer::createO_);

    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float>(&FLAlertLayer::create));
    flalertlayer.def("create", pybind::overload_cast<FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float, float>(&FLAlertLayer::create));
    flalertlayer.def("init", pybind::overload_cast<FLAlertLayer*, int>(&FLAlertLayer::init));
    flalertlayer.def("init", pybind::overload_cast<pybind::function>(&FLAlertLayer::init));
    flalertlayer.def("initO", [](FLAlertLayer* self, int p0) { return FLAlertLayer::initO(self, p0); });
    flalertlayer.attr("initA") = FLAlertLayer::initA;
    flalertlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::initA, FLAlertLayer::initH, (LPVOID*)&FLAlertLayer::initO_);

    flalertlayer.def("init", pybind::overload_cast<FLAlertLayer*, FLAlertLayerProtocol*, char const*, gd::string, char const*, char const*, float, bool, float, float>(&FLAlertLayer::init));
    flalertlayer.def("onBtn1", pybind::overload_cast<FLAlertLayer*, cocos2d::CCObject*>(&FLAlertLayer::onBtn1));
    flalertlayer.def("onBtn1", pybind::overload_cast<pybind::function>(&FLAlertLayer::onBtn1));
    flalertlayer.def("onBtn1O", [](FLAlertLayer* self, cocos2d::CCObject* sender) { return FLAlertLayer::onBtn1O(self, sender); });
    flalertlayer.attr("onBtn1A") = FLAlertLayer::onBtn1A;
    flalertlayer.attr("onBtn1N") = "onBtn1";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::onBtn1A, FLAlertLayer::onBtn1H, (LPVOID*)&FLAlertLayer::onBtn1O_);

    flalertlayer.def("onBtn2", pybind::overload_cast<FLAlertLayer*, cocos2d::CCObject*>(&FLAlertLayer::onBtn2));
    flalertlayer.def("onBtn2", pybind::overload_cast<pybind::function>(&FLAlertLayer::onBtn2));
    flalertlayer.def("onBtn2O", [](FLAlertLayer* self, cocos2d::CCObject* sender) { return FLAlertLayer::onBtn2O(self, sender); });
    flalertlayer.attr("onBtn2A") = FLAlertLayer::onBtn2A;
    flalertlayer.attr("onBtn2N") = "onBtn2";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::onBtn2A, FLAlertLayer::onBtn2H, (LPVOID*)&FLAlertLayer::onBtn2O_);

    flalertlayer.def("incrementForcePrio", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::incrementForcePrio));
    flalertlayer.def("incrementForcePrio", pybind::overload_cast<pybind::function>(&FLAlertLayer::incrementForcePrio));
    flalertlayer.def("incrementForcePrioO", [](FLAlertLayer* self) { return FLAlertLayer::incrementForcePrioO(self); });
    flalertlayer.attr("incrementForcePrioA") = FLAlertLayer::incrementForcePrioA;
    flalertlayer.attr("incrementForcePrioN") = "incrementForcePrio";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::incrementForcePrioA, FLAlertLayer::incrementForcePrioH, (LPVOID*)&FLAlertLayer::incrementForcePrioO_);

    flalertlayer.def("show", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::show));
    flalertlayer.def("show", pybind::overload_cast<pybind::function>(&FLAlertLayer::show));
    flalertlayer.def("showO", [](FLAlertLayer* self) { return FLAlertLayer::showO(self); });
    flalertlayer.attr("showA") = FLAlertLayer::showA;
    flalertlayer.attr("showN") = "show";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::showA, FLAlertLayer::showH, (LPVOID*)&FLAlertLayer::showO_);

    flalertlayer.def("registerWithTouchDispatcher", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::registerWithTouchDispatcher));
    flalertlayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&FLAlertLayer::registerWithTouchDispatcher));
    flalertlayer.def("registerWithTouchDispatcherO", [](FLAlertLayer* self) { return FLAlertLayer::registerWithTouchDispatcherO(self); });
    flalertlayer.attr("registerWithTouchDispatcherA") = FLAlertLayer::registerWithTouchDispatcherA;
    flalertlayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::registerWithTouchDispatcherA, FLAlertLayer::registerWithTouchDispatcherH, (LPVOID*)&FLAlertLayer::registerWithTouchDispatcherO_);

    flalertlayer.def("keyBackClicked", pybind::overload_cast<FLAlertLayer*>(&FLAlertLayer::keyBackClicked));
    flalertlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&FLAlertLayer::keyBackClicked));
    flalertlayer.def("keyBackClickedO", [](FLAlertLayer* self) { return FLAlertLayer::keyBackClickedO(self); });
    flalertlayer.attr("keyBackClickedA") = FLAlertLayer::keyBackClickedA;
    flalertlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::keyBackClickedA, FLAlertLayer::keyBackClickedH, (LPVOID*)&FLAlertLayer::keyBackClickedO_);

    flalertlayer.def("keyDown", pybind::overload_cast<FLAlertLayer*, cocos2d::enumKeyCodes>(&FLAlertLayer::keyDown));
    flalertlayer.def("keyDown", pybind::overload_cast<pybind::function>(&FLAlertLayer::keyDown));
    flalertlayer.def("keyDownO", [](FLAlertLayer* self, cocos2d::enumKeyCodes p0) { return FLAlertLayer::keyDownO(self, p0); });
    flalertlayer.attr("keyDownA") = FLAlertLayer::keyDownA;
    flalertlayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayer::keyDownA, FLAlertLayer::keyDownH, (LPVOID*)&FLAlertLayer::keyDownO_);

    auto flalertlayerprotocol = pybind::class_<FLAlertLayerProtocol>(m, "FLAlertLayerProtocol");
    flalertlayerprotocol.def("FLAlert_Clicked", pybind::overload_cast<FLAlertLayerProtocol*, FLAlertLayer*, bool>(&FLAlertLayerProtocol::FLAlert_Clicked));
    flalertlayerprotocol.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&FLAlertLayerProtocol::FLAlert_Clicked));
    flalertlayerprotocol.def("FLAlert_ClickedO", [](FLAlertLayerProtocol* self, FLAlertLayer* p0, bool p1) { return FLAlertLayerProtocol::FLAlert_ClickedO(self, p0, p1); });
    flalertlayerprotocol.attr("FLAlert_ClickedA") = FLAlertLayerProtocol::FLAlert_ClickedA;
    flalertlayerprotocol.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)FLAlertLayerProtocol::FLAlert_ClickedA, FLAlertLayerProtocol::FLAlert_ClickedH, (LPVOID*)&FLAlertLayerProtocol::FLAlert_ClickedO_);

    auto buttonsprite = pybind::class_<ButtonSprite, cocos2d::CCSprite>(m, "ButtonSprite");
    buttonsprite.def("create", pybind::overload_cast<char const*, float>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<pybind::function>(&ButtonSprite::create));
    buttonsprite.def("createO", [](char const* p0, float p1) { return ButtonSprite::createO(p0, p1); });
    buttonsprite.attr("createA") = ButtonSprite::createA;
    buttonsprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::createA, ButtonSprite::createH, (LPVOID*)&ButtonSprite::createO_);

    buttonsprite.def("create", pybind::overload_cast<char const*, int, int, float, bool>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<char const*, int, int, float, bool, char const*, char const*>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<char const*, int, int, float, bool, char const*, char const*, float>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<cocos2d::CCSprite*>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<cocos2d::CCSprite*, int, int, float, float, bool>(&ButtonSprite::create));
    buttonsprite.def("create", pybind::overload_cast<cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool>(&ButtonSprite::create));
    buttonsprite.def("init", pybind::overload_cast<ButtonSprite*, char const*, int, int, float, bool, char const*, char const*, float>(&ButtonSprite::init));
    buttonsprite.def("init", pybind::overload_cast<pybind::function>(&ButtonSprite::init));
    buttonsprite.def("initO", [](ButtonSprite* self, char const* p0, int p1, int p2, float p3, bool p4, char const* p5, char const* p6, float p7) { return ButtonSprite::initO(self, p0, p1, p2, p3, p4, p5, p6, p7); });
    buttonsprite.attr("initA") = ButtonSprite::initA;
    buttonsprite.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::initA, ButtonSprite::initH, (LPVOID*)&ButtonSprite::initO_);

    buttonsprite.def("init", pybind::overload_cast<ButtonSprite*, cocos2d::CCSprite*, int, int, float, float, bool, char const*, bool>(&ButtonSprite::init));
    buttonsprite.def("setColor", pybind::overload_cast<ButtonSprite*, cocos2d::ccColor3B>(&ButtonSprite::setColor));
    buttonsprite.def("setColor", pybind::overload_cast<pybind::function>(&ButtonSprite::setColor));
    buttonsprite.def("setColorO", [](ButtonSprite* self, cocos2d::ccColor3B p0) { return ButtonSprite::setColorO(self, p0); });
    buttonsprite.attr("setColorA") = ButtonSprite::setColorA;
    buttonsprite.attr("setColorN") = "setColor";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::setColorA, ButtonSprite::setColorH, (LPVOID*)&ButtonSprite::setColorO_);

    buttonsprite.def("setString", pybind::overload_cast<ButtonSprite*, char const*>(&ButtonSprite::setString));
    buttonsprite.def("setString", pybind::overload_cast<pybind::function>(&ButtonSprite::setString));
    buttonsprite.def("setStringO", [](ButtonSprite* self, char const* p0) { return ButtonSprite::setStringO(self, p0); });
    buttonsprite.attr("setStringA") = ButtonSprite::setStringA;
    buttonsprite.attr("setStringN") = "setString";
    cinnamon::hooks::hookCinnamon((PVOID)ButtonSprite::setStringA, ButtonSprite::setStringH, (LPVOID*)&ButtonSprite::setStringO_);

    auto scrollinglayer = pybind::class_<ScrollingLayer, cocos2d::CCLayerColor>(m, "ScrollingLayer");
    scrollinglayer.def("create", pybind::overload_cast<cocos2d::CCSize, cocos2d::CCPoint, float>(&ScrollingLayer::create));
    scrollinglayer.def("create", pybind::overload_cast<pybind::function>(&ScrollingLayer::create));
    scrollinglayer.def("createO", [](cocos2d::CCSize p0, cocos2d::CCPoint p1, float p2) { return ScrollingLayer::createO(p0, p1, p2); });
    scrollinglayer.attr("createA") = ScrollingLayer::createA;
    scrollinglayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::createA, ScrollingLayer::createH, (LPVOID*)&ScrollingLayer::createO_);

    scrollinglayer.def("init", pybind::overload_cast<ScrollingLayer*, cocos2d::CCSize, cocos2d::CCPoint, float>(&ScrollingLayer::init));
    scrollinglayer.def("init", pybind::overload_cast<pybind::function>(&ScrollingLayer::init));
    scrollinglayer.def("initO", [](ScrollingLayer* self, cocos2d::CCSize p0, cocos2d::CCPoint p1, float p2) { return ScrollingLayer::initO(self, p0, p1, p2); });
    scrollinglayer.attr("initA") = ScrollingLayer::initA;
    scrollinglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::initA, ScrollingLayer::initH, (LPVOID*)&ScrollingLayer::initO_);

    scrollinglayer.def("setStartOffset", pybind::overload_cast<ScrollingLayer*, cocos2d::CCPoint>(&ScrollingLayer::setStartOffset));
    scrollinglayer.def("setStartOffset", pybind::overload_cast<pybind::function>(&ScrollingLayer::setStartOffset));
    scrollinglayer.def("setStartOffsetO", [](ScrollingLayer* self, cocos2d::CCPoint p0) { return ScrollingLayer::setStartOffsetO(self, p0); });
    scrollinglayer.attr("setStartOffsetA") = ScrollingLayer::setStartOffsetA;
    scrollinglayer.attr("setStartOffsetN") = "setStartOffset";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::setStartOffsetA, ScrollingLayer::setStartOffsetH, (LPVOID*)&ScrollingLayer::setStartOffsetO_);

    scrollinglayer.def("draw", pybind::overload_cast<ScrollingLayer*>(&ScrollingLayer::draw));
    scrollinglayer.def("draw", pybind::overload_cast<pybind::function>(&ScrollingLayer::draw));
    scrollinglayer.def("drawO", [](ScrollingLayer* self) { return ScrollingLayer::drawO(self); });
    scrollinglayer.attr("drawA") = ScrollingLayer::drawA;
    scrollinglayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::drawA, ScrollingLayer::drawH, (LPVOID*)&ScrollingLayer::drawO_);

    scrollinglayer.def("visit", pybind::overload_cast<ScrollingLayer*>(&ScrollingLayer::visit));
    scrollinglayer.def("visit", pybind::overload_cast<pybind::function>(&ScrollingLayer::visit));
    scrollinglayer.def("visitO", [](ScrollingLayer* self) { return ScrollingLayer::visitO(self); });
    scrollinglayer.attr("visitA") = ScrollingLayer::visitA;
    scrollinglayer.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)ScrollingLayer::visitA, ScrollingLayer::visitH, (LPVOID*)&ScrollingLayer::visitO_);

    auto dialogdelegate = pybind::class_<DialogDelegate>(m, "DialogDelegate");
    auto creatorlayer = pybind::class_<CreatorLayer, cocos2d::CCLayer>(m, "CreatorLayer");
    creatorlayer.def("create", pybind::overload_cast<>(&CreatorLayer::create));
    creatorlayer.def("create", pybind::overload_cast<pybind::function>(&CreatorLayer::create));
    creatorlayer.def("createO", []() { return CreatorLayer::createO(); });
    creatorlayer.attr("createA") = CreatorLayer::createA;
    creatorlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::createA, CreatorLayer::createH, (LPVOID*)&CreatorLayer::createO_);

    creatorlayer.def("onMapPacks", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onMapPacks));
    creatorlayer.def("onMapPacks", pybind::overload_cast<pybind::function>(&CreatorLayer::onMapPacks));
    creatorlayer.def("onMapPacksO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onMapPacksO(self, sender); });
    creatorlayer.attr("onMapPacksA") = CreatorLayer::onMapPacksA;
    creatorlayer.attr("onMapPacksN") = "onMapPacks";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onMapPacksA, CreatorLayer::onMapPacksH, (LPVOID*)&CreatorLayer::onMapPacksO_);

    creatorlayer.def("onMyLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onMyLevels));
    creatorlayer.def("onMyLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onMyLevels));
    creatorlayer.def("onMyLevelsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onMyLevelsO(self, sender); });
    creatorlayer.attr("onMyLevelsA") = CreatorLayer::onMyLevelsA;
    creatorlayer.attr("onMyLevelsN") = "onMyLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onMyLevelsA, CreatorLayer::onMyLevelsH, (LPVOID*)&CreatorLayer::onMyLevelsO_);

    creatorlayer.def("onTopLists", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onTopLists));
    creatorlayer.def("onTopLists", pybind::overload_cast<pybind::function>(&CreatorLayer::onTopLists));
    creatorlayer.def("onTopListsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onTopListsO(self, sender); });
    creatorlayer.attr("onTopListsA") = CreatorLayer::onTopListsA;
    creatorlayer.attr("onTopListsN") = "onTopLists";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onTopListsA, CreatorLayer::onTopListsH, (LPVOID*)&CreatorLayer::onTopListsO_);

    creatorlayer.def("onChallenge", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onChallenge));
    creatorlayer.def("onChallenge", pybind::overload_cast<pybind::function>(&CreatorLayer::onChallenge));
    creatorlayer.def("onChallengeO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onChallengeO(self, sender); });
    creatorlayer.attr("onChallengeA") = CreatorLayer::onChallengeA;
    creatorlayer.attr("onChallengeN") = "onChallenge";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onChallengeA, CreatorLayer::onChallengeH, (LPVOID*)&CreatorLayer::onChallengeO_);

    creatorlayer.def("onGauntlets", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onGauntlets));
    creatorlayer.def("onGauntlets", pybind::overload_cast<pybind::function>(&CreatorLayer::onGauntlets));
    creatorlayer.def("onGauntletsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onGauntletsO(self, sender); });
    creatorlayer.attr("onGauntletsA") = CreatorLayer::onGauntletsA;
    creatorlayer.attr("onGauntletsN") = "onGauntlets";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onGauntletsA, CreatorLayer::onGauntletsH, (LPVOID*)&CreatorLayer::onGauntletsO_);

    creatorlayer.def("onDailyLevel", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onDailyLevel));
    creatorlayer.def("onDailyLevel", pybind::overload_cast<pybind::function>(&CreatorLayer::onDailyLevel));
    creatorlayer.def("onDailyLevelO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onDailyLevelO(self, sender); });
    creatorlayer.attr("onDailyLevelA") = CreatorLayer::onDailyLevelA;
    creatorlayer.attr("onDailyLevelN") = "onDailyLevel";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onDailyLevelA, CreatorLayer::onDailyLevelH, (LPVOID*)&CreatorLayer::onDailyLevelO_);

    creatorlayer.def("onEventLevel", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onEventLevel));
    creatorlayer.def("onEventLevel", pybind::overload_cast<pybind::function>(&CreatorLayer::onEventLevel));
    creatorlayer.def("onEventLevelO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onEventLevelO(self, sender); });
    creatorlayer.attr("onEventLevelA") = CreatorLayer::onEventLevelA;
    creatorlayer.attr("onEventLevelN") = "onEventLevel";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onEventLevelA, CreatorLayer::onEventLevelH, (LPVOID*)&CreatorLayer::onEventLevelO_);

    creatorlayer.def("onFameLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onFameLevels));
    creatorlayer.def("onFameLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onFameLevels));
    creatorlayer.def("onFameLevelsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onFameLevelsO(self, sender); });
    creatorlayer.attr("onFameLevelsA") = CreatorLayer::onFameLevelsA;
    creatorlayer.attr("onFameLevelsN") = "onFameLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onFameLevelsA, CreatorLayer::onFameLevelsH, (LPVOID*)&CreatorLayer::onFameLevelsO_);

    creatorlayer.def("onMultiplayer", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onMultiplayer));
    creatorlayer.def("onMultiplayer", pybind::overload_cast<pybind::function>(&CreatorLayer::onMultiplayer));
    creatorlayer.def("onMultiplayerO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onMultiplayerO(self, sender); });
    creatorlayer.attr("onMultiplayerA") = CreatorLayer::onMultiplayerA;
    creatorlayer.attr("onMultiplayerN") = "onMultiplayer";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onMultiplayerA, CreatorLayer::onMultiplayerH, (LPVOID*)&CreatorLayer::onMultiplayerO_);

    creatorlayer.def("onSavedLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onSavedLevels));
    creatorlayer.def("onSavedLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onSavedLevels));
    creatorlayer.def("onSavedLevelsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onSavedLevelsO(self, sender); });
    creatorlayer.attr("onSavedLevelsA") = CreatorLayer::onSavedLevelsA;
    creatorlayer.attr("onSavedLevelsN") = "onSavedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onSavedLevelsA, CreatorLayer::onSavedLevelsH, (LPVOID*)&CreatorLayer::onSavedLevelsO_);

    creatorlayer.def("onSecretVault", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onSecretVault));
    creatorlayer.def("onSecretVault", pybind::overload_cast<pybind::function>(&CreatorLayer::onSecretVault));
    creatorlayer.def("onSecretVaultO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onSecretVaultO(self, sender); });
    creatorlayer.attr("onSecretVaultA") = CreatorLayer::onSecretVaultA;
    creatorlayer.attr("onSecretVaultN") = "onSecretVault";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onSecretVaultA, CreatorLayer::onSecretVaultH, (LPVOID*)&CreatorLayer::onSecretVaultO_);

    creatorlayer.def("onWeeklyLevel", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onWeeklyLevel));
    creatorlayer.def("onWeeklyLevel", pybind::overload_cast<pybind::function>(&CreatorLayer::onWeeklyLevel));
    creatorlayer.def("onWeeklyLevelO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onWeeklyLevelO(self, sender); });
    creatorlayer.attr("onWeeklyLevelA") = CreatorLayer::onWeeklyLevelA;
    creatorlayer.attr("onWeeklyLevelN") = "onWeeklyLevel";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onWeeklyLevelA, CreatorLayer::onWeeklyLevelH, (LPVOID*)&CreatorLayer::onWeeklyLevelO_);

    creatorlayer.def("onAdventureMap", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onAdventureMap));
    creatorlayer.def("onAdventureMap", pybind::overload_cast<pybind::function>(&CreatorLayer::onAdventureMap));
    creatorlayer.def("onAdventureMapO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onAdventureMapO(self, sender); });
    creatorlayer.attr("onAdventureMapA") = CreatorLayer::onAdventureMapA;
    creatorlayer.attr("onAdventureMapN") = "onAdventureMap";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onAdventureMapA, CreatorLayer::onAdventureMapH, (LPVOID*)&CreatorLayer::onAdventureMapO_);

    creatorlayer.def("onLeaderboards", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onLeaderboards));
    creatorlayer.def("onLeaderboards", pybind::overload_cast<pybind::function>(&CreatorLayer::onLeaderboards));
    creatorlayer.def("onLeaderboardsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onLeaderboardsO(self, sender); });
    creatorlayer.attr("onLeaderboardsA") = CreatorLayer::onLeaderboardsA;
    creatorlayer.attr("onLeaderboardsN") = "onLeaderboards";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onLeaderboardsA, CreatorLayer::onLeaderboardsH, (LPVOID*)&CreatorLayer::onLeaderboardsO_);

    creatorlayer.def("onOnlineLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onOnlineLevels));
    creatorlayer.def("onOnlineLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onOnlineLevels));
    creatorlayer.def("onOnlineLevelsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onOnlineLevelsO(self, sender); });
    creatorlayer.attr("onOnlineLevelsA") = CreatorLayer::onOnlineLevelsA;
    creatorlayer.attr("onOnlineLevelsN") = "onOnlineLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onOnlineLevelsA, CreatorLayer::onOnlineLevelsH, (LPVOID*)&CreatorLayer::onOnlineLevelsO_);

    creatorlayer.def("onTreasureRoom", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onTreasureRoom));
    creatorlayer.def("onTreasureRoom", pybind::overload_cast<pybind::function>(&CreatorLayer::onTreasureRoom));
    creatorlayer.def("onTreasureRoomO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onTreasureRoomO(self, sender); });
    creatorlayer.attr("onTreasureRoomA") = CreatorLayer::onTreasureRoomA;
    creatorlayer.attr("onTreasureRoomN") = "onTreasureRoom";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onTreasureRoomA, CreatorLayer::onTreasureRoomH, (LPVOID*)&CreatorLayer::onTreasureRoomO_);

    creatorlayer.def("onFeaturedLevels", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onFeaturedLevels));
    creatorlayer.def("onFeaturedLevels", pybind::overload_cast<pybind::function>(&CreatorLayer::onFeaturedLevels));
    creatorlayer.def("onFeaturedLevelsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onFeaturedLevelsO(self, sender); });
    creatorlayer.attr("onFeaturedLevelsA") = CreatorLayer::onFeaturedLevelsA;
    creatorlayer.attr("onFeaturedLevelsN") = "onFeaturedLevels";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onFeaturedLevelsA, CreatorLayer::onFeaturedLevelsH, (LPVOID*)&CreatorLayer::onFeaturedLevelsO_);

    creatorlayer.def("onOnlyFullVersion", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onOnlyFullVersion));
    creatorlayer.def("onOnlyFullVersion", pybind::overload_cast<pybind::function>(&CreatorLayer::onOnlyFullVersion));
    creatorlayer.def("onOnlyFullVersionO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onOnlyFullVersionO(self, sender); });
    creatorlayer.attr("onOnlyFullVersionA") = CreatorLayer::onOnlyFullVersionA;
    creatorlayer.attr("onOnlyFullVersionN") = "onOnlyFullVersion";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onOnlyFullVersionA, CreatorLayer::onOnlyFullVersionH, (LPVOID*)&CreatorLayer::onOnlyFullVersionO_);

    creatorlayer.def("onBack", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onBack));
    creatorlayer.def("onBack", pybind::overload_cast<pybind::function>(&CreatorLayer::onBack));
    creatorlayer.def("onBackO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onBackO(self, sender); });
    creatorlayer.attr("onBackA") = CreatorLayer::onBackA;
    creatorlayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onBackA, CreatorLayer::onBackH, (LPVOID*)&CreatorLayer::onBackO_);

    creatorlayer.def("onPaths", pybind::overload_cast<CreatorLayer*, cocos2d::CCObject*>(&CreatorLayer::onPaths));
    creatorlayer.def("onPaths", pybind::overload_cast<pybind::function>(&CreatorLayer::onPaths));
    creatorlayer.def("onPathsO", [](CreatorLayer* self, cocos2d::CCObject* sender) { return CreatorLayer::onPathsO(self, sender); });
    creatorlayer.attr("onPathsA") = CreatorLayer::onPathsA;
    creatorlayer.attr("onPathsN") = "onPaths";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::onPathsA, CreatorLayer::onPathsH, (LPVOID*)&CreatorLayer::onPathsO_);

    creatorlayer.def("init", pybind::overload_cast<CreatorLayer*>(&CreatorLayer::init));
    creatorlayer.def("init", pybind::overload_cast<pybind::function>(&CreatorLayer::init));
    creatorlayer.def("initO", [](CreatorLayer* self) { return CreatorLayer::initO(self); });
    creatorlayer.attr("initA") = CreatorLayer::initA;
    creatorlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::initA, CreatorLayer::initH, (LPVOID*)&CreatorLayer::initO_);

    creatorlayer.def("keyBackClicked", pybind::overload_cast<CreatorLayer*>(&CreatorLayer::keyBackClicked));
    creatorlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&CreatorLayer::keyBackClicked));
    creatorlayer.def("keyBackClickedO", [](CreatorLayer* self) { return CreatorLayer::keyBackClickedO(self); });
    creatorlayer.attr("keyBackClickedA") = CreatorLayer::keyBackClickedA;
    creatorlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::keyBackClickedA, CreatorLayer::keyBackClickedH, (LPVOID*)&CreatorLayer::keyBackClickedO_);

    creatorlayer.def("sceneWillResume", pybind::overload_cast<CreatorLayer*>(&CreatorLayer::sceneWillResume));
    creatorlayer.def("sceneWillResume", pybind::overload_cast<pybind::function>(&CreatorLayer::sceneWillResume));
    creatorlayer.def("sceneWillResumeO", [](CreatorLayer* self) { return CreatorLayer::sceneWillResumeO(self); });
    creatorlayer.attr("sceneWillResumeA") = CreatorLayer::sceneWillResumeA;
    creatorlayer.attr("sceneWillResumeN") = "sceneWillResume";
    cinnamon::hooks::hookCinnamon((PVOID)CreatorLayer::sceneWillResumeA, CreatorLayer::sceneWillResumeH, (LPVOID*)&CreatorLayer::sceneWillResumeO_);

    auto boomscrolllayerdelegate = pybind::class_<BoomScrollLayerDelegate>(m, "BoomScrollLayerDelegate");
    auto levelselectlayer = pybind::class_<LevelSelectLayer, cocos2d::CCLayer>(m, "LevelSelectLayer");
    levelselectlayer.def("create", pybind::overload_cast<int>(&LevelSelectLayer::create));
    levelselectlayer.def("create", pybind::overload_cast<pybind::function>(&LevelSelectLayer::create));
    levelselectlayer.def("createO", [](int p0) { return LevelSelectLayer::createO(p0); });
    levelselectlayer.attr("createA") = LevelSelectLayer::createA;
    levelselectlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::createA, LevelSelectLayer::createH, (LPVOID*)&LevelSelectLayer::createO_);

    levelselectlayer.def("init", pybind::overload_cast<LevelSelectLayer*, int>(&LevelSelectLayer::init));
    levelselectlayer.def("init", pybind::overload_cast<pybind::function>(&LevelSelectLayer::init));
    levelselectlayer.def("initO", [](LevelSelectLayer* self, int p0) { return LevelSelectLayer::initO(self, p0); });
    levelselectlayer.attr("initA") = LevelSelectLayer::initA;
    levelselectlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::initA, LevelSelectLayer::initH, (LPVOID*)&LevelSelectLayer::initO_);

    levelselectlayer.def("onDownload", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onDownload));
    levelselectlayer.def("onDownload", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onDownload));
    levelselectlayer.def("onDownloadO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onDownloadO(self, sender); });
    levelselectlayer.attr("onDownloadA") = LevelSelectLayer::onDownloadA;
    levelselectlayer.attr("onDownloadN") = "onDownload";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onDownloadA, LevelSelectLayer::onDownloadH, (LPVOID*)&LevelSelectLayer::onDownloadO_);

    levelselectlayer.def("onBack", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onBack));
    levelselectlayer.def("onBack", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onBack));
    levelselectlayer.def("onBackO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onBackO(self, sender); });
    levelselectlayer.attr("onBackA") = LevelSelectLayer::onBackA;
    levelselectlayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onBackA, LevelSelectLayer::onBackH, (LPVOID*)&LevelSelectLayer::onBackO_);

    levelselectlayer.def("onInfo", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onInfo));
    levelselectlayer.def("onInfo", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onInfo));
    levelselectlayer.def("onInfoO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onInfoO(self, sender); });
    levelselectlayer.attr("onInfoA") = LevelSelectLayer::onInfoA;
    levelselectlayer.attr("onInfoN") = "onInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onInfoA, LevelSelectLayer::onInfoH, (LPVOID*)&LevelSelectLayer::onInfoO_);

    levelselectlayer.def("onNext", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onNext));
    levelselectlayer.def("onNext", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onNext));
    levelselectlayer.def("onNextO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onNextO(self, sender); });
    levelselectlayer.attr("onNextA") = LevelSelectLayer::onNextA;
    levelselectlayer.attr("onNextN") = "onNext";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onNextA, LevelSelectLayer::onNextH, (LPVOID*)&LevelSelectLayer::onNextO_);

    levelselectlayer.def("onPlay", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onPlay));
    levelselectlayer.def("onPlay", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onPlay));
    levelselectlayer.def("onPlayO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onPlayO(self, sender); });
    levelselectlayer.attr("onPlayA") = LevelSelectLayer::onPlayA;
    levelselectlayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onPlayA, LevelSelectLayer::onPlayH, (LPVOID*)&LevelSelectLayer::onPlayO_);

    levelselectlayer.def("onPrev", pybind::overload_cast<LevelSelectLayer*, cocos2d::CCObject*>(&LevelSelectLayer::onPrev));
    levelselectlayer.def("onPrev", pybind::overload_cast<pybind::function>(&LevelSelectLayer::onPrev));
    levelselectlayer.def("onPrevO", [](LevelSelectLayer* self, cocos2d::CCObject* sender) { return LevelSelectLayer::onPrevO(self, sender); });
    levelselectlayer.attr("onPrevA") = LevelSelectLayer::onPrevA;
    levelselectlayer.attr("onPrevN") = "onPrev";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::onPrevA, LevelSelectLayer::onPrevH, (LPVOID*)&LevelSelectLayer::onPrevO_);

    levelselectlayer.def("keyBackClicked", pybind::overload_cast<LevelSelectLayer*>(&LevelSelectLayer::keyBackClicked));
    levelselectlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&LevelSelectLayer::keyBackClicked));
    levelselectlayer.def("keyBackClickedO", [](LevelSelectLayer* self) { return LevelSelectLayer::keyBackClickedO(self); });
    levelselectlayer.attr("keyBackClickedA") = LevelSelectLayer::keyBackClickedA;
    levelselectlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::keyBackClickedA, LevelSelectLayer::keyBackClickedH, (LPVOID*)&LevelSelectLayer::keyBackClickedO_);

    levelselectlayer.def("keyDown", pybind::overload_cast<LevelSelectLayer*, cocos2d::enumKeyCodes>(&LevelSelectLayer::keyDown));
    levelselectlayer.def("keyDown", pybind::overload_cast<pybind::function>(&LevelSelectLayer::keyDown));
    levelselectlayer.def("keyDownO", [](LevelSelectLayer* self, cocos2d::enumKeyCodes p0) { return LevelSelectLayer::keyDownO(self, p0); });
    levelselectlayer.attr("keyDownA") = LevelSelectLayer::keyDownA;
    levelselectlayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)LevelSelectLayer::keyDownA, LevelSelectLayer::keyDownH, (LPVOID*)&LevelSelectLayer::keyDownO_);

    auto levelmanagerdelegate = pybind::class_<LevelManagerDelegate>(m, "LevelManagerDelegate");
    auto gauntletlayer = pybind::class_<GauntletLayer, cocos2d::CCLayer>(m, "GauntletLayer");
    gauntletlayer.def("create", pybind::overload_cast<GauntletType>(&GauntletLayer::create));
    gauntletlayer.def("create", pybind::overload_cast<pybind::function>(&GauntletLayer::create));
    gauntletlayer.def("createO", [](GauntletType p0) { return GauntletLayer::createO(p0); });
    gauntletlayer.attr("createA") = GauntletLayer::createA;
    gauntletlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletLayer::createA, GauntletLayer::createH, (LPVOID*)&GauntletLayer::createO_);

    gauntletlayer.def("init", pybind::overload_cast<GauntletLayer*, GauntletType>(&GauntletLayer::init));
    gauntletlayer.def("init", pybind::overload_cast<pybind::function>(&GauntletLayer::init));
    gauntletlayer.def("initO", [](GauntletLayer* self, GauntletType p0) { return GauntletLayer::initO(self, p0); });
    gauntletlayer.attr("initA") = GauntletLayer::initA;
    gauntletlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletLayer::initA, GauntletLayer::initH, (LPVOID*)&GauntletLayer::initO_);

    gauntletlayer.def("onBack", pybind::overload_cast<GauntletLayer*, cocos2d::CCObject*>(&GauntletLayer::onBack));
    gauntletlayer.def("onBack", pybind::overload_cast<pybind::function>(&GauntletLayer::onBack));
    gauntletlayer.def("onBackO", [](GauntletLayer* self, cocos2d::CCObject* sender) { return GauntletLayer::onBackO(self, sender); });
    gauntletlayer.attr("onBackA") = GauntletLayer::onBackA;
    gauntletlayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletLayer::onBackA, GauntletLayer::onBackH, (LPVOID*)&GauntletLayer::onBackO_);

    gauntletlayer.def("onLevel", pybind::overload_cast<GauntletLayer*, cocos2d::CCObject*>(&GauntletLayer::onLevel));
    gauntletlayer.def("onLevel", pybind::overload_cast<pybind::function>(&GauntletLayer::onLevel));
    gauntletlayer.def("onLevelO", [](GauntletLayer* self, cocos2d::CCObject* sender) { return GauntletLayer::onLevelO(self, sender); });
    gauntletlayer.attr("onLevelA") = GauntletLayer::onLevelA;
    gauntletlayer.attr("onLevelN") = "onLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletLayer::onLevelA, GauntletLayer::onLevelH, (LPVOID*)&GauntletLayer::onLevelO_);

    gauntletlayer.def("keyBackClicked", pybind::overload_cast<GauntletLayer*>(&GauntletLayer::keyBackClicked));
    gauntletlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&GauntletLayer::keyBackClicked));
    gauntletlayer.def("keyBackClickedO", [](GauntletLayer* self) { return GauntletLayer::keyBackClickedO(self); });
    gauntletlayer.attr("keyBackClickedA") = GauntletLayer::keyBackClickedA;
    gauntletlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)GauntletLayer::keyBackClickedA, GauntletLayer::keyBackClickedH, (LPVOID*)&GauntletLayer::keyBackClickedO_);

    auto textarea = pybind::class_<TextArea, cocos2d::CCSprite>(m, "TextArea");
    textarea.def("create", pybind::overload_cast<gd::string, char const*, float, float, cocos2d::CCPoint, float, bool>(&TextArea::create));
    textarea.def("create", pybind::overload_cast<pybind::function>(&TextArea::create));
    textarea.def("createO", [](gd::string p0, char const* p1, float p2, float p3, cocos2d::CCPoint p4, float p5, bool p6) { return TextArea::createO(p0, p1, p2, p3, p4, p5, p6); });
    textarea.attr("createA") = TextArea::createA;
    textarea.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::createA, TextArea::createH, (LPVOID*)&TextArea::createO_);

    textarea.def("init", pybind::overload_cast<TextArea*, gd::string, char const*, float, float, cocos2d::CCPoint, float, bool>(&TextArea::init));
    textarea.def("init", pybind::overload_cast<pybind::function>(&TextArea::init));
    textarea.def("initO", [](TextArea* self, gd::string p0, char const* p1, float p2, float p3, cocos2d::CCPoint p4, float p5, bool p6) { return TextArea::initO(self, p0, p1, p2, p3, p4, p5, p6); });
    textarea.attr("initA") = TextArea::initA;
    textarea.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::initA, TextArea::initH, (LPVOID*)&TextArea::initO_);

    textarea.def("setIgnoreColorCode", pybind::overload_cast<TextArea*, bool>(&TextArea::setIgnoreColorCode));
    textarea.def("setIgnoreColorCode", pybind::overload_cast<pybind::function>(&TextArea::setIgnoreColorCode));
    textarea.def("setIgnoreColorCodeO", [](TextArea* self, bool p0) { return TextArea::setIgnoreColorCodeO(self, p0); });
    textarea.attr("setIgnoreColorCodeA") = TextArea::setIgnoreColorCodeA;
    textarea.attr("setIgnoreColorCodeN") = "setIgnoreColorCode";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::setIgnoreColorCodeA, TextArea::setIgnoreColorCodeH, (LPVOID*)&TextArea::setIgnoreColorCodeO_);

    textarea.def("setString", pybind::overload_cast<TextArea*, gd::string>(&TextArea::setString));
    textarea.def("setString", pybind::overload_cast<pybind::function>(&TextArea::setString));
    textarea.def("setStringO", [](TextArea* self, gd::string p0) { return TextArea::setStringO(self, p0); });
    textarea.attr("setStringA") = TextArea::setStringA;
    textarea.attr("setStringN") = "setString";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::setStringA, TextArea::setStringH, (LPVOID*)&TextArea::setStringO_);

    textarea.def("update", pybind::overload_cast<TextArea*, float>(&TextArea::update));
    textarea.def("update", pybind::overload_cast<pybind::function>(&TextArea::update));
    textarea.def("updateO", [](TextArea* self, float p0) { return TextArea::updateO(self, p0); });
    textarea.attr("updateA") = TextArea::updateA;
    textarea.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::updateA, TextArea::updateH, (LPVOID*)&TextArea::updateO_);

    textarea.def("draw", pybind::overload_cast<TextArea*>(&TextArea::draw));
    textarea.def("draw", pybind::overload_cast<pybind::function>(&TextArea::draw));
    textarea.def("drawO", [](TextArea* self) { return TextArea::drawO(self); });
    textarea.attr("drawA") = TextArea::drawA;
    textarea.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::drawA, TextArea::drawH, (LPVOID*)&TextArea::drawO_);

    textarea.def("setOpacity", pybind::overload_cast<TextArea*, unsigned char>(&TextArea::setOpacity));
    textarea.def("setOpacity", pybind::overload_cast<pybind::function>(&TextArea::setOpacity));
    textarea.def("setOpacityO", [](TextArea* self, unsigned char p0) { return TextArea::setOpacityO(self, p0); });
    textarea.attr("setOpacityA") = TextArea::setOpacityA;
    textarea.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)TextArea::setOpacityA, TextArea::setOpacityH, (LPVOID*)&TextArea::setOpacityO_);

    auto slider = pybind::class_<Slider, cocos2d::CCLayer>(m, "Slider");
    slider.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler>(&Slider::create));
    slider.def("create", pybind::overload_cast<pybind::function>(&Slider::create));
    slider.def("createO", [](cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1) { return Slider::createO(p0, p1); });
    slider.attr("createA") = Slider::createA;
    slider.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::createA, Slider::createH, (LPVOID*)&Slider::createO_);

    slider.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler, float>(&Slider::create));
    slider.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, char const*, char const*, float>(&Slider::create));
    slider.def("init", pybind::overload_cast<Slider*, cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, char const*, char const*, float>(&Slider::init));
    slider.def("init", pybind::overload_cast<pybind::function>(&Slider::init));
    slider.def("initO", [](Slider* self, cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3, char const* p4, char const* p5, float p6) { return Slider::initO(self, p0, p1, p2, p3, p4, p5, p6); });
    slider.attr("initA") = Slider::initA;
    slider.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::initA, Slider::initH, (LPVOID*)&Slider::initO_);

    slider.def("getThumb", pybind::overload_cast<Slider*>(&Slider::getThumb));
    slider.def("getThumb", pybind::overload_cast<pybind::function>(&Slider::getThumb));
    slider.def("getThumbO", [](Slider* self) { return Slider::getThumbO(self); });
    slider.attr("getThumbA") = Slider::getThumbA;
    slider.attr("getThumbN") = "getThumb";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::getThumbA, Slider::getThumbH, (LPVOID*)&Slider::getThumbO_);

    slider.def("getValue", pybind::overload_cast<Slider*>(&Slider::getValue));
    slider.def("getValue", pybind::overload_cast<pybind::function>(&Slider::getValue));
    slider.def("getValueO", [](Slider* self) { return Slider::getValueO(self); });
    slider.attr("getValueA") = Slider::getValueA;
    slider.attr("getValueN") = "getValue";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::getValueA, Slider::getValueH, (LPVOID*)&Slider::getValueO_);

    slider.def("setRotated", pybind::overload_cast<Slider*, bool>(&Slider::setRotated));
    slider.def("setRotated", pybind::overload_cast<pybind::function>(&Slider::setRotated));
    slider.def("setRotatedO", [](Slider* self, bool p0) { return Slider::setRotatedO(self, p0); });
    slider.attr("setRotatedA") = Slider::setRotatedA;
    slider.attr("setRotatedN") = "setRotated";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::setRotatedA, Slider::setRotatedH, (LPVOID*)&Slider::setRotatedO_);

    slider.def("setMaxOffset", pybind::overload_cast<Slider*, float>(&Slider::setMaxOffset));
    slider.def("setMaxOffset", pybind::overload_cast<pybind::function>(&Slider::setMaxOffset));
    slider.def("setMaxOffsetO", [](Slider* self, float p0) { return Slider::setMaxOffsetO(self, p0); });
    slider.attr("setMaxOffsetA") = Slider::setMaxOffsetA;
    slider.attr("setMaxOffsetN") = "setMaxOffset";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::setMaxOffsetA, Slider::setMaxOffsetH, (LPVOID*)&Slider::setMaxOffsetO_);

    slider.def("setLiveDragging", pybind::overload_cast<Slider*, bool>(&Slider::setLiveDragging));
    slider.def("setLiveDragging", pybind::overload_cast<pybind::function>(&Slider::setLiveDragging));
    slider.def("setLiveDraggingO", [](Slider* self, bool p0) { return Slider::setLiveDraggingO(self, p0); });
    slider.attr("setLiveDraggingA") = Slider::setLiveDraggingA;
    slider.attr("setLiveDraggingN") = "setLiveDragging";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::setLiveDraggingA, Slider::setLiveDraggingH, (LPVOID*)&Slider::setLiveDraggingO_);

    slider.def("setBarVisibility", pybind::overload_cast<Slider*, bool>(&Slider::setBarVisibility));
    slider.def("setBarVisibility", pybind::overload_cast<pybind::function>(&Slider::setBarVisibility));
    slider.def("setBarVisibilityO", [](Slider* self, bool p0) { return Slider::setBarVisibilityO(self, p0); });
    slider.attr("setBarVisibilityA") = Slider::setBarVisibilityA;
    slider.attr("setBarVisibilityN") = "setBarVisibility";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::setBarVisibilityA, Slider::setBarVisibilityH, (LPVOID*)&Slider::setBarVisibilityO_);

    slider.def("setValue", pybind::overload_cast<Slider*, float>(&Slider::setValue));
    slider.def("setValue", pybind::overload_cast<pybind::function>(&Slider::setValue));
    slider.def("setValueO", [](Slider* self, float p0) { return Slider::setValueO(self, p0); });
    slider.attr("setValueA") = Slider::setValueA;
    slider.attr("setValueN") = "setValue";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::setValueA, Slider::setValueH, (LPVOID*)&Slider::setValueO_);

    slider.def("updateBar", pybind::overload_cast<Slider*>(&Slider::updateBar));
    slider.def("updateBar", pybind::overload_cast<pybind::function>(&Slider::updateBar));
    slider.def("updateBarO", [](Slider* self) { return Slider::updateBarO(self); });
    slider.attr("updateBarA") = Slider::updateBarA;
    slider.attr("updateBarN") = "updateBar";
    cinnamon::hooks::hookCinnamon((PVOID)Slider::updateBarA, Slider::updateBarH, (LPVOID*)&Slider::updateBarO_);

    auto ccindexpath = pybind::class_<CCIndexPath, cocos2d::CCObject>(m, "CCIndexPath");
    auto ccscrolllayerext = pybind::class_<CCScrollLayerExt, cocos2d::CCLayer>(m, "CCScrollLayerExt");
    ccscrolllayerext.def("setContentOffset", pybind::overload_cast<CCScrollLayerExt*, cocos2d::CCPoint, bool>(&CCScrollLayerExt::setContentOffset));
    ccscrolllayerext.def("setContentOffset", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::setContentOffset));
    ccscrolllayerext.def("setContentOffsetO", [](CCScrollLayerExt* self, cocos2d::CCPoint p0, bool p1) { return CCScrollLayerExt::setContentOffsetO(self, p0, p1); });
    ccscrolllayerext.attr("setContentOffsetA") = CCScrollLayerExt::setContentOffsetA;
    ccscrolllayerext.attr("setContentOffsetN") = "setContentOffset";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::setContentOffsetA, CCScrollLayerExt::setContentOffsetH, (LPVOID*)&CCScrollLayerExt::setContentOffsetO_);

    ccscrolllayerext.def("setContentLayerSize", pybind::overload_cast<CCScrollLayerExt*, cocos2d::CCSize>(&CCScrollLayerExt::setContentLayerSize));
    ccscrolllayerext.def("setContentLayerSize", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::setContentLayerSize));
    ccscrolllayerext.def("setContentLayerSizeO", [](CCScrollLayerExt* self, cocos2d::CCSize p0) { return CCScrollLayerExt::setContentLayerSizeO(self, p0); });
    ccscrolllayerext.attr("setContentLayerSizeA") = CCScrollLayerExt::setContentLayerSizeA;
    ccscrolllayerext.attr("setContentLayerSizeN") = "setContentLayerSize";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::setContentLayerSizeA, CCScrollLayerExt::setContentLayerSizeH, (LPVOID*)&CCScrollLayerExt::setContentLayerSizeO_);

    ccscrolllayerext.def("moveToTopWithOffset", pybind::overload_cast<CCScrollLayerExt*, float>(&CCScrollLayerExt::moveToTopWithOffset));
    ccscrolllayerext.def("moveToTopWithOffset", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::moveToTopWithOffset));
    ccscrolllayerext.def("moveToTopWithOffsetO", [](CCScrollLayerExt* self, float p0) { return CCScrollLayerExt::moveToTopWithOffsetO(self, p0); });
    ccscrolllayerext.attr("moveToTopWithOffsetA") = CCScrollLayerExt::moveToTopWithOffsetA;
    ccscrolllayerext.attr("moveToTopWithOffsetN") = "moveToTopWithOffset";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::moveToTopWithOffsetA, CCScrollLayerExt::moveToTopWithOffsetH, (LPVOID*)&CCScrollLayerExt::moveToTopWithOffsetO_);

    ccscrolllayerext.def("moveToTop", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::moveToTop));
    ccscrolllayerext.def("moveToTop", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::moveToTop));
    ccscrolllayerext.def("moveToTopO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::moveToTopO(self); });
    ccscrolllayerext.attr("moveToTopA") = CCScrollLayerExt::moveToTopA;
    ccscrolllayerext.attr("moveToTopN") = "moveToTop";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::moveToTopA, CCScrollLayerExt::moveToTopH, (LPVOID*)&CCScrollLayerExt::moveToTopO_);

    ccscrolllayerext.def("visit", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::visit));
    ccscrolllayerext.def("visit", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::visit));
    ccscrolllayerext.def("visitO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::visitO(self); });
    ccscrolllayerext.attr("visitA") = CCScrollLayerExt::visitA;
    ccscrolllayerext.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::visitA, CCScrollLayerExt::visitH, (LPVOID*)&CCScrollLayerExt::visitO_);

    ccscrolllayerext.def("registerWithTouchDispatcher", pybind::overload_cast<CCScrollLayerExt*>(&CCScrollLayerExt::registerWithTouchDispatcher));
    ccscrolllayerext.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&CCScrollLayerExt::registerWithTouchDispatcher));
    ccscrolllayerext.def("registerWithTouchDispatcherO", [](CCScrollLayerExt* self) { return CCScrollLayerExt::registerWithTouchDispatcherO(self); });
    ccscrolllayerext.attr("registerWithTouchDispatcherA") = CCScrollLayerExt::registerWithTouchDispatcherA;
    ccscrolllayerext.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)CCScrollLayerExt::registerWithTouchDispatcherA, CCScrollLayerExt::registerWithTouchDispatcherH, (LPVOID*)&CCScrollLayerExt::registerWithTouchDispatcherO_);

    auto ccscrolllayerextdelegate = pybind::class_<CCScrollLayerExtDelegate>(m, "CCScrollLayerExtDelegate");
    auto tableview = pybind::class_<TableView, CCScrollLayerExt>(m, "TableView");
    tableview.def("create", pybind::overload_cast<TableViewDelegate*, TableViewDataSource*, TableViewCellDelegate*, cocos2d::CCRect>(&TableView::create));
    tableview.def("create", pybind::overload_cast<pybind::function>(&TableView::create));
    tableview.def("createO", [](TableViewDelegate* p0, TableViewDataSource* p1, TableViewCellDelegate* p2, cocos2d::CCRect p3) { return TableView::createO(p0, p1, p2, p3); });
    tableview.attr("createA") = TableView::createA;
    tableview.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::createA, TableView::createH, (LPVOID*)&TableView::createO_);

    tableview.def("reloadData", pybind::overload_cast<TableView*>(&TableView::reloadData));
    tableview.def("reloadData", pybind::overload_cast<pybind::function>(&TableView::reloadData));
    tableview.def("reloadDataO", [](TableView* self) { return TableView::reloadDataO(self); });
    tableview.attr("reloadDataA") = TableView::reloadDataA;
    tableview.attr("reloadDataN") = "reloadData";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::reloadDataA, TableView::reloadDataH, (LPVOID*)&TableView::reloadDataO_);

    tableview.def("isDuplicateIndexPath", pybind::overload_cast<TableView*, CCIndexPath&>(&TableView::isDuplicateIndexPath));
    tableview.def("isDuplicateIndexPath", pybind::overload_cast<pybind::function>(&TableView::isDuplicateIndexPath));
    tableview.def("isDuplicateIndexPathO", [](TableView* self, CCIndexPath& p0) { return TableView::isDuplicateIndexPathO(self, p0); });
    tableview.attr("isDuplicateIndexPathA") = TableView::isDuplicateIndexPathA;
    tableview.attr("isDuplicateIndexPathN") = "isDuplicateIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::isDuplicateIndexPathA, TableView::isDuplicateIndexPathH, (LPVOID*)&TableView::isDuplicateIndexPathO_);

    tableview.def("isDuplicateInVisibleCellArray", pybind::overload_cast<TableView*, CCIndexPath*>(&TableView::isDuplicateInVisibleCellArray));
    tableview.def("isDuplicateInVisibleCellArray", pybind::overload_cast<pybind::function>(&TableView::isDuplicateInVisibleCellArray));
    tableview.def("isDuplicateInVisibleCellArrayO", [](TableView* self, CCIndexPath* p0) { return TableView::isDuplicateInVisibleCellArrayO(self, p0); });
    tableview.attr("isDuplicateInVisibleCellArrayA") = TableView::isDuplicateInVisibleCellArrayA;
    tableview.attr("isDuplicateInVisibleCellArrayN") = "isDuplicateInVisibleCellArray";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::isDuplicateInVisibleCellArrayA, TableView::isDuplicateInVisibleCellArrayH, (LPVOID*)&TableView::isDuplicateInVisibleCellArrayO_);

    tableview.def("onEnter", pybind::overload_cast<TableView*>(&TableView::onEnter));
    tableview.def("onEnter", pybind::overload_cast<pybind::function>(&TableView::onEnter));
    tableview.def("onEnterO", [](TableView* self) { return TableView::onEnterO(self); });
    tableview.attr("onEnterA") = TableView::onEnterA;
    tableview.attr("onEnterN") = "onEnter";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::onEnterA, TableView::onEnterH, (LPVOID*)&TableView::onEnterO_);

    tableview.def("onExit", pybind::overload_cast<TableView*>(&TableView::onExit));
    tableview.def("onExit", pybind::overload_cast<pybind::function>(&TableView::onExit));
    tableview.def("onExitO", [](TableView* self) { return TableView::onExitO(self); });
    tableview.attr("onExitA") = TableView::onExitA;
    tableview.attr("onExitN") = "onExit";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::onExitA, TableView::onExitH, (LPVOID*)&TableView::onExitO_);

    tableview.def("registerWithTouchDispatcher", pybind::overload_cast<TableView*>(&TableView::registerWithTouchDispatcher));
    tableview.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&TableView::registerWithTouchDispatcher));
    tableview.def("registerWithTouchDispatcherO", [](TableView* self) { return TableView::registerWithTouchDispatcherO(self); });
    tableview.attr("registerWithTouchDispatcherA") = TableView::registerWithTouchDispatcherA;
    tableview.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::registerWithTouchDispatcherA, TableView::registerWithTouchDispatcherH, (LPVOID*)&TableView::registerWithTouchDispatcherO_);

    tableview.def("scrollWheel", pybind::overload_cast<TableView*, float, float>(&TableView::scrollWheel));
    tableview.def("scrollWheel", pybind::overload_cast<pybind::function>(&TableView::scrollWheel));
    tableview.def("scrollWheelO", [](TableView* self, float p0, float p1) { return TableView::scrollWheelO(self, p0, p1); });
    tableview.attr("scrollWheelA") = TableView::scrollWheelA;
    tableview.attr("scrollWheelN") = "scrollWheel";
    cinnamon::hooks::hookCinnamon((PVOID)TableView::scrollWheelA, TableView::scrollWheelH, (LPVOID*)&TableView::scrollWheelO_);

    auto tableviewcell = pybind::class_<TableViewCell, cocos2d::CCLayer>(m, "TableViewCell");
    auto tableviewdelegate = pybind::class_<TableViewDelegate>(m, "TableViewDelegate");
    auto tableviewdatasource = pybind::class_<TableViewDataSource>(m, "TableViewDataSource");
    auto tableviewcelldelegate = pybind::class_<TableViewCellDelegate>(m, "TableViewCellDelegate");
    auto boomlistview = pybind::class_<BoomListView, cocos2d::CCLayer>(m, "BoomListView");
    boomlistview.def("create", pybind::overload_cast<cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType>(&BoomListView::create));
    boomlistview.def("create", pybind::overload_cast<pybind::function>(&BoomListView::create));
    boomlistview.def("createO", [](cocos2d::CCArray* p0, TableViewCellDelegate* p1, float p2, float p3, int p4, BoomListType p5) { return BoomListView::createO(p0, p1, p2, p3, p4, p5); });
    boomlistview.attr("createA") = BoomListView::createA;
    boomlistview.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::createA, BoomListView::createH, (LPVOID*)&BoomListView::createO_);

    boomlistview.def("init", pybind::overload_cast<BoomListView*, cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType, float>(&BoomListView::init));
    boomlistview.def("init", pybind::overload_cast<pybind::function>(&BoomListView::init));
    boomlistview.def("initO", [](BoomListView* self, cocos2d::CCArray* p0, TableViewCellDelegate* p1, float p2, float p3, int p4, BoomListType p5, float p6) { return BoomListView::initO(self, p0, p1, p2, p3, p4, p5, p6); });
    boomlistview.attr("initA") = BoomListView::initA;
    boomlistview.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::initA, BoomListView::initH, (LPVOID*)&BoomListView::initO_);

    boomlistview.def("setupList", pybind::overload_cast<BoomListView*, float>(&BoomListView::setupList));
    boomlistview.def("setupList", pybind::overload_cast<pybind::function>(&BoomListView::setupList));
    boomlistview.def("setupListO", [](BoomListView* self, float p0) { return BoomListView::setupListO(self, p0); });
    boomlistview.attr("setupListA") = BoomListView::setupListA;
    boomlistview.attr("setupListN") = "setupList";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::setupListA, BoomListView::setupListH, (LPVOID*)&BoomListView::setupListO_);

    boomlistview.def("cellHeightForRowAtIndexPath", pybind::overload_cast<BoomListView*, CCIndexPath&, TableView*>(&BoomListView::cellHeightForRowAtIndexPath));
    boomlistview.def("cellHeightForRowAtIndexPath", pybind::overload_cast<pybind::function>(&BoomListView::cellHeightForRowAtIndexPath));
    boomlistview.def("cellHeightForRowAtIndexPathO", [](BoomListView* self, CCIndexPath& p0, TableView* p1) { return BoomListView::cellHeightForRowAtIndexPathO(self, p0, p1); });
    boomlistview.attr("cellHeightForRowAtIndexPathA") = BoomListView::cellHeightForRowAtIndexPathA;
    boomlistview.attr("cellHeightForRowAtIndexPathN") = "cellHeightForRowAtIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::cellHeightForRowAtIndexPathA, BoomListView::cellHeightForRowAtIndexPathH, (LPVOID*)&BoomListView::cellHeightForRowAtIndexPathO_);

    boomlistview.def("numberOfRowsInSection", pybind::overload_cast<BoomListView*, unsigned int, TableView*>(&BoomListView::numberOfRowsInSection));
    boomlistview.def("numberOfRowsInSection", pybind::overload_cast<pybind::function>(&BoomListView::numberOfRowsInSection));
    boomlistview.def("numberOfRowsInSectionO", [](BoomListView* self, unsigned int p0, TableView* p1) { return BoomListView::numberOfRowsInSectionO(self, p0, p1); });
    boomlistview.attr("numberOfRowsInSectionA") = BoomListView::numberOfRowsInSectionA;
    boomlistview.attr("numberOfRowsInSectionN") = "numberOfRowsInSection";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::numberOfRowsInSectionA, BoomListView::numberOfRowsInSectionH, (LPVOID*)&BoomListView::numberOfRowsInSectionO_);

    boomlistview.def("numberOfSectionsInTableView", pybind::overload_cast<BoomListView*, TableView*>(&BoomListView::numberOfSectionsInTableView));
    boomlistview.def("numberOfSectionsInTableView", pybind::overload_cast<pybind::function>(&BoomListView::numberOfSectionsInTableView));
    boomlistview.def("numberOfSectionsInTableViewO", [](BoomListView* self, TableView* p0) { return BoomListView::numberOfSectionsInTableViewO(self, p0); });
    boomlistview.attr("numberOfSectionsInTableViewA") = BoomListView::numberOfSectionsInTableViewA;
    boomlistview.attr("numberOfSectionsInTableViewN") = "numberOfSectionsInTableView";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::numberOfSectionsInTableViewA, BoomListView::numberOfSectionsInTableViewH, (LPVOID*)&BoomListView::numberOfSectionsInTableViewO_);

    boomlistview.def("cellForRowAtIndexPath", pybind::overload_cast<BoomListView*, CCIndexPath&, TableView*>(&BoomListView::cellForRowAtIndexPath));
    boomlistview.def("cellForRowAtIndexPath", pybind::overload_cast<pybind::function>(&BoomListView::cellForRowAtIndexPath));
    boomlistview.def("cellForRowAtIndexPathO", [](BoomListView* self, CCIndexPath& p0, TableView* p1) { return BoomListView::cellForRowAtIndexPathO(self, p0, p1); });
    boomlistview.attr("cellForRowAtIndexPathA") = BoomListView::cellForRowAtIndexPathA;
    boomlistview.attr("cellForRowAtIndexPathN") = "cellForRowAtIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::cellForRowAtIndexPathA, BoomListView::cellForRowAtIndexPathH, (LPVOID*)&BoomListView::cellForRowAtIndexPathO_);

    boomlistview.def("TableViewCommitCellEditingStyleForRowAtIndexPath", pybind::overload_cast<BoomListView*, TableView*, TableViewCellEditingStyle, CCIndexPath&>(&BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPath));
    boomlistview.def("TableViewCommitCellEditingStyleForRowAtIndexPath", pybind::overload_cast<pybind::function>(&BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPath));
    boomlistview.def("TableViewCommitCellEditingStyleForRowAtIndexPathO", [](BoomListView* self, TableView* p0, TableViewCellEditingStyle p1, CCIndexPath& p2) { return BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPathO(self, p0, p1, p2); });
    boomlistview.attr("TableViewCommitCellEditingStyleForRowAtIndexPathA") = BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPathA;
    boomlistview.attr("TableViewCommitCellEditingStyleForRowAtIndexPathN") = "TableViewCommitCellEditingStyleForRowAtIndexPath";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPathA, BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPathH, (LPVOID*)&BoomListView::TableViewCommitCellEditingStyleForRowAtIndexPathO_);

    boomlistview.def("getListCell", pybind::overload_cast<BoomListView*, const char*>(&BoomListView::getListCell));
    boomlistview.def("getListCell", pybind::overload_cast<pybind::function>(&BoomListView::getListCell));
    boomlistview.def("getListCellO", [](BoomListView* self, const char* p0) { return BoomListView::getListCellO(self, p0); });
    boomlistview.attr("getListCellA") = BoomListView::getListCellA;
    boomlistview.attr("getListCellN") = "getListCell";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::getListCellA, BoomListView::getListCellH, (LPVOID*)&BoomListView::getListCellO_);

    boomlistview.def("loadCell", pybind::overload_cast<BoomListView*, TableViewCell*, int>(&BoomListView::loadCell));
    boomlistview.def("loadCell", pybind::overload_cast<pybind::function>(&BoomListView::loadCell));
    boomlistview.def("loadCellO", [](BoomListView* self, TableViewCell* p0, int p1) { return BoomListView::loadCellO(self, p0, p1); });
    boomlistview.attr("loadCellA") = BoomListView::loadCellA;
    boomlistview.attr("loadCellN") = "loadCell";
    cinnamon::hooks::hookCinnamon((PVOID)BoomListView::loadCellA, BoomListView::loadCellH, (LPVOID*)&BoomListView::loadCellO_);

    auto customlistview = pybind::class_<CustomListView, BoomListView>(m, "CustomListView");
    customlistview.def("create", pybind::overload_cast<cocos2d::CCArray*, BoomListType, float, float>(&CustomListView::create));
    customlistview.def("create", pybind::overload_cast<cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType, float>(&CustomListView::create));
    customlistview.def("create", pybind::overload_cast<pybind::function>(&CustomListView::create));
    customlistview.def("createO", [](cocos2d::CCArray* p0, TableViewCellDelegate* p1, float p2, float p3, int p4, BoomListType p5, float p6) { return CustomListView::createO(p0, p1, p2, p3, p4, p5, p6); });
    customlistview.attr("createA") = CustomListView::createA;
    customlistview.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::createA, CustomListView::createH, (LPVOID*)&CustomListView::createO_);

    customlistview.def("getListCell", pybind::overload_cast<CustomListView*, char const*>(&CustomListView::getListCell));
    customlistview.def("getListCell", pybind::overload_cast<pybind::function>(&CustomListView::getListCell));
    customlistview.def("getListCellO", [](CustomListView* self, char const* p0) { return CustomListView::getListCellO(self, p0); });
    customlistview.attr("getListCellA") = CustomListView::getListCellA;
    customlistview.attr("getListCellN") = "getListCell";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::getListCellA, CustomListView::getListCellH, (LPVOID*)&CustomListView::getListCellO_);

    customlistview.def("getCellHeight", pybind::overload_cast<CustomListView*, BoomListType>(&CustomListView::getCellHeight));
    customlistview.def("getCellHeight", pybind::overload_cast<pybind::function>(&CustomListView::getCellHeight));
    customlistview.def("getCellHeightO", [](CustomListView* self, BoomListType p0) { return CustomListView::getCellHeightO(self, p0); });
    customlistview.attr("getCellHeightA") = CustomListView::getCellHeightA;
    customlistview.attr("getCellHeightN") = "getCellHeight";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::getCellHeightA, CustomListView::getCellHeightH, (LPVOID*)&CustomListView::getCellHeightO_);

    customlistview.def("loadCell", pybind::overload_cast<CustomListView*, TableViewCell*, int>(&CustomListView::loadCell));
    customlistview.def("loadCell", pybind::overload_cast<pybind::function>(&CustomListView::loadCell));
    customlistview.def("loadCellO", [](CustomListView* self, TableViewCell* p0, int p1) { return CustomListView::loadCellO(self, p0, p1); });
    customlistview.attr("loadCellA") = CustomListView::loadCellA;
    customlistview.attr("loadCellN") = "loadCell";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::loadCellA, CustomListView::loadCellH, (LPVOID*)&CustomListView::loadCellO_);

    customlistview.def("setupList", pybind::overload_cast<CustomListView*, float>(&CustomListView::setupList));
    customlistview.def("setupList", pybind::overload_cast<pybind::function>(&CustomListView::setupList));
    customlistview.def("setupListO", [](CustomListView* self, float p0) { return CustomListView::setupListO(self, p0); });
    customlistview.attr("setupListA") = CustomListView::setupListA;
    customlistview.attr("setupListN") = "setupList";
    cinnamon::hooks::hookCinnamon((PVOID)CustomListView::setupListA, CustomListView::setupListH, (LPVOID*)&CustomListView::setupListO_);

    auto ccmenuitemtoggler = pybind::class_<CCMenuItemToggler, cocos2d::CCMenuItem>(m, "CCMenuItemToggler");
    ccmenuitemtoggler.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler>(&CCMenuItemToggler::create));
    ccmenuitemtoggler.def("create", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::create));
    ccmenuitemtoggler.def("createO", [](cocos2d::CCNode* offSpr, cocos2d::CCNode* onSpr, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) { return CCMenuItemToggler::createO(offSpr, onSpr, target, callback); });
    ccmenuitemtoggler.attr("createA") = CCMenuItemToggler::createA;
    ccmenuitemtoggler.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::createA, CCMenuItemToggler::createH, (LPVOID*)&CCMenuItemToggler::createO_);

    ccmenuitemtoggler.def("init", pybind::overload_cast<CCMenuItemToggler*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler>(&CCMenuItemToggler::init));
    ccmenuitemtoggler.def("init", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::init));
    ccmenuitemtoggler.def("initO", [](CCMenuItemToggler* self, cocos2d::CCNode* off, cocos2d::CCNode* on, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler handler) { return CCMenuItemToggler::initO(self, off, on, target, handler); });
    ccmenuitemtoggler.attr("initA") = CCMenuItemToggler::initA;
    ccmenuitemtoggler.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::initA, CCMenuItemToggler::initH, (LPVOID*)&CCMenuItemToggler::initO_);

    ccmenuitemtoggler.def("setSizeMult", pybind::overload_cast<CCMenuItemToggler*, float>(&CCMenuItemToggler::setSizeMult));
    ccmenuitemtoggler.def("setSizeMult", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::setSizeMult));
    ccmenuitemtoggler.def("setSizeMultO", [](CCMenuItemToggler* self, float p0) { return CCMenuItemToggler::setSizeMultO(self, p0); });
    ccmenuitemtoggler.attr("setSizeMultA") = CCMenuItemToggler::setSizeMultA;
    ccmenuitemtoggler.attr("setSizeMultN") = "setSizeMult";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::setSizeMultA, CCMenuItemToggler::setSizeMultH, (LPVOID*)&CCMenuItemToggler::setSizeMultO_);

    ccmenuitemtoggler.def("toggle", pybind::overload_cast<CCMenuItemToggler*, bool>(&CCMenuItemToggler::toggle));
    ccmenuitemtoggler.def("toggle", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::toggle));
    ccmenuitemtoggler.def("toggleO", [](CCMenuItemToggler* self, bool p0) { return CCMenuItemToggler::toggleO(self, p0); });
    ccmenuitemtoggler.attr("toggleA") = CCMenuItemToggler::toggleA;
    ccmenuitemtoggler.attr("toggleN") = "toggle";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::toggleA, CCMenuItemToggler::toggleH, (LPVOID*)&CCMenuItemToggler::toggleO_);

    ccmenuitemtoggler.def("activate", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::activate));
    ccmenuitemtoggler.def("activate", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::activate));
    ccmenuitemtoggler.def("activateO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::activateO(self); });
    ccmenuitemtoggler.attr("activateA") = CCMenuItemToggler::activateA;
    ccmenuitemtoggler.attr("activateN") = "activate";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::activateA, CCMenuItemToggler::activateH, (LPVOID*)&CCMenuItemToggler::activateO_);

    ccmenuitemtoggler.def("selected", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::selected));
    ccmenuitemtoggler.def("selected", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::selected));
    ccmenuitemtoggler.def("selectedO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::selectedO(self); });
    ccmenuitemtoggler.attr("selectedA") = CCMenuItemToggler::selectedA;
    ccmenuitemtoggler.attr("selectedN") = "selected";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::selectedA, CCMenuItemToggler::selectedH, (LPVOID*)&CCMenuItemToggler::selectedO_);

    ccmenuitemtoggler.def("unselected", pybind::overload_cast<CCMenuItemToggler*>(&CCMenuItemToggler::unselected));
    ccmenuitemtoggler.def("unselected", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::unselected));
    ccmenuitemtoggler.def("unselectedO", [](CCMenuItemToggler* self) { return CCMenuItemToggler::unselectedO(self); });
    ccmenuitemtoggler.attr("unselectedA") = CCMenuItemToggler::unselectedA;
    ccmenuitemtoggler.attr("unselectedN") = "unselected";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::unselectedA, CCMenuItemToggler::unselectedH, (LPVOID*)&CCMenuItemToggler::unselectedO_);

    ccmenuitemtoggler.def("setEnabled", pybind::overload_cast<CCMenuItemToggler*, bool>(&CCMenuItemToggler::setEnabled));
    ccmenuitemtoggler.def("setEnabled", pybind::overload_cast<pybind::function>(&CCMenuItemToggler::setEnabled));
    ccmenuitemtoggler.def("setEnabledO", [](CCMenuItemToggler* self, bool enabled) { return CCMenuItemToggler::setEnabledO(self, enabled); });
    ccmenuitemtoggler.attr("setEnabledA") = CCMenuItemToggler::setEnabledA;
    ccmenuitemtoggler.attr("setEnabledN") = "setEnabled";
    cinnamon::hooks::hookCinnamon((PVOID)CCMenuItemToggler::setEnabledA, CCMenuItemToggler::setEnabledH, (LPVOID*)&CCMenuItemToggler::setEnabledO_);

    auto cccontentlayer = pybind::class_<CCContentLayer, cocos2d::CCLayerColor>(m, "CCContentLayer");
    cccontentlayer.def("create", pybind::overload_cast<cocos2d::_ccColor4B const&, float, float>(&CCContentLayer::create));
    cccontentlayer.def("create", pybind::overload_cast<pybind::function>(&CCContentLayer::create));
    cccontentlayer.def("createO", [](cocos2d::_ccColor4B const& p0, float p1, float p2) { return CCContentLayer::createO(p0, p1, p2); });
    cccontentlayer.attr("createA") = CCContentLayer::createA;
    cccontentlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)CCContentLayer::createA, CCContentLayer::createH, (LPVOID*)&CCContentLayer::createO_);

    cccontentlayer.def("setPosition", pybind::overload_cast<CCContentLayer*, cocos2d::CCPoint const&>(&CCContentLayer::setPosition));
    cccontentlayer.def("setPosition", pybind::overload_cast<pybind::function>(&CCContentLayer::setPosition));
    cccontentlayer.def("setPositionO", [](CCContentLayer* self, cocos2d::CCPoint const& p0) { return CCContentLayer::setPositionO(self, p0); });
    cccontentlayer.attr("setPositionA") = CCContentLayer::setPositionA;
    cccontentlayer.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCContentLayer::setPositionA, CCContentLayer::setPositionH, (LPVOID*)&CCContentLayer::setPositionO_);

    auto googleplaydelegate = pybind::class_<GooglePlayDelegate>(m, "GooglePlayDelegate");
    auto menulayer = pybind::class_<MenuLayer, cocos2d::CCLayer>(m, "MenuLayer");
    menulayer.def("scene", pybind::overload_cast<bool>(&MenuLayer::scene));
    menulayer.def("scene", pybind::overload_cast<pybind::function>(&MenuLayer::scene));
    menulayer.def("sceneO", [](bool p0) { return MenuLayer::sceneO(p0); });
    menulayer.attr("sceneA") = MenuLayer::sceneA;
    menulayer.attr("sceneN") = "scene";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::sceneA, MenuLayer::sceneH, (LPVOID*)&MenuLayer::sceneO_);

    menulayer.def("onFacebook", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onFacebook));
    menulayer.def("onFacebook", pybind::overload_cast<pybind::function>(&MenuLayer::onFacebook));
    menulayer.def("onFacebookO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onFacebookO(self, sender); });
    menulayer.attr("onFacebookA") = MenuLayer::onFacebookA;
    menulayer.attr("onFacebookN") = "onFacebook";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onFacebookA, MenuLayer::onFacebookH, (LPVOID*)&MenuLayer::onFacebookO_);

    menulayer.def("onEveryplay", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onEveryplay));
    menulayer.def("onEveryplay", pybind::overload_cast<pybind::function>(&MenuLayer::onEveryplay));
    menulayer.def("onEveryplayO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onEveryplayO(self, sender); });
    menulayer.attr("onEveryplayA") = MenuLayer::onEveryplayA;
    menulayer.attr("onEveryplayN") = "onEveryplay";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onEveryplayA, MenuLayer::onEveryplayH, (LPVOID*)&MenuLayer::onEveryplayO_);

    menulayer.def("onMoreGames", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onMoreGames));
    menulayer.def("onMoreGames", pybind::overload_cast<pybind::function>(&MenuLayer::onMoreGames));
    menulayer.def("onMoreGamesO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onMoreGamesO(self, sender); });
    menulayer.attr("onMoreGamesA") = MenuLayer::onMoreGamesA;
    menulayer.attr("onMoreGamesN") = "onMoreGames";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onMoreGamesA, MenuLayer::onMoreGamesH, (LPVOID*)&MenuLayer::onMoreGamesO_);

    menulayer.def("onMyProfile", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onMyProfile));
    menulayer.def("onMyProfile", pybind::overload_cast<pybind::function>(&MenuLayer::onMyProfile));
    menulayer.def("onMyProfileO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onMyProfileO(self, sender); });
    menulayer.attr("onMyProfileA") = MenuLayer::onMyProfileA;
    menulayer.attr("onMyProfileN") = "onMyProfile";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onMyProfileA, MenuLayer::onMyProfileH, (LPVOID*)&MenuLayer::onMyProfileO_);

    menulayer.def("onFreeLevels", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onFreeLevels));
    menulayer.def("onFreeLevels", pybind::overload_cast<pybind::function>(&MenuLayer::onFreeLevels));
    menulayer.def("onFreeLevelsO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onFreeLevelsO(self, sender); });
    menulayer.attr("onFreeLevelsA") = MenuLayer::onFreeLevelsA;
    menulayer.attr("onFreeLevelsN") = "onFreeLevels";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onFreeLevelsA, MenuLayer::onFreeLevelsH, (LPVOID*)&MenuLayer::onFreeLevelsO_);

    menulayer.def("onGameCenter", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onGameCenter));
    menulayer.def("onGameCenter", pybind::overload_cast<pybind::function>(&MenuLayer::onGameCenter));
    menulayer.def("onGameCenterO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onGameCenterO(self, sender); });
    menulayer.attr("onGameCenterA") = MenuLayer::onGameCenterA;
    menulayer.attr("onGameCenterN") = "onGameCenter";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onGameCenterA, MenuLayer::onGameCenterH, (LPVOID*)&MenuLayer::onGameCenterO_);

    menulayer.def("onNewgrounds", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onNewgrounds));
    menulayer.def("onNewgrounds", pybind::overload_cast<pybind::function>(&MenuLayer::onNewgrounds));
    menulayer.def("onNewgroundsO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onNewgroundsO(self, sender); });
    menulayer.attr("onNewgroundsA") = MenuLayer::onNewgroundsA;
    menulayer.attr("onNewgroundsN") = "onNewgrounds";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onNewgroundsA, MenuLayer::onNewgroundsH, (LPVOID*)&MenuLayer::onNewgroundsO_);

    menulayer.def("onFullVersion", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onFullVersion));
    menulayer.def("onFullVersion", pybind::overload_cast<pybind::function>(&MenuLayer::onFullVersion));
    menulayer.def("onFullVersionO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onFullVersionO(self, sender); });
    menulayer.attr("onFullVersionA") = MenuLayer::onFullVersionA;
    menulayer.attr("onFullVersionN") = "onFullVersion";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onFullVersionA, MenuLayer::onFullVersionH, (LPVOID*)&MenuLayer::onFullVersionO_);

    menulayer.def("onAchievements", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onAchievements));
    menulayer.def("onAchievements", pybind::overload_cast<pybind::function>(&MenuLayer::onAchievements));
    menulayer.def("onAchievementsO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onAchievementsO(self, sender); });
    menulayer.attr("onAchievementsA") = MenuLayer::onAchievementsA;
    menulayer.attr("onAchievementsN") = "onAchievements";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onAchievementsA, MenuLayer::onAchievementsH, (LPVOID*)&MenuLayer::onAchievementsO_);

    menulayer.def("onGooglePlayGames", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onGooglePlayGames));
    menulayer.def("onGooglePlayGames", pybind::overload_cast<pybind::function>(&MenuLayer::onGooglePlayGames));
    menulayer.def("onGooglePlayGamesO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onGooglePlayGamesO(self, sender); });
    menulayer.attr("onGooglePlayGamesA") = MenuLayer::onGooglePlayGamesA;
    menulayer.attr("onGooglePlayGamesN") = "onGooglePlayGames";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onGooglePlayGamesA, MenuLayer::onGooglePlayGamesH, (LPVOID*)&MenuLayer::onGooglePlayGamesO_);

    menulayer.def("onPlay", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onPlay));
    menulayer.def("onPlay", pybind::overload_cast<pybind::function>(&MenuLayer::onPlay));
    menulayer.def("onPlayO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onPlayO(self, sender); });
    menulayer.attr("onPlayA") = MenuLayer::onPlayA;
    menulayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onPlayA, MenuLayer::onPlayH, (LPVOID*)&MenuLayer::onPlayO_);

    menulayer.def("onQuit", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onQuit));
    menulayer.def("onQuit", pybind::overload_cast<pybind::function>(&MenuLayer::onQuit));
    menulayer.def("onQuitO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onQuitO(self, sender); });
    menulayer.attr("onQuitA") = MenuLayer::onQuitA;
    menulayer.attr("onQuitN") = "onQuit";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onQuitA, MenuLayer::onQuitH, (LPVOID*)&MenuLayer::onQuitO_);

    menulayer.def("onDaily", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onDaily));
    menulayer.def("onDaily", pybind::overload_cast<pybind::function>(&MenuLayer::onDaily));
    menulayer.def("onDailyO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onDailyO(self, sender); });
    menulayer.attr("onDailyA") = MenuLayer::onDailyA;
    menulayer.attr("onDailyN") = "onDaily";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onDailyA, MenuLayer::onDailyH, (LPVOID*)&MenuLayer::onDailyO_);

    menulayer.def("onStats", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onStats));
    menulayer.def("onStats", pybind::overload_cast<pybind::function>(&MenuLayer::onStats));
    menulayer.def("onStatsO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onStatsO(self, sender); });
    menulayer.attr("onStatsA") = MenuLayer::onStatsA;
    menulayer.attr("onStatsN") = "onStats";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onStatsA, MenuLayer::onStatsH, (LPVOID*)&MenuLayer::onStatsO_);

    menulayer.def("onGarage", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onGarage));
    menulayer.def("onGarage", pybind::overload_cast<pybind::function>(&MenuLayer::onGarage));
    menulayer.def("onGarageO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onGarageO(self, sender); });
    menulayer.attr("onGarageA") = MenuLayer::onGarageA;
    menulayer.attr("onGarageN") = "onGarage";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onGarageA, MenuLayer::onGarageH, (LPVOID*)&MenuLayer::onGarageO_);

    menulayer.def("onRobTop", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onRobTop));
    menulayer.def("onRobTop", pybind::overload_cast<pybind::function>(&MenuLayer::onRobTop));
    menulayer.def("onRobTopO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onRobTopO(self, sender); });
    menulayer.attr("onRobTopA") = MenuLayer::onRobTopA;
    menulayer.attr("onRobTopN") = "onRobTop";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onRobTopA, MenuLayer::onRobTopH, (LPVOID*)&MenuLayer::onRobTopO_);

    menulayer.def("onTwitch", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onTwitch));
    menulayer.def("onTwitch", pybind::overload_cast<pybind::function>(&MenuLayer::onTwitch));
    menulayer.def("onTwitchO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onTwitchO(self, sender); });
    menulayer.attr("onTwitchA") = MenuLayer::onTwitchA;
    menulayer.attr("onTwitchN") = "onTwitch";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onTwitchA, MenuLayer::onTwitchH, (LPVOID*)&MenuLayer::onTwitchO_);

    menulayer.def("onCreator", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onCreator));
    menulayer.def("onCreator", pybind::overload_cast<pybind::function>(&MenuLayer::onCreator));
    menulayer.def("onCreatorO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onCreatorO(self, sender); });
    menulayer.attr("onCreatorA") = MenuLayer::onCreatorA;
    menulayer.attr("onCreatorN") = "onCreator";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onCreatorA, MenuLayer::onCreatorH, (LPVOID*)&MenuLayer::onCreatorO_);

    menulayer.def("onDiscord", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onDiscord));
    menulayer.def("onDiscord", pybind::overload_cast<pybind::function>(&MenuLayer::onDiscord));
    menulayer.def("onDiscordO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onDiscordO(self, sender); });
    menulayer.attr("onDiscordA") = MenuLayer::onDiscordA;
    menulayer.attr("onDiscordN") = "onDiscord";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onDiscordA, MenuLayer::onDiscordH, (LPVOID*)&MenuLayer::onDiscordO_);

    menulayer.def("onOptions", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onOptions));
    menulayer.def("onOptions", pybind::overload_cast<pybind::function>(&MenuLayer::onOptions));
    menulayer.def("onOptionsO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onOptionsO(self, sender); });
    menulayer.attr("onOptionsA") = MenuLayer::onOptionsA;
    menulayer.attr("onOptionsN") = "onOptions";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onOptionsA, MenuLayer::onOptionsH, (LPVOID*)&MenuLayer::onOptionsO_);

    menulayer.def("onTrailer", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onTrailer));
    menulayer.def("onTrailer", pybind::overload_cast<pybind::function>(&MenuLayer::onTrailer));
    menulayer.def("onTrailerO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onTrailerO(self, sender); });
    menulayer.attr("onTrailerA") = MenuLayer::onTrailerA;
    menulayer.attr("onTrailerN") = "onTrailer";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onTrailerA, MenuLayer::onTrailerH, (LPVOID*)&MenuLayer::onTrailerO_);

    menulayer.def("onTwitter", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onTwitter));
    menulayer.def("onTwitter", pybind::overload_cast<pybind::function>(&MenuLayer::onTwitter));
    menulayer.def("onTwitterO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onTwitterO(self, sender); });
    menulayer.attr("onTwitterA") = MenuLayer::onTwitterA;
    menulayer.attr("onTwitterN") = "onTwitter";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onTwitterA, MenuLayer::onTwitterH, (LPVOID*)&MenuLayer::onTwitterO_);

    menulayer.def("onYouTube", pybind::overload_cast<MenuLayer*, cocos2d::CCObject*>(&MenuLayer::onYouTube));
    menulayer.def("onYouTube", pybind::overload_cast<pybind::function>(&MenuLayer::onYouTube));
    menulayer.def("onYouTubeO", [](MenuLayer* self, cocos2d::CCObject* sender) { return MenuLayer::onYouTubeO(self, sender); });
    menulayer.attr("onYouTubeA") = MenuLayer::onYouTubeA;
    menulayer.attr("onYouTubeN") = "onYouTube";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::onYouTubeA, MenuLayer::onYouTubeH, (LPVOID*)&MenuLayer::onYouTubeO_);

    menulayer.def("FLAlert_Clicked", pybind::overload_cast<MenuLayer*, FLAlertLayer*, bool>(&MenuLayer::FLAlert_Clicked));
    menulayer.def("FLAlert_Clicked", pybind::overload_cast<pybind::function>(&MenuLayer::FLAlert_Clicked));
    menulayer.def("FLAlert_ClickedO", [](MenuLayer* self, FLAlertLayer* p0, bool p1) { return MenuLayer::FLAlert_ClickedO(self, p0, p1); });
    menulayer.attr("FLAlert_ClickedA") = MenuLayer::FLAlert_ClickedA;
    menulayer.attr("FLAlert_ClickedN") = "FLAlert_Clicked";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::FLAlert_ClickedA, MenuLayer::FLAlert_ClickedH, (LPVOID*)&MenuLayer::FLAlert_ClickedO_);

    menulayer.def("init", pybind::overload_cast<MenuLayer*>(&MenuLayer::init));
    menulayer.def("init", pybind::overload_cast<pybind::function>(&MenuLayer::init));
    menulayer.def("initO", [](MenuLayer* self) { return MenuLayer::initO(self); });
    menulayer.attr("initA") = MenuLayer::initA;
    menulayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::initA, MenuLayer::initH, (LPVOID*)&MenuLayer::initO_);

    menulayer.def("keyBackClicked", pybind::overload_cast<MenuLayer*>(&MenuLayer::keyBackClicked));
    menulayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&MenuLayer::keyBackClicked));
    menulayer.def("keyBackClickedO", [](MenuLayer* self) { return MenuLayer::keyBackClickedO(self); });
    menulayer.attr("keyBackClickedA") = MenuLayer::keyBackClickedA;
    menulayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::keyBackClickedA, MenuLayer::keyBackClickedH, (LPVOID*)&MenuLayer::keyBackClickedO_);

    menulayer.def("keyDown", pybind::overload_cast<MenuLayer*, cocos2d::enumKeyCodes>(&MenuLayer::keyDown));
    menulayer.def("keyDown", pybind::overload_cast<pybind::function>(&MenuLayer::keyDown));
    menulayer.def("keyDownO", [](MenuLayer* self, cocos2d::enumKeyCodes p0) { return MenuLayer::keyDownO(self, p0); });
    menulayer.attr("keyDownA") = MenuLayer::keyDownA;
    menulayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)MenuLayer::keyDownA, MenuLayer::keyDownH, (LPVOID*)&MenuLayer::keyDownO_);

    auto loadinglayer = pybind::class_<LoadingLayer, cocos2d::CCLayer>(m, "LoadingLayer");
    loadinglayer.def("scene", pybind::overload_cast<bool>(&LoadingLayer::scene));
    loadinglayer.def("scene", pybind::overload_cast<pybind::function>(&LoadingLayer::scene));
    loadinglayer.def("sceneO", [](bool p0) { return LoadingLayer::sceneO(p0); });
    loadinglayer.attr("sceneA") = LoadingLayer::sceneA;
    loadinglayer.attr("sceneN") = "scene";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::sceneA, LoadingLayer::sceneH, (LPVOID*)&LoadingLayer::sceneO_);

    loadinglayer.def("create", pybind::overload_cast<bool>(&LoadingLayer::create));
    loadinglayer.def("create", pybind::overload_cast<pybind::function>(&LoadingLayer::create));
    loadinglayer.def("createO", [](bool fromReload) { return LoadingLayer::createO(fromReload); });
    loadinglayer.attr("createA") = LoadingLayer::createA;
    loadinglayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::createA, LoadingLayer::createH, (LPVOID*)&LoadingLayer::createO_);

    loadinglayer.def("init", pybind::overload_cast<LoadingLayer*, bool>(&LoadingLayer::init));
    loadinglayer.def("init", pybind::overload_cast<pybind::function>(&LoadingLayer::init));
    loadinglayer.def("initO", [](LoadingLayer* self, bool fromReload) { return LoadingLayer::initO(self, fromReload); });
    loadinglayer.attr("initA") = LoadingLayer::initA;
    loadinglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::initA, LoadingLayer::initH, (LPVOID*)&LoadingLayer::initO_);

    loadinglayer.def("loadAssets", pybind::overload_cast<LoadingLayer*>(&LoadingLayer::loadAssets));
    loadinglayer.def("loadAssets", pybind::overload_cast<pybind::function>(&LoadingLayer::loadAssets));
    loadinglayer.def("loadAssetsO", [](LoadingLayer* self) { return LoadingLayer::loadAssetsO(self); });
    loadinglayer.attr("loadAssetsA") = LoadingLayer::loadAssetsA;
    loadinglayer.attr("loadAssetsN") = "loadAssets";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::loadAssetsA, LoadingLayer::loadAssetsH, (LPVOID*)&LoadingLayer::loadAssetsO_);

    loadinglayer.def("loadingFinished", pybind::overload_cast<LoadingLayer*>(&LoadingLayer::loadingFinished));
    loadinglayer.def("loadingFinished", pybind::overload_cast<pybind::function>(&LoadingLayer::loadingFinished));
    loadinglayer.def("loadingFinishedO", [](LoadingLayer* self) { return LoadingLayer::loadingFinishedO(self); });
    loadinglayer.attr("loadingFinishedA") = LoadingLayer::loadingFinishedA;
    loadinglayer.attr("loadingFinishedN") = "loadingFinished";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingLayer::loadingFinishedA, LoadingLayer::loadingFinishedH, (LPVOID*)&LoadingLayer::loadingFinishedO_);

    auto textalertpopup = pybind::class_<TextAlertPopup, cocos2d::CCNode>(m, "TextAlertPopup");
    textalertpopup.def("create", pybind::overload_cast<gd::string, float, float, int, gd::string>(&TextAlertPopup::create));
    textalertpopup.def("create", pybind::overload_cast<pybind::function>(&TextAlertPopup::create));
    textalertpopup.def("createO", [](gd::string p0, float p1, float p2, int p3, gd::string p4) { return TextAlertPopup::createO(p0, p1, p2, p3, p4); });
    textalertpopup.attr("createA") = TextAlertPopup::createA;
    textalertpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TextAlertPopup::createA, TextAlertPopup::createH, (LPVOID*)&TextAlertPopup::createO_);

    textalertpopup.def("init", pybind::overload_cast<TextAlertPopup*, gd::string, float, float, int, gd::string>(&TextAlertPopup::init));
    textalertpopup.def("init", pybind::overload_cast<pybind::function>(&TextAlertPopup::init));
    textalertpopup.def("initO", [](TextAlertPopup* self, gd::string p0, float p1, float p2, int p3, gd::string p4) { return TextAlertPopup::initO(self, p0, p1, p2, p3, p4); });
    textalertpopup.attr("initA") = TextAlertPopup::initA;
    textalertpopup.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)TextAlertPopup::initA, TextAlertPopup::initH, (LPVOID*)&TextAlertPopup::initO_);

    textalertpopup.def("setLabelColor", pybind::overload_cast<TextAlertPopup*, cocos2d::_ccColor3B>(&TextAlertPopup::setLabelColor));
    textalertpopup.def("setLabelColor", pybind::overload_cast<pybind::function>(&TextAlertPopup::setLabelColor));
    textalertpopup.def("setLabelColorO", [](TextAlertPopup* self, cocos2d::_ccColor3B p0) { return TextAlertPopup::setLabelColorO(self, p0); });
    textalertpopup.attr("setLabelColorA") = TextAlertPopup::setLabelColorA;
    textalertpopup.attr("setLabelColorN") = "setLabelColor";
    cinnamon::hooks::hookCinnamon((PVOID)TextAlertPopup::setLabelColorA, TextAlertPopup::setLabelColorH, (LPVOID*)&TextAlertPopup::setLabelColorO_);

    textalertpopup.def("setAlertPosition", pybind::overload_cast<TextAlertPopup*, cocos2d::CCPoint, cocos2d::CCPoint>(&TextAlertPopup::setAlertPosition));
    textalertpopup.def("setAlertPosition", pybind::overload_cast<pybind::function>(&TextAlertPopup::setAlertPosition));
    textalertpopup.def("setAlertPositionO", [](TextAlertPopup* self, cocos2d::CCPoint p0, cocos2d::CCPoint p1) { return TextAlertPopup::setAlertPositionO(self, p0, p1); });
    textalertpopup.attr("setAlertPositionA") = TextAlertPopup::setAlertPositionA;
    textalertpopup.attr("setAlertPositionN") = "setAlertPosition";
    cinnamon::hooks::hookCinnamon((PVOID)TextAlertPopup::setAlertPositionA, TextAlertPopup::setAlertPositionH, (LPVOID*)&TextAlertPopup::setAlertPositionO_);

    auto gameratedelegate = pybind::class_<GameRateDelegate>(m, "GameRateDelegate");
    auto listbuttonbardelegate = pybind::class_<ListButtonBarDelegate>(m, "ListButtonBarDelegate");
    auto charactercolordelegate = pybind::class_<CharacterColorDelegate>(m, "CharacterColorDelegate");
    auto gjgaragelayer = pybind::class_<GJGarageLayer, cocos2d::CCLayer>(m, "GJGarageLayer");
    gjgaragelayer.def("onNavigate", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onNavigate));
    gjgaragelayer.def("onNavigate", pybind::overload_cast<pybind::function>(&GJGarageLayer::onNavigate));
    gjgaragelayer.def("onNavigateO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onNavigateO(self, sender); });
    gjgaragelayer.attr("onNavigateA") = GJGarageLayer::onNavigateA;
    gjgaragelayer.attr("onNavigateN") = "onNavigate";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onNavigateA, GJGarageLayer::onNavigateH, (LPVOID*)&GJGarageLayer::onNavigateO_);

    gjgaragelayer.def("onSelectTab", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onSelectTab));
    gjgaragelayer.def("onSelectTab", pybind::overload_cast<pybind::function>(&GJGarageLayer::onSelectTab));
    gjgaragelayer.def("onSelectTabO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onSelectTabO(self, sender); });
    gjgaragelayer.attr("onSelectTabA") = GJGarageLayer::onSelectTabA;
    gjgaragelayer.attr("onSelectTabN") = "onSelectTab";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onSelectTabA, GJGarageLayer::onSelectTabH, (LPVOID*)&GJGarageLayer::onSelectTabO_);

    gjgaragelayer.def("onToggleItem", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onToggleItem));
    gjgaragelayer.def("onToggleItem", pybind::overload_cast<pybind::function>(&GJGarageLayer::onToggleItem));
    gjgaragelayer.def("onToggleItemO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onToggleItemO(self, sender); });
    gjgaragelayer.attr("onToggleItemA") = GJGarageLayer::onToggleItemA;
    gjgaragelayer.attr("onToggleItemN") = "onToggleItem";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onToggleItemA, GJGarageLayer::onToggleItemH, (LPVOID*)&GJGarageLayer::onToggleItemO_);

    gjgaragelayer.def("onBack", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onBack));
    gjgaragelayer.def("onBack", pybind::overload_cast<pybind::function>(&GJGarageLayer::onBack));
    gjgaragelayer.def("onBackO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onBackO(self, sender); });
    gjgaragelayer.attr("onBackA") = GJGarageLayer::onBackA;
    gjgaragelayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onBackA, GJGarageLayer::onBackH, (LPVOID*)&GJGarageLayer::onBackO_);

    gjgaragelayer.def("onInfo", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onInfo));
    gjgaragelayer.def("onInfo", pybind::overload_cast<pybind::function>(&GJGarageLayer::onInfo));
    gjgaragelayer.def("onInfoO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onInfoO(self, sender); });
    gjgaragelayer.attr("onInfoA") = GJGarageLayer::onInfoA;
    gjgaragelayer.attr("onInfoN") = "onInfo";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onInfoA, GJGarageLayer::onInfoH, (LPVOID*)&GJGarageLayer::onInfoO_);

    gjgaragelayer.def("onShop", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onShop));
    gjgaragelayer.def("onShop", pybind::overload_cast<pybind::function>(&GJGarageLayer::onShop));
    gjgaragelayer.def("onShopO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onShopO(self, sender); });
    gjgaragelayer.attr("onShopA") = GJGarageLayer::onShopA;
    gjgaragelayer.attr("onShopN") = "onShop";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onShopA, GJGarageLayer::onShopH, (LPVOID*)&GJGarageLayer::onShopO_);

    gjgaragelayer.def("onArrow", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onArrow));
    gjgaragelayer.def("onArrow", pybind::overload_cast<pybind::function>(&GJGarageLayer::onArrow));
    gjgaragelayer.def("onArrowO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onArrowO(self, sender); });
    gjgaragelayer.attr("onArrowA") = GJGarageLayer::onArrowA;
    gjgaragelayer.attr("onArrowN") = "onArrow";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onArrowA, GJGarageLayer::onArrowH, (LPVOID*)&GJGarageLayer::onArrowO_);

    gjgaragelayer.def("onPaint", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onPaint));
    gjgaragelayer.def("onPaint", pybind::overload_cast<pybind::function>(&GJGarageLayer::onPaint));
    gjgaragelayer.def("onPaintO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onPaintO(self, sender); });
    gjgaragelayer.attr("onPaintA") = GJGarageLayer::onPaintA;
    gjgaragelayer.attr("onPaintN") = "onPaint";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onPaintA, GJGarageLayer::onPaintH, (LPVOID*)&GJGarageLayer::onPaintO_);

    gjgaragelayer.def("onSelect", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onSelect));
    gjgaragelayer.def("onSelect", pybind::overload_cast<pybind::function>(&GJGarageLayer::onSelect));
    gjgaragelayer.def("onSelectO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onSelectO(self, sender); });
    gjgaragelayer.attr("onSelectA") = GJGarageLayer::onSelectA;
    gjgaragelayer.attr("onSelectN") = "onSelect";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onSelectA, GJGarageLayer::onSelectH, (LPVOID*)&GJGarageLayer::onSelectO_);

    gjgaragelayer.def("onShards", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onShards));
    gjgaragelayer.def("onShards", pybind::overload_cast<pybind::function>(&GJGarageLayer::onShards));
    gjgaragelayer.def("onShardsO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onShardsO(self, sender); });
    gjgaragelayer.attr("onShardsA") = GJGarageLayer::onShardsA;
    gjgaragelayer.attr("onShardsN") = "onShards";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onShardsA, GJGarageLayer::onShardsH, (LPVOID*)&GJGarageLayer::onShardsO_);

    gjgaragelayer.def("onSpecial", pybind::overload_cast<GJGarageLayer*, cocos2d::CCObject*>(&GJGarageLayer::onSpecial));
    gjgaragelayer.def("onSpecial", pybind::overload_cast<pybind::function>(&GJGarageLayer::onSpecial));
    gjgaragelayer.def("onSpecialO", [](GJGarageLayer* self, cocos2d::CCObject* sender) { return GJGarageLayer::onSpecialO(self, sender); });
    gjgaragelayer.attr("onSpecialA") = GJGarageLayer::onSpecialA;
    gjgaragelayer.attr("onSpecialN") = "onSpecial";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::onSpecialA, GJGarageLayer::onSpecialH, (LPVOID*)&GJGarageLayer::onSpecialO_);

    gjgaragelayer.def("init", pybind::overload_cast<GJGarageLayer*>(&GJGarageLayer::init));
    gjgaragelayer.def("init", pybind::overload_cast<pybind::function>(&GJGarageLayer::init));
    gjgaragelayer.def("initO", [](GJGarageLayer* self) { return GJGarageLayer::initO(self); });
    gjgaragelayer.attr("initA") = GJGarageLayer::initA;
    gjgaragelayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::initA, GJGarageLayer::initH, (LPVOID*)&GJGarageLayer::initO_);

    gjgaragelayer.def("keyBackClicked", pybind::overload_cast<GJGarageLayer*>(&GJGarageLayer::keyBackClicked));
    gjgaragelayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&GJGarageLayer::keyBackClicked));
    gjgaragelayer.def("keyBackClickedO", [](GJGarageLayer* self) { return GJGarageLayer::keyBackClickedO(self); });
    gjgaragelayer.attr("keyBackClickedA") = GJGarageLayer::keyBackClickedA;
    gjgaragelayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)GJGarageLayer::keyBackClickedA, GJGarageLayer::keyBackClickedH, (LPVOID*)&GJGarageLayer::keyBackClickedO_);

    auto gjbasegamelayer = pybind::class_<GJBaseGameLayer, cocos2d::CCLayer>(m, "GJBaseGameLayer");
    gjbasegamelayer.def("moveObjects", pybind::overload_cast<GJBaseGameLayer*, cocos2d::CCArray*, double, double, bool>(&GJBaseGameLayer::moveObjects));
    gjbasegamelayer.def("moveObjects", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::moveObjects));
    gjbasegamelayer.def("moveObjectsO", [](GJBaseGameLayer* self, cocos2d::CCArray* p0, double p1, double p2, bool p3) { return GJBaseGameLayer::moveObjectsO(self, p0, p1, p2, p3); });
    gjbasegamelayer.attr("moveObjectsA") = GJBaseGameLayer::moveObjectsA;
    gjbasegamelayer.attr("moveObjectsN") = "moveObjects";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::moveObjectsA, GJBaseGameLayer::moveObjectsH, (LPVOID*)&GJBaseGameLayer::moveObjectsO_);

    gjbasegamelayer.def("queueButton", pybind::overload_cast<GJBaseGameLayer*, int, bool, bool>(&GJBaseGameLayer::queueButton));
    gjbasegamelayer.def("queueButton", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::queueButton));
    gjbasegamelayer.def("queueButtonO", [](GJBaseGameLayer* self, int p0, bool p1, bool p2) { return GJBaseGameLayer::queueButtonO(self, p0, p1, p2); });
    gjbasegamelayer.attr("queueButtonA") = GJBaseGameLayer::queueButtonA;
    gjbasegamelayer.attr("queueButtonN") = "queueButton";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::queueButtonA, GJBaseGameLayer::queueButtonH, (LPVOID*)&GJBaseGameLayer::queueButtonO_);

    gjbasegamelayer.def("resumeAudio", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::resumeAudio));
    gjbasegamelayer.def("resumeAudio", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::resumeAudio));
    gjbasegamelayer.def("resumeAudioO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::resumeAudioO(self); });
    gjbasegamelayer.attr("resumeAudioA") = GJBaseGameLayer::resumeAudioA;
    gjbasegamelayer.attr("resumeAudioN") = "resumeAudio";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::resumeAudioA, GJBaseGameLayer::resumeAudioH, (LPVOID*)&GJBaseGameLayer::resumeAudioO_);

    gjbasegamelayer.def("applyTimeWarp", pybind::overload_cast<GJBaseGameLayer*, float>(&GJBaseGameLayer::applyTimeWarp));
    gjbasegamelayer.def("applyTimeWarp", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::applyTimeWarp));
    gjbasegamelayer.def("applyTimeWarpO", [](GJBaseGameLayer* self, float p0) { return GJBaseGameLayer::applyTimeWarpO(self, p0); });
    gjbasegamelayer.attr("applyTimeWarpA") = GJBaseGameLayer::applyTimeWarpA;
    gjbasegamelayer.attr("applyTimeWarpN") = "applyTimeWarp";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::applyTimeWarpA, GJBaseGameLayer::applyTimeWarpH, (LPVOID*)&GJBaseGameLayer::applyTimeWarpO_);

    gjbasegamelayer.def("loadUpToPosition", pybind::overload_cast<GJBaseGameLayer*, float, int, int>(&GJBaseGameLayer::loadUpToPosition));
    gjbasegamelayer.def("loadUpToPosition", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::loadUpToPosition));
    gjbasegamelayer.def("loadUpToPositionO", [](GJBaseGameLayer* self, float p0, int p1, int p2) { return GJBaseGameLayer::loadUpToPositionO(self, p0, p1, p2); });
    gjbasegamelayer.attr("loadUpToPositionA") = GJBaseGameLayer::loadUpToPositionA;
    gjbasegamelayer.attr("loadUpToPositionN") = "loadUpToPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::loadUpToPositionA, GJBaseGameLayer::loadUpToPositionH, (LPVOID*)&GJBaseGameLayer::loadUpToPositionO_);

    gjbasegamelayer.def("loadStartPosObject", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::loadStartPosObject));
    gjbasegamelayer.def("loadStartPosObject", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::loadStartPosObject));
    gjbasegamelayer.def("loadStartPosObjectO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::loadStartPosObjectO(self); });
    gjbasegamelayer.attr("loadStartPosObjectA") = GJBaseGameLayer::loadStartPosObjectA;
    gjbasegamelayer.attr("loadStartPosObjectN") = "loadStartPosObject";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::loadStartPosObjectA, GJBaseGameLayer::loadStartPosObjectH, (LPVOID*)&GJBaseGameLayer::loadStartPosObjectO_);

    gjbasegamelayer.def("processMoveActions", pybind::overload_cast<GJBaseGameLayer*>(&GJBaseGameLayer::processMoveActions));
    gjbasegamelayer.def("processMoveActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processMoveActions));
    gjbasegamelayer.def("processMoveActionsO", [](GJBaseGameLayer* self) { return GJBaseGameLayer::processMoveActionsO(self); });
    gjbasegamelayer.attr("processMoveActionsA") = GJBaseGameLayer::processMoveActionsA;
    gjbasegamelayer.attr("processMoveActionsN") = "processMoveActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processMoveActionsA, GJBaseGameLayer::processMoveActionsH, (LPVOID*)&GJBaseGameLayer::processMoveActionsO_);

    gjbasegamelayer.def("processPlayerFollowActions", pybind::overload_cast<GJBaseGameLayer*, float>(&GJBaseGameLayer::processPlayerFollowActions));
    gjbasegamelayer.def("processPlayerFollowActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processPlayerFollowActions));
    gjbasegamelayer.def("processPlayerFollowActionsO", [](GJBaseGameLayer* self, float p0) { return GJBaseGameLayer::processPlayerFollowActionsO(self, p0); });
    gjbasegamelayer.attr("processPlayerFollowActionsA") = GJBaseGameLayer::processPlayerFollowActionsA;
    gjbasegamelayer.attr("processPlayerFollowActionsN") = "processPlayerFollowActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processPlayerFollowActionsA, GJBaseGameLayer::processPlayerFollowActionsH, (LPVOID*)&GJBaseGameLayer::processPlayerFollowActionsO_);

    gjbasegamelayer.def("processDynamicObjectActions", pybind::overload_cast<GJBaseGameLayer*, int, float>(&GJBaseGameLayer::processDynamicObjectActions));
    gjbasegamelayer.def("processDynamicObjectActions", pybind::overload_cast<pybind::function>(&GJBaseGameLayer::processDynamicObjectActions));
    gjbasegamelayer.def("processDynamicObjectActionsO", [](GJBaseGameLayer* self, int p0, float p1) { return GJBaseGameLayer::processDynamicObjectActionsO(self, p0, p1); });
    gjbasegamelayer.attr("processDynamicObjectActionsA") = GJBaseGameLayer::processDynamicObjectActionsA;
    gjbasegamelayer.attr("processDynamicObjectActionsN") = "processDynamicObjectActions";
    cinnamon::hooks::hookCinnamon((PVOID)GJBaseGameLayer::processDynamicObjectActionsA, GJBaseGameLayer::processDynamicObjectActionsH, (LPVOID*)&GJBaseGameLayer::processDynamicObjectActionsO_);

    auto listbuttonbar = pybind::class_<ListButtonBar, cocos2d::CCNode>(m, "ListButtonBar");
    listbuttonbar.def("create", pybind::overload_cast<cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float, float, int>(&ListButtonBar::create));
    listbuttonbar.def("create", pybind::overload_cast<pybind::function>(&ListButtonBar::create));
    listbuttonbar.def("createO", [](cocos2d::CCArray* p0, cocos2d::CCPoint p1, int p2, int p3, float p4, float p5, float p6, float p7, int p8) { return ListButtonBar::createO(p0, p1, p2, p3, p4, p5, p6, p7, p8); });
    listbuttonbar.attr("createA") = ListButtonBar::createA;
    listbuttonbar.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ListButtonBar::createA, ListButtonBar::createH, (LPVOID*)&ListButtonBar::createO_);

    listbuttonbar.def("init", pybind::overload_cast<ListButtonBar*, cocos2d::CCArray*, cocos2d::CCPoint, int, int, float, float, float, float, int>(&ListButtonBar::init));
    listbuttonbar.def("init", pybind::overload_cast<pybind::function>(&ListButtonBar::init));
    listbuttonbar.def("initO", [](ListButtonBar* self, cocos2d::CCArray* p0, cocos2d::CCPoint p1, int p2, int p3, float p4, float p5, float p6, float p7, int p8) { return ListButtonBar::initO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8); });
    listbuttonbar.attr("initA") = ListButtonBar::initA;
    listbuttonbar.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ListButtonBar::initA, ListButtonBar::initH, (LPVOID*)&ListButtonBar::initO_);

    listbuttonbar.def("onLeft", pybind::overload_cast<ListButtonBar*, cocos2d::CCObject*>(&ListButtonBar::onLeft));
    listbuttonbar.def("onLeft", pybind::overload_cast<pybind::function>(&ListButtonBar::onLeft));
    listbuttonbar.def("onLeftO", [](ListButtonBar* self, cocos2d::CCObject* sender) { return ListButtonBar::onLeftO(self, sender); });
    listbuttonbar.attr("onLeftA") = ListButtonBar::onLeftA;
    listbuttonbar.attr("onLeftN") = "onLeft";
    cinnamon::hooks::hookCinnamon((PVOID)ListButtonBar::onLeftA, ListButtonBar::onLeftH, (LPVOID*)&ListButtonBar::onLeftO_);

    listbuttonbar.def("onRight", pybind::overload_cast<ListButtonBar*, cocos2d::CCObject*>(&ListButtonBar::onRight));
    listbuttonbar.def("onRight", pybind::overload_cast<pybind::function>(&ListButtonBar::onRight));
    listbuttonbar.def("onRightO", [](ListButtonBar* self, cocos2d::CCObject* sender) { return ListButtonBar::onRightO(self, sender); });
    listbuttonbar.attr("onRightA") = ListButtonBar::onRightA;
    listbuttonbar.attr("onRightN") = "onRight";
    cinnamon::hooks::hookCinnamon((PVOID)ListButtonBar::onRightA, ListButtonBar::onRightH, (LPVOID*)&ListButtonBar::onRightO_);

    auto textareadelegate = pybind::class_<TextAreaDelegate>(m, "TextAreaDelegate");
    auto dialoglayer = pybind::class_<DialogLayer, cocos2d::CCLayerColor>(m, "DialogLayer");
    dialoglayer.def("create", pybind::overload_cast<DialogObject*, int>(&DialogLayer::create));
    dialoglayer.def("create", pybind::overload_cast<pybind::function>(&DialogLayer::create));
    dialoglayer.def("createO", [](DialogObject* p0, int p1) { return DialogLayer::createO(p0, p1); });
    dialoglayer.attr("createA") = DialogLayer::createA;
    dialoglayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::createA, DialogLayer::createH, (LPVOID*)&DialogLayer::createO_);

    dialoglayer.def("init", pybind::overload_cast<DialogLayer*, DialogObject*, cocos2d::CCArray*, int>(&DialogLayer::init));
    dialoglayer.def("init", pybind::overload_cast<pybind::function>(&DialogLayer::init));
    dialoglayer.def("initO", [](DialogLayer* self, DialogObject* p0, cocos2d::CCArray* p1, int p2) { return DialogLayer::initO(self, p0, p1, p2); });
    dialoglayer.attr("initA") = DialogLayer::initA;
    dialoglayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::initA, DialogLayer::initH, (LPVOID*)&DialogLayer::initO_);

    dialoglayer.def("onEnter", pybind::overload_cast<DialogLayer*>(&DialogLayer::onEnter));
    dialoglayer.def("onEnter", pybind::overload_cast<pybind::function>(&DialogLayer::onEnter));
    dialoglayer.def("onEnterO", [](DialogLayer* self) { return DialogLayer::onEnterO(self); });
    dialoglayer.attr("onEnterA") = DialogLayer::onEnterA;
    dialoglayer.attr("onEnterN") = "onEnter";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::onEnterA, DialogLayer::onEnterH, (LPVOID*)&DialogLayer::onEnterO_);

    dialoglayer.def("registerWithTouchDispatcher", pybind::overload_cast<DialogLayer*>(&DialogLayer::registerWithTouchDispatcher));
    dialoglayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&DialogLayer::registerWithTouchDispatcher));
    dialoglayer.def("registerWithTouchDispatcherO", [](DialogLayer* self) { return DialogLayer::registerWithTouchDispatcherO(self); });
    dialoglayer.attr("registerWithTouchDispatcherA") = DialogLayer::registerWithTouchDispatcherA;
    dialoglayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::registerWithTouchDispatcherA, DialogLayer::registerWithTouchDispatcherH, (LPVOID*)&DialogLayer::registerWithTouchDispatcherO_);

    dialoglayer.def("keyBackClicked", pybind::overload_cast<DialogLayer*>(&DialogLayer::keyBackClicked));
    dialoglayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&DialogLayer::keyBackClicked));
    dialoglayer.def("keyBackClickedO", [](DialogLayer* self) { return DialogLayer::keyBackClickedO(self); });
    dialoglayer.attr("keyBackClickedA") = DialogLayer::keyBackClickedA;
    dialoglayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::keyBackClickedA, DialogLayer::keyBackClickedH, (LPVOID*)&DialogLayer::keyBackClickedO_);

    dialoglayer.def("keyDown", pybind::overload_cast<DialogLayer*, cocos2d::enumKeyCodes>(&DialogLayer::keyDown));
    dialoglayer.def("keyDown", pybind::overload_cast<pybind::function>(&DialogLayer::keyDown));
    dialoglayer.def("keyDownO", [](DialogLayer* self, cocos2d::enumKeyCodes p0) { return DialogLayer::keyDownO(self, p0); });
    dialoglayer.attr("keyDownA") = DialogLayer::keyDownA;
    dialoglayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)DialogLayer::keyDownA, DialogLayer::keyDownH, (LPVOID*)&DialogLayer::keyDownO_);

    auto gmanager = pybind::class_<GManager, cocos2d::CCNode>(m, "GManager");
    gmanager.def("init", pybind::overload_cast<GManager*>(&GManager::init));
    gmanager.def("init", pybind::overload_cast<pybind::function>(&GManager::init));
    gmanager.def("initO", [](GManager* self) { return GManager::initO(self); });
    gmanager.attr("initA") = GManager::initA;
    gmanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GManager::initA, GManager::initH, (LPVOID*)&GManager::initO_);

    auto gamemanager = pybind::class_<GameManager, GManager>(m, "GameManager");
    gamemanager.def("sharedState", pybind::overload_cast<>(&GameManager::sharedState));
    gamemanager.def("sharedState", pybind::overload_cast<pybind::function>(&GameManager::sharedState));
    gamemanager.def("sharedStateO", []() { return GameManager::sharedStateO(); });
    gamemanager.attr("sharedStateA") = GameManager::sharedStateA;
    gamemanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::sharedStateA, GameManager::sharedStateH, (LPVOID*)&GameManager::sharedStateO_);

    gamemanager.def("colorForIdx", pybind::overload_cast<GameManager*, int>(&GameManager::colorForIdx));
    gamemanager.def("colorForIdx", pybind::overload_cast<pybind::function>(&GameManager::colorForIdx));
    gamemanager.def("colorForIdxO", [](GameManager* self, int p0) { return GameManager::colorForIdxO(self, p0); });
    gamemanager.attr("colorForIdxA") = GameManager::colorForIdxA;
    gamemanager.attr("colorForIdxN") = "colorForIdx";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::colorForIdxA, GameManager::colorForIdxH, (LPVOID*)&GameManager::colorForIdxO_);

    gamemanager.def("isIconLoaded", pybind::overload_cast<GameManager*, int, int>(&GameManager::isIconLoaded));
    gamemanager.def("isIconLoaded", pybind::overload_cast<pybind::function>(&GameManager::isIconLoaded));
    gamemanager.def("isIconLoadedO", [](GameManager* self, int p0, int p1) { return GameManager::isIconLoadedO(self, p0, p1); });
    gamemanager.attr("isIconLoadedA") = GameManager::isIconLoadedA;
    gamemanager.attr("isIconLoadedN") = "isIconLoaded";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::isIconLoadedA, GameManager::isIconLoadedH, (LPVOID*)&GameManager::isIconLoadedO_);

    gamemanager.def("isIconUnlocked", pybind::overload_cast<GameManager*, int, IconType>(&GameManager::isIconUnlocked));
    gamemanager.def("isIconUnlocked", pybind::overload_cast<pybind::function>(&GameManager::isIconUnlocked));
    gamemanager.def("isIconUnlockedO", [](GameManager* self, int p0, IconType p1) { return GameManager::isIconUnlockedO(self, p0, p1); });
    gamemanager.attr("isIconUnlockedA") = GameManager::isIconUnlockedA;
    gamemanager.attr("isIconUnlockedN") = "isIconUnlocked";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::isIconUnlockedA, GameManager::isIconUnlockedH, (LPVOID*)&GameManager::isIconUnlockedO_);

    gamemanager.def("isColorUnlocked", pybind::overload_cast<GameManager*, int, UnlockType>(&GameManager::isColorUnlocked));
    gamemanager.def("isColorUnlocked", pybind::overload_cast<pybind::function>(&GameManager::isColorUnlocked));
    gamemanager.def("isColorUnlockedO", [](GameManager* self, int p0, UnlockType p1) { return GameManager::isColorUnlockedO(self, p0, p1); });
    gamemanager.attr("isColorUnlockedA") = GameManager::isColorUnlockedA;
    gamemanager.attr("isColorUnlockedN") = "isColorUnlocked";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::isColorUnlockedA, GameManager::isColorUnlockedH, (LPVOID*)&GameManager::isColorUnlockedO_);

    gamemanager.def("setGameVariable", pybind::overload_cast<GameManager*, char const*, bool>(&GameManager::setGameVariable));
    gamemanager.def("setGameVariable", pybind::overload_cast<pybind::function>(&GameManager::setGameVariable));
    gamemanager.def("setGameVariableO", [](GameManager* self, char const* p0, bool p1) { return GameManager::setGameVariableO(self, p0, p1); });
    gamemanager.attr("setGameVariableA") = GameManager::setGameVariableA;
    gamemanager.attr("setGameVariableN") = "setGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setGameVariableA, GameManager::setGameVariableH, (LPVOID*)&GameManager::setGameVariableO_);

    gamemanager.def("setIntGameVariable", pybind::overload_cast<GameManager*, char const*, int>(&GameManager::setIntGameVariable));
    gamemanager.def("setIntGameVariable", pybind::overload_cast<pybind::function>(&GameManager::setIntGameVariable));
    gamemanager.def("setIntGameVariableO", [](GameManager* self, char const* p0, int p1) { return GameManager::setIntGameVariableO(self, p0, p1); });
    gamemanager.attr("setIntGameVariableA") = GameManager::setIntGameVariableA;
    gamemanager.attr("setIntGameVariableN") = "setIntGameVariable";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setIntGameVariableA, GameManager::setIntGameVariableH, (LPVOID*)&GameManager::setIntGameVariableO_);

    gamemanager.def("setUGV", pybind::overload_cast<GameManager*, char const*, bool>(&GameManager::setUGV));
    gamemanager.def("setUGV", pybind::overload_cast<pybind::function>(&GameManager::setUGV));
    gamemanager.def("setUGVO", [](GameManager* self, char const* p0, bool p1) { return GameManager::setUGVO(self, p0, p1); });
    gamemanager.attr("setUGVA") = GameManager::setUGVA;
    gamemanager.attr("setUGVN") = "setUGV";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::setUGVA, GameManager::setUGVH, (LPVOID*)&GameManager::setUGVO_);

    gamemanager.def("init", pybind::overload_cast<GameManager*>(&GameManager::init));
    gamemanager.def("init", pybind::overload_cast<pybind::function>(&GameManager::init));
    gamemanager.def("initO", [](GameManager* self) { return GameManager::initO(self); });
    gamemanager.attr("initA") = GameManager::initA;
    gamemanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::initA, GameManager::initH, (LPVOID*)&GameManager::initO_);

    gamemanager.def("update", pybind::overload_cast<GameManager*, float>(&GameManager::update));
    gamemanager.def("update", pybind::overload_cast<pybind::function>(&GameManager::update));
    gamemanager.def("updateO", [](GameManager* self, float p0) { return GameManager::updateO(self, p0); });
    gamemanager.attr("updateA") = GameManager::updateA;
    gamemanager.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)GameManager::updateA, GameManager::updateH, (LPVOID*)&GameManager::updateO_);

    auto gjdropdownlayer = pybind::class_<GJDropDownLayer, cocos2d::CCLayerColor>(m, "GJDropDownLayer");
    gjdropdownlayer.def("create", pybind::overload_cast<char const*>(&GJDropDownLayer::create));
    gjdropdownlayer.def("create", pybind::overload_cast<pybind::function>(&GJDropDownLayer::create));
    gjdropdownlayer.def("createO", [](char const* p0) { return GJDropDownLayer::createO(p0); });
    gjdropdownlayer.attr("createA") = GJDropDownLayer::createA;
    gjdropdownlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::createA, GJDropDownLayer::createH, (LPVOID*)&GJDropDownLayer::createO_);

    gjdropdownlayer.def("create", pybind::overload_cast<char const*, float>(&GJDropDownLayer::create));
    gjdropdownlayer.def("init", pybind::overload_cast<GJDropDownLayer*, char const*>(&GJDropDownLayer::init));
    gjdropdownlayer.def("init", pybind::overload_cast<pybind::function>(&GJDropDownLayer::init));
    gjdropdownlayer.def("initO", [](GJDropDownLayer* self, char const* p0) { return GJDropDownLayer::initO(self, p0); });
    gjdropdownlayer.attr("initA") = GJDropDownLayer::initA;
    gjdropdownlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::initA, GJDropDownLayer::initH, (LPVOID*)&GJDropDownLayer::initO_);

    gjdropdownlayer.def("init", pybind::overload_cast<GJDropDownLayer*, const char*, float>(&GJDropDownLayer::init));
    gjdropdownlayer.def("draw", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::draw));
    gjdropdownlayer.def("draw", pybind::overload_cast<pybind::function>(&GJDropDownLayer::draw));
    gjdropdownlayer.def("drawO", [](GJDropDownLayer* self) { return GJDropDownLayer::drawO(self); });
    gjdropdownlayer.attr("drawA") = GJDropDownLayer::drawA;
    gjdropdownlayer.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::drawA, GJDropDownLayer::drawH, (LPVOID*)&GJDropDownLayer::drawO_);

    gjdropdownlayer.def("registerWithTouchDispatcher", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::registerWithTouchDispatcher));
    gjdropdownlayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&GJDropDownLayer::registerWithTouchDispatcher));
    gjdropdownlayer.def("registerWithTouchDispatcherO", [](GJDropDownLayer* self) { return GJDropDownLayer::registerWithTouchDispatcherO(self); });
    gjdropdownlayer.attr("registerWithTouchDispatcherA") = GJDropDownLayer::registerWithTouchDispatcherA;
    gjdropdownlayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::registerWithTouchDispatcherA, GJDropDownLayer::registerWithTouchDispatcherH, (LPVOID*)&GJDropDownLayer::registerWithTouchDispatcherO_);

    gjdropdownlayer.def("keyBackClicked", pybind::overload_cast<GJDropDownLayer*>(&GJDropDownLayer::keyBackClicked));
    gjdropdownlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&GJDropDownLayer::keyBackClicked));
    gjdropdownlayer.def("keyBackClickedO", [](GJDropDownLayer* self) { return GJDropDownLayer::keyBackClickedO(self); });
    gjdropdownlayer.attr("keyBackClickedA") = GJDropDownLayer::keyBackClickedA;
    gjdropdownlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)GJDropDownLayer::keyBackClickedA, GJDropDownLayer::keyBackClickedH, (LPVOID*)&GJDropDownLayer::keyBackClickedO_);

    auto gjgamelevel = pybind::class_<GJGameLevel, cocos2d::CCNode>(m, "GJGameLevel");
    gjgamelevel.def("create", pybind::overload_cast<cocos2d::CCDictionary*, bool>(&GJGameLevel::create));
    gjgamelevel.def("create", pybind::overload_cast<pybind::function>(&GJGameLevel::create));
    gjgamelevel.def("createO", [](cocos2d::CCDictionary* p0, bool p1) { return GJGameLevel::createO(p0, p1); });
    gjgamelevel.attr("createA") = GJGameLevel::createA;
    gjgamelevel.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::createA, GJGameLevel::createH, (LPVOID*)&GJGameLevel::createO_);

    gjgamelevel.def("create", pybind::overload_cast<>(&GJGameLevel::create));
    gjgamelevel.def("dataLoaded", pybind::overload_cast<GJGameLevel*, DS_Dictionary*>(&GJGameLevel::dataLoaded));
    gjgamelevel.def("dataLoaded", pybind::overload_cast<pybind::function>(&GJGameLevel::dataLoaded));
    gjgamelevel.def("dataLoadedO", [](GJGameLevel* self, DS_Dictionary* p0) { return GJGameLevel::dataLoadedO(self, p0); });
    gjgamelevel.attr("dataLoadedA") = GJGameLevel::dataLoadedA;
    gjgamelevel.attr("dataLoadedN") = "dataLoaded";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::dataLoadedA, GJGameLevel::dataLoadedH, (LPVOID*)&GJGameLevel::dataLoadedO_);

    gjgamelevel.def("isPlatformer", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::isPlatformer));
    gjgamelevel.def("isPlatformer", pybind::overload_cast<pybind::function>(&GJGameLevel::isPlatformer));
    gjgamelevel.def("isPlatformerO", [](GJGameLevel* self) { return GJGameLevel::isPlatformerO(self); });
    gjgamelevel.attr("isPlatformerA") = GJGameLevel::isPlatformerA;
    gjgamelevel.attr("isPlatformerN") = "isPlatformer";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::isPlatformerA, GJGameLevel::isPlatformerH, (LPVOID*)&GJGameLevel::isPlatformerO_);

    gjgamelevel.def("areCoinsVerified", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::areCoinsVerified));
    gjgamelevel.def("areCoinsVerified", pybind::overload_cast<pybind::function>(&GJGameLevel::areCoinsVerified));
    gjgamelevel.def("areCoinsVerifiedO", [](GJGameLevel* self) { return GJGameLevel::areCoinsVerifiedO(self); });
    gjgamelevel.attr("areCoinsVerifiedA") = GJGameLevel::areCoinsVerifiedA;
    gjgamelevel.attr("areCoinsVerifiedN") = "areCoinsVerified";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::areCoinsVerifiedA, GJGameLevel::areCoinsVerifiedH, (LPVOID*)&GJGameLevel::areCoinsVerifiedO_);

    gjgamelevel.def("setNormalPercent", pybind::overload_cast<GJGameLevel*, int>(&GJGameLevel::setNormalPercent));
    gjgamelevel.def("setNormalPercent", pybind::overload_cast<pybind::function>(&GJGameLevel::setNormalPercent));
    gjgamelevel.def("setNormalPercentO", [](GJGameLevel* self, int p0) { return GJGameLevel::setNormalPercentO(self, p0); });
    gjgamelevel.attr("setNormalPercentA") = GJGameLevel::setNormalPercentA;
    gjgamelevel.attr("setNormalPercentN") = "setNormalPercent";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::setNormalPercentA, GJGameLevel::setNormalPercentH, (LPVOID*)&GJGameLevel::setNormalPercentO_);

    gjgamelevel.def("setLastBuildPageForTab", pybind::overload_cast<GJGameLevel*, int, int>(&GJGameLevel::setLastBuildPageForTab));
    gjgamelevel.def("setLastBuildPageForTab", pybind::overload_cast<pybind::function>(&GJGameLevel::setLastBuildPageForTab));
    gjgamelevel.def("setLastBuildPageForTabO", [](GJGameLevel* self, int p0, int p1) { return GJGameLevel::setLastBuildPageForTabO(self, p0, p1); });
    gjgamelevel.attr("setLastBuildPageForTabA") = GJGameLevel::setLastBuildPageForTabA;
    gjgamelevel.attr("setLastBuildPageForTabN") = "setLastBuildPageForTab";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::setLastBuildPageForTabA, GJGameLevel::setLastBuildPageForTabH, (LPVOID*)&GJGameLevel::setLastBuildPageForTabO_);

    gjgamelevel.def("encodeWithCoder", pybind::overload_cast<GJGameLevel*, DS_Dictionary*>(&GJGameLevel::encodeWithCoder));
    gjgamelevel.def("encodeWithCoder", pybind::overload_cast<pybind::function>(&GJGameLevel::encodeWithCoder));
    gjgamelevel.def("encodeWithCoderO", [](GJGameLevel* self, DS_Dictionary* p0) { return GJGameLevel::encodeWithCoderO(self, p0); });
    gjgamelevel.attr("encodeWithCoderA") = GJGameLevel::encodeWithCoderA;
    gjgamelevel.attr("encodeWithCoderN") = "encodeWithCoder";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::encodeWithCoderA, GJGameLevel::encodeWithCoderH, (LPVOID*)&GJGameLevel::encodeWithCoderO_);

    gjgamelevel.def("canEncode", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::canEncode));
    gjgamelevel.def("canEncode", pybind::overload_cast<pybind::function>(&GJGameLevel::canEncode));
    gjgamelevel.def("canEncodeO", [](GJGameLevel* self) { return GJGameLevel::canEncodeO(self); });
    gjgamelevel.attr("canEncodeA") = GJGameLevel::canEncodeA;
    gjgamelevel.attr("canEncodeN") = "canEncode";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::canEncodeA, GJGameLevel::canEncodeH, (LPVOID*)&GJGameLevel::canEncodeO_);

    gjgamelevel.def("init", pybind::overload_cast<GJGameLevel*>(&GJGameLevel::init));
    gjgamelevel.def("init", pybind::overload_cast<pybind::function>(&GJGameLevel::init));
    gjgamelevel.def("initO", [](GJGameLevel* self) { return GJGameLevel::initO(self); });
    gjgamelevel.attr("initA") = GJGameLevel::initA;
    gjgamelevel.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJGameLevel::initA, GJGameLevel::initH, (LPVOID*)&GJGameLevel::initO_);

    auto uibuttonconfig = pybind::class_<UIButtonConfig>(m, "UIButtonConfig");
    auto dialogobject = pybind::class_<DialogObject, cocos2d::CCObject>(m, "DialogObject");
    dialogobject.def("create", pybind::overload_cast<gd::string, gd::string, int, float, bool, cocos2d::_ccColor3B>(&DialogObject::create));
    dialogobject.def("create", pybind::overload_cast<pybind::function>(&DialogObject::create));
    dialogobject.def("createO", [](gd::string p0, gd::string p1, int p2, float p3, bool p4, cocos2d::_ccColor3B p5) { return DialogObject::createO(p0, p1, p2, p3, p4, p5); });
    dialogobject.attr("createA") = DialogObject::createA;
    dialogobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)DialogObject::createA, DialogObject::createH, (LPVOID*)&DialogObject::createO_);

    dialogobject.def("init", pybind::overload_cast<DialogObject*, gd::string, gd::string, int, float, bool, cocos2d::_ccColor3B>(&DialogObject::init));
    dialogobject.def("init", pybind::overload_cast<pybind::function>(&DialogObject::init));
    dialogobject.def("initO", [](DialogObject* self, gd::string p0, gd::string p1, int p2, float p3, bool p4, cocos2d::_ccColor3B p5) { return DialogObject::initO(self, p0, p1, p2, p3, p4, p5); });
    dialogobject.attr("initA") = DialogObject::initA;
    dialogobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)DialogObject::initA, DialogObject::initH, (LPVOID*)&DialogObject::initO_);

    auto achievementnotifier = pybind::class_<AchievementNotifier, cocos2d::CCNode>(m, "AchievementNotifier");
    achievementnotifier.def("sharedState", pybind::overload_cast<>(&AchievementNotifier::sharedState));
    achievementnotifier.def("sharedState", pybind::overload_cast<pybind::function>(&AchievementNotifier::sharedState));
    achievementnotifier.def("sharedStateO", []() { return AchievementNotifier::sharedStateO(); });
    achievementnotifier.attr("sharedStateA") = AchievementNotifier::sharedStateA;
    achievementnotifier.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementNotifier::sharedStateA, AchievementNotifier::sharedStateH, (LPVOID*)&AchievementNotifier::sharedStateO_);

    achievementnotifier.def("init", pybind::overload_cast<AchievementNotifier*>(&AchievementNotifier::init));
    achievementnotifier.def("init", pybind::overload_cast<pybind::function>(&AchievementNotifier::init));
    achievementnotifier.def("initO", [](AchievementNotifier* self) { return AchievementNotifier::initO(self); });
    achievementnotifier.attr("initA") = AchievementNotifier::initA;
    achievementnotifier.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)AchievementNotifier::initA, AchievementNotifier::initH, (LPVOID*)&AchievementNotifier::initO_);

    auto gjlistlayer = pybind::class_<GJListLayer, cocos2d::CCLayerColor>(m, "GJListLayer");
    gjlistlayer.def("create", pybind::overload_cast<BoomListView*, char const*, cocos2d::_ccColor4B, float, float, int>(&GJListLayer::create));
    gjlistlayer.def("create", pybind::overload_cast<pybind::function>(&GJListLayer::create));
    gjlistlayer.def("createO", [](BoomListView* p0, char const* p1, cocos2d::_ccColor4B p2, float p3, float p4, int p5) { return GJListLayer::createO(p0, p1, p2, p3, p4, p5); });
    gjlistlayer.attr("createA") = GJListLayer::createA;
    gjlistlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJListLayer::createA, GJListLayer::createH, (LPVOID*)&GJListLayer::createO_);

    gjlistlayer.def("init", pybind::overload_cast<GJListLayer*, BoomListView*, char const*, cocos2d::_ccColor4B, float, float, int>(&GJListLayer::init));
    gjlistlayer.def("init", pybind::overload_cast<pybind::function>(&GJListLayer::init));
    gjlistlayer.def("initO", [](GJListLayer* self, BoomListView* p0, char const* p1, cocos2d::_ccColor4B p2, float p3, float p4, int p5) { return GJListLayer::initO(self, p0, p1, p2, p3, p4, p5); });
    gjlistlayer.attr("initA") = GJListLayer::initA;
    gjlistlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJListLayer::initA, GJListLayer::initH, (LPVOID*)&GJListLayer::initO_);

    auto loadingcircle = pybind::class_<LoadingCircle, cocos2d::CCLayerColor>(m, "LoadingCircle");
    loadingcircle.def("create", pybind::overload_cast<>(&LoadingCircle::create));
    loadingcircle.def("create", pybind::overload_cast<pybind::function>(&LoadingCircle::create));
    loadingcircle.def("createO", []() { return LoadingCircle::createO(); });
    loadingcircle.attr("createA") = LoadingCircle::createA;
    loadingcircle.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::createA, LoadingCircle::createH, (LPVOID*)&LoadingCircle::createO_);

    loadingcircle.def("init", pybind::overload_cast<LoadingCircle*>(&LoadingCircle::init));
    loadingcircle.def("init", pybind::overload_cast<pybind::function>(&LoadingCircle::init));
    loadingcircle.def("initO", [](LoadingCircle* self) { return LoadingCircle::initO(self); });
    loadingcircle.attr("initA") = LoadingCircle::initA;
    loadingcircle.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::initA, LoadingCircle::initH, (LPVOID*)&LoadingCircle::initO_);

    loadingcircle.def("draw", pybind::overload_cast<LoadingCircle*>(&LoadingCircle::draw));
    loadingcircle.def("draw", pybind::overload_cast<pybind::function>(&LoadingCircle::draw));
    loadingcircle.def("drawO", [](LoadingCircle* self) { return LoadingCircle::drawO(self); });
    loadingcircle.attr("drawA") = LoadingCircle::drawA;
    loadingcircle.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::drawA, LoadingCircle::drawH, (LPVOID*)&LoadingCircle::drawO_);

    loadingcircle.def("registerWithTouchDispatcher", pybind::overload_cast<LoadingCircle*>(&LoadingCircle::registerWithTouchDispatcher));
    loadingcircle.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&LoadingCircle::registerWithTouchDispatcher));
    loadingcircle.def("registerWithTouchDispatcherO", [](LoadingCircle* self) { return LoadingCircle::registerWithTouchDispatcherO(self); });
    loadingcircle.attr("registerWithTouchDispatcherA") = LoadingCircle::registerWithTouchDispatcherA;
    loadingcircle.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)LoadingCircle::registerWithTouchDispatcherA, LoadingCircle::registerWithTouchDispatcherH, (LPVOID*)&LoadingCircle::registerWithTouchDispatcherO_);

    auto appdelegate = pybind::class_<AppDelegate, cocos2d::CCApplication>(m, "AppDelegate");
    appdelegate.def("get", pybind::overload_cast<>(&AppDelegate::get));
    appdelegate.def("get", pybind::overload_cast<pybind::function>(&AppDelegate::get));
    appdelegate.def("getO", []() { return AppDelegate::getO(); });
    appdelegate.attr("getA") = AppDelegate::getA;
    appdelegate.attr("getN") = "get";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::getA, AppDelegate::getH, (LPVOID*)&AppDelegate::getO_);

    appdelegate.def("setIdleTimerDisabled", pybind::overload_cast<AppDelegate*, bool>(&AppDelegate::setIdleTimerDisabled));
    appdelegate.def("setIdleTimerDisabled", pybind::overload_cast<pybind::function>(&AppDelegate::setIdleTimerDisabled));
    appdelegate.def("setIdleTimerDisabledO", [](AppDelegate* self, bool p0) { return AppDelegate::setIdleTimerDisabledO(self, p0); });
    appdelegate.attr("setIdleTimerDisabledA") = AppDelegate::setIdleTimerDisabledA;
    appdelegate.attr("setIdleTimerDisabledN") = "setIdleTimerDisabled";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::setIdleTimerDisabledA, AppDelegate::setIdleTimerDisabledH, (LPVOID*)&AppDelegate::setIdleTimerDisabledO_);

    appdelegate.def("applicationDidFinishLaunching", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationDidFinishLaunching));
    appdelegate.def("applicationDidFinishLaunching", pybind::overload_cast<pybind::function>(&AppDelegate::applicationDidFinishLaunching));
    appdelegate.def("applicationDidFinishLaunchingO", [](AppDelegate* self) { return AppDelegate::applicationDidFinishLaunchingO(self); });
    appdelegate.attr("applicationDidFinishLaunchingA") = AppDelegate::applicationDidFinishLaunchingA;
    appdelegate.attr("applicationDidFinishLaunchingN") = "applicationDidFinishLaunching";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationDidFinishLaunchingA, AppDelegate::applicationDidFinishLaunchingH, (LPVOID*)&AppDelegate::applicationDidFinishLaunchingO_);

    appdelegate.def("applicationDidEnterBackground", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationDidEnterBackground));
    appdelegate.def("applicationDidEnterBackground", pybind::overload_cast<pybind::function>(&AppDelegate::applicationDidEnterBackground));
    appdelegate.def("applicationDidEnterBackgroundO", [](AppDelegate* self) { return AppDelegate::applicationDidEnterBackgroundO(self); });
    appdelegate.attr("applicationDidEnterBackgroundA") = AppDelegate::applicationDidEnterBackgroundA;
    appdelegate.attr("applicationDidEnterBackgroundN") = "applicationDidEnterBackground";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationDidEnterBackgroundA, AppDelegate::applicationDidEnterBackgroundH, (LPVOID*)&AppDelegate::applicationDidEnterBackgroundO_);

    appdelegate.def("applicationWillEnterForeground", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillEnterForeground));
    appdelegate.def("applicationWillEnterForeground", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillEnterForeground));
    appdelegate.def("applicationWillEnterForegroundO", [](AppDelegate* self) { return AppDelegate::applicationWillEnterForegroundO(self); });
    appdelegate.attr("applicationWillEnterForegroundA") = AppDelegate::applicationWillEnterForegroundA;
    appdelegate.attr("applicationWillEnterForegroundN") = "applicationWillEnterForeground";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillEnterForegroundA, AppDelegate::applicationWillEnterForegroundH, (LPVOID*)&AppDelegate::applicationWillEnterForegroundO_);

    appdelegate.def("applicationWillBecomeActive", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillBecomeActive));
    appdelegate.def("applicationWillBecomeActive", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillBecomeActive));
    appdelegate.def("applicationWillBecomeActiveO", [](AppDelegate* self) { return AppDelegate::applicationWillBecomeActiveO(self); });
    appdelegate.attr("applicationWillBecomeActiveA") = AppDelegate::applicationWillBecomeActiveA;
    appdelegate.attr("applicationWillBecomeActiveN") = "applicationWillBecomeActive";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillBecomeActiveA, AppDelegate::applicationWillBecomeActiveH, (LPVOID*)&AppDelegate::applicationWillBecomeActiveO_);

    appdelegate.def("applicationWillResignActive", pybind::overload_cast<AppDelegate*>(&AppDelegate::applicationWillResignActive));
    appdelegate.def("applicationWillResignActive", pybind::overload_cast<pybind::function>(&AppDelegate::applicationWillResignActive));
    appdelegate.def("applicationWillResignActiveO", [](AppDelegate* self) { return AppDelegate::applicationWillResignActiveO(self); });
    appdelegate.attr("applicationWillResignActiveA") = AppDelegate::applicationWillResignActiveA;
    appdelegate.attr("applicationWillResignActiveN") = "applicationWillResignActive";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::applicationWillResignActiveA, AppDelegate::applicationWillResignActiveH, (LPVOID*)&AppDelegate::applicationWillResignActiveO_);

    appdelegate.def("trySaveGame", pybind::overload_cast<AppDelegate*, bool>(&AppDelegate::trySaveGame));
    appdelegate.def("trySaveGame", pybind::overload_cast<pybind::function>(&AppDelegate::trySaveGame));
    appdelegate.def("trySaveGameO", [](AppDelegate* self, bool p0) { return AppDelegate::trySaveGameO(self, p0); });
    appdelegate.attr("trySaveGameA") = AppDelegate::trySaveGameA;
    appdelegate.attr("trySaveGameN") = "trySaveGame";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::trySaveGameA, AppDelegate::trySaveGameH, (LPVOID*)&AppDelegate::trySaveGameO_);

    appdelegate.def("setupGLView", pybind::overload_cast<AppDelegate*>(&AppDelegate::setupGLView));
    appdelegate.def("setupGLView", pybind::overload_cast<pybind::function>(&AppDelegate::setupGLView));
    appdelegate.def("setupGLViewO", [](AppDelegate* self) { return AppDelegate::setupGLViewO(self); });
    appdelegate.attr("setupGLViewA") = AppDelegate::setupGLViewA;
    appdelegate.attr("setupGLViewN") = "setupGLView";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::setupGLViewA, AppDelegate::setupGLViewH, (LPVOID*)&AppDelegate::setupGLViewO_);

    appdelegate.def("platformShutdown", pybind::overload_cast<AppDelegate*>(&AppDelegate::platformShutdown));
    appdelegate.def("platformShutdown", pybind::overload_cast<pybind::function>(&AppDelegate::platformShutdown));
    appdelegate.def("platformShutdownO", [](AppDelegate* self) { return AppDelegate::platformShutdownO(self); });
    appdelegate.attr("platformShutdownA") = AppDelegate::platformShutdownA;
    appdelegate.attr("platformShutdownN") = "platformShutdown";
    cinnamon::hooks::hookCinnamon((PVOID)AppDelegate::platformShutdownA, AppDelegate::platformShutdownH, (LPVOID*)&AppDelegate::platformShutdownO_);

    auto platformtoolbox = pybind::class_<PlatformToolbox>(m, "PlatformToolbox");
    platformtoolbox.def("gameDidSave", pybind::overload_cast<>(&PlatformToolbox::gameDidSave));
    platformtoolbox.def("gameDidSave", pybind::overload_cast<pybind::function>(&PlatformToolbox::gameDidSave));
    platformtoolbox.def("gameDidSaveO", []() { return PlatformToolbox::gameDidSaveO(); });
    platformtoolbox.attr("gameDidSaveA") = PlatformToolbox::gameDidSaveA;
    platformtoolbox.attr("gameDidSaveN") = "gameDidSave";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::gameDidSaveA, PlatformToolbox::gameDidSaveH, (LPVOID*)&PlatformToolbox::gameDidSaveO_);

    platformtoolbox.def("platformShutdown", pybind::overload_cast<>(&PlatformToolbox::platformShutdown));
    platformtoolbox.def("platformShutdown", pybind::overload_cast<pybind::function>(&PlatformToolbox::platformShutdown));
    platformtoolbox.def("platformShutdownO", []() { return PlatformToolbox::platformShutdownO(); });
    platformtoolbox.attr("platformShutdownA") = PlatformToolbox::platformShutdownA;
    platformtoolbox.attr("platformShutdownN") = "platformShutdown";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::platformShutdownA, PlatformToolbox::platformShutdownH, (LPVOID*)&PlatformToolbox::platformShutdownO_);

    platformtoolbox.def("setKeyboardState", pybind::overload_cast<bool>(&PlatformToolbox::setKeyboardState));
    platformtoolbox.def("setKeyboardState", pybind::overload_cast<pybind::function>(&PlatformToolbox::setKeyboardState));
    platformtoolbox.def("setKeyboardStateO", [](bool p0) { return PlatformToolbox::setKeyboardStateO(p0); });
    platformtoolbox.attr("setKeyboardStateA") = PlatformToolbox::setKeyboardStateA;
    platformtoolbox.attr("setKeyboardStateN") = "setKeyboardState";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::setKeyboardStateA, PlatformToolbox::setKeyboardStateH, (LPVOID*)&PlatformToolbox::setKeyboardStateO_);

    platformtoolbox.def("isLowMemoryDevice", pybind::overload_cast<>(&PlatformToolbox::isLowMemoryDevice));
    platformtoolbox.def("isLowMemoryDevice", pybind::overload_cast<pybind::function>(&PlatformToolbox::isLowMemoryDevice));
    platformtoolbox.def("isLowMemoryDeviceO", []() { return PlatformToolbox::isLowMemoryDeviceO(); });
    platformtoolbox.attr("isLowMemoryDeviceA") = PlatformToolbox::isLowMemoryDeviceA;
    platformtoolbox.attr("isLowMemoryDeviceN") = "isLowMemoryDevice";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::isLowMemoryDeviceA, PlatformToolbox::isLowMemoryDeviceH, (LPVOID*)&PlatformToolbox::isLowMemoryDeviceO_);

    platformtoolbox.def("isNetworkAvailable", pybind::overload_cast<>(&PlatformToolbox::isNetworkAvailable));
    platformtoolbox.def("isNetworkAvailable", pybind::overload_cast<pybind::function>(&PlatformToolbox::isNetworkAvailable));
    platformtoolbox.def("isNetworkAvailableO", []() { return PlatformToolbox::isNetworkAvailableO(); });
    platformtoolbox.attr("isNetworkAvailableA") = PlatformToolbox::isNetworkAvailableA;
    platformtoolbox.attr("isNetworkAvailableN") = "isNetworkAvailable";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::isNetworkAvailableA, PlatformToolbox::isNetworkAvailableH, (LPVOID*)&PlatformToolbox::isNetworkAvailableO_);

    platformtoolbox.def("setBlockBackButton", pybind::overload_cast<PlatformToolbox*, bool>(&PlatformToolbox::setBlockBackButton));
    platformtoolbox.def("setBlockBackButton", pybind::overload_cast<pybind::function>(&PlatformToolbox::setBlockBackButton));
    platformtoolbox.def("setBlockBackButtonO", [](PlatformToolbox* self, bool p0) { return PlatformToolbox::setBlockBackButtonO(self, p0); });
    platformtoolbox.attr("setBlockBackButtonA") = PlatformToolbox::setBlockBackButtonA;
    platformtoolbox.attr("setBlockBackButtonN") = "setBlockBackButton";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::setBlockBackButtonA, PlatformToolbox::setBlockBackButtonH, (LPVOID*)&PlatformToolbox::setBlockBackButtonO_);

    platformtoolbox.def("isSignedInGooglePlay", pybind::overload_cast<>(&PlatformToolbox::isSignedInGooglePlay));
    platformtoolbox.def("isSignedInGooglePlay", pybind::overload_cast<pybind::function>(&PlatformToolbox::isSignedInGooglePlay));
    platformtoolbox.def("isSignedInGooglePlayO", []() { return PlatformToolbox::isSignedInGooglePlayO(); });
    platformtoolbox.attr("isSignedInGooglePlayA") = PlatformToolbox::isSignedInGooglePlayA;
    platformtoolbox.attr("isSignedInGooglePlayN") = "isSignedInGooglePlay";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::isSignedInGooglePlayA, PlatformToolbox::isSignedInGooglePlayH, (LPVOID*)&PlatformToolbox::isSignedInGooglePlayO_);

    platformtoolbox.def("isLocalPlayerAuthenticated", pybind::overload_cast<>(&PlatformToolbox::isLocalPlayerAuthenticated));
    platformtoolbox.def("isLocalPlayerAuthenticated", pybind::overload_cast<pybind::function>(&PlatformToolbox::isLocalPlayerAuthenticated));
    platformtoolbox.def("isLocalPlayerAuthenticatedO", []() { return PlatformToolbox::isLocalPlayerAuthenticatedO(); });
    platformtoolbox.attr("isLocalPlayerAuthenticatedA") = PlatformToolbox::isLocalPlayerAuthenticatedA;
    platformtoolbox.attr("isLocalPlayerAuthenticatedN") = "isLocalPlayerAuthenticated";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::isLocalPlayerAuthenticatedA, PlatformToolbox::isLocalPlayerAuthenticatedH, (LPVOID*)&PlatformToolbox::isLocalPlayerAuthenticatedO_);

    platformtoolbox.def("isHD", pybind::overload_cast<>(&PlatformToolbox::isHD));
    platformtoolbox.def("isHD", pybind::overload_cast<pybind::function>(&PlatformToolbox::isHD));
    platformtoolbox.def("isHDO", []() { return PlatformToolbox::isHDO(); });
    platformtoolbox.attr("isHDA") = PlatformToolbox::isHDA;
    platformtoolbox.attr("isHDN") = "isHD";
    cinnamon::hooks::hookCinnamon((PVOID)PlatformToolbox::isHDA, PlatformToolbox::isHDH, (LPVOID*)&PlatformToolbox::isHDO_);

    auto levelcommentdelegate = pybind::class_<LevelCommentDelegate>(m, "LevelCommentDelegate");
    auto commentuploaddelegate = pybind::class_<CommentUploadDelegate>(m, "CommentUploadDelegate");
    auto userinfodelegate = pybind::class_<UserInfoDelegate>(m, "UserInfoDelegate");
    auto uploadactiondelegate = pybind::class_<UploadActionDelegate>(m, "UploadActionDelegate");
    auto uploadpopupdelegate = pybind::class_<UploadPopupDelegate>(m, "UploadPopupDelegate");
    auto leveldownloaddelegate = pybind::class_<LevelDownloadDelegate>(m, "LevelDownloadDelegate");
    auto leveluploaddelegate = pybind::class_<LevelUploadDelegate>(m, "LevelUploadDelegate");
    auto listuploaddelegate = pybind::class_<ListUploadDelegate>(m, "ListUploadDelegate");
    auto levelupdatedelegate = pybind::class_<LevelUpdateDelegate>(m, "LevelUpdateDelegate");
    auto rateleveldelegate = pybind::class_<RateLevelDelegate>(m, "RateLevelDelegate");
    auto likeitemdelegate = pybind::class_<LikeItemDelegate>(m, "LikeItemDelegate");
    auto leveldeletedelegate = pybind::class_<LevelDeleteDelegate>(m, "LevelDeleteDelegate");
    auto levellistdeletedelegate = pybind::class_<LevelListDeleteDelegate>(m, "LevelListDeleteDelegate");
    auto numberinputdelegate = pybind::class_<NumberInputDelegate>(m, "NumberInputDelegate");
    auto setidpopupdelegate = pybind::class_<SetIDPopupDelegate>(m, "SetIDPopupDelegate");
    setidpopupdelegate.def("setIDPopupClosed", pybind::overload_cast<SetIDPopupDelegate*, SetIDPopup*, int>(&SetIDPopupDelegate::setIDPopupClosed));
    setidpopupdelegate.def("setIDPopupClosed", pybind::overload_cast<pybind::function>(&SetIDPopupDelegate::setIDPopupClosed));
    setidpopupdelegate.def("setIDPopupClosedO", [](SetIDPopupDelegate* self, SetIDPopup* p0, int p1) { return SetIDPopupDelegate::setIDPopupClosedO(self, p0, p1); });
    setidpopupdelegate.attr("setIDPopupClosedA") = SetIDPopupDelegate::setIDPopupClosedA;
    setidpopupdelegate.attr("setIDPopupClosedN") = "setIDPopupClosed";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopupDelegate::setIDPopupClosedA, SetIDPopupDelegate::setIDPopupClosedH, (LPVOID*)&SetIDPopupDelegate::setIDPopupClosedO_);

    auto onlinelistdelegate = pybind::class_<OnlineListDelegate>(m, "OnlineListDelegate");
    auto numberinputlayer = pybind::class_<NumberInputLayer, FLAlertLayer>(m, "NumberInputLayer");
    numberinputlayer.def("create", pybind::overload_cast<>(&NumberInputLayer::create));
    numberinputlayer.def("create", pybind::overload_cast<pybind::function>(&NumberInputLayer::create));
    numberinputlayer.def("createO", []() { return NumberInputLayer::createO(); });
    numberinputlayer.attr("createA") = NumberInputLayer::createA;
    numberinputlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::createA, NumberInputLayer::createH, (LPVOID*)&NumberInputLayer::createO_);

    numberinputlayer.def("onDone", pybind::overload_cast<NumberInputLayer*, cocos2d::CCObject*>(&NumberInputLayer::onDone));
    numberinputlayer.def("onDone", pybind::overload_cast<pybind::function>(&NumberInputLayer::onDone));
    numberinputlayer.def("onDoneO", [](NumberInputLayer* self, cocos2d::CCObject* sender) { return NumberInputLayer::onDoneO(self, sender); });
    numberinputlayer.attr("onDoneA") = NumberInputLayer::onDoneA;
    numberinputlayer.attr("onDoneN") = "onDone";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::onDoneA, NumberInputLayer::onDoneH, (LPVOID*)&NumberInputLayer::onDoneO_);

    numberinputlayer.def("onClose", pybind::overload_cast<NumberInputLayer*, cocos2d::CCObject*>(&NumberInputLayer::onClose));
    numberinputlayer.def("onClose", pybind::overload_cast<pybind::function>(&NumberInputLayer::onClose));
    numberinputlayer.def("onCloseO", [](NumberInputLayer* self, cocos2d::CCObject* sender) { return NumberInputLayer::onCloseO(self, sender); });
    numberinputlayer.attr("onCloseA") = NumberInputLayer::onCloseA;
    numberinputlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::onCloseA, NumberInputLayer::onCloseH, (LPVOID*)&NumberInputLayer::onCloseO_);

    numberinputlayer.def("onNumber", pybind::overload_cast<NumberInputLayer*, cocos2d::CCObject*>(&NumberInputLayer::onNumber));
    numberinputlayer.def("onNumber", pybind::overload_cast<pybind::function>(&NumberInputLayer::onNumber));
    numberinputlayer.def("onNumberO", [](NumberInputLayer* self, cocos2d::CCObject* sender) { return NumberInputLayer::onNumberO(self, sender); });
    numberinputlayer.attr("onNumberA") = NumberInputLayer::onNumberA;
    numberinputlayer.attr("onNumberN") = "onNumber";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::onNumberA, NumberInputLayer::onNumberH, (LPVOID*)&NumberInputLayer::onNumberO_);

    numberinputlayer.def("init", pybind::overload_cast<NumberInputLayer*>(&NumberInputLayer::init));
    numberinputlayer.def("init", pybind::overload_cast<pybind::function>(&NumberInputLayer::init));
    numberinputlayer.def("initO", [](NumberInputLayer* self) { return NumberInputLayer::initO(self); });
    numberinputlayer.attr("initA") = NumberInputLayer::initA;
    numberinputlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::initA, NumberInputLayer::initH, (LPVOID*)&NumberInputLayer::initO_);

    numberinputlayer.def("registerWithTouchDispatcher", pybind::overload_cast<NumberInputLayer*>(&NumberInputLayer::registerWithTouchDispatcher));
    numberinputlayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&NumberInputLayer::registerWithTouchDispatcher));
    numberinputlayer.def("registerWithTouchDispatcherO", [](NumberInputLayer* self) { return NumberInputLayer::registerWithTouchDispatcherO(self); });
    numberinputlayer.attr("registerWithTouchDispatcherA") = NumberInputLayer::registerWithTouchDispatcherA;
    numberinputlayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::registerWithTouchDispatcherA, NumberInputLayer::registerWithTouchDispatcherH, (LPVOID*)&NumberInputLayer::registerWithTouchDispatcherO_);

    numberinputlayer.def("keyBackClicked", pybind::overload_cast<NumberInputLayer*>(&NumberInputLayer::keyBackClicked));
    numberinputlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&NumberInputLayer::keyBackClicked));
    numberinputlayer.def("keyBackClickedO", [](NumberInputLayer* self) { return NumberInputLayer::keyBackClickedO(self); });
    numberinputlayer.attr("keyBackClickedA") = NumberInputLayer::keyBackClickedA;
    numberinputlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)NumberInputLayer::keyBackClickedA, NumberInputLayer::keyBackClickedH, (LPVOID*)&NumberInputLayer::keyBackClickedO_);

    auto setidpopup = pybind::class_<SetIDPopup, FLAlertLayer>(m, "SetIDPopup");
    setidpopup.def("create", pybind::overload_cast<int, int, int, gd::string, gd::string, bool, int, float, bool, bool>(&SetIDPopup::create));
    setidpopup.def("create", pybind::overload_cast<pybind::function>(&SetIDPopup::create));
    setidpopup.def("createO", [](int p0, int p1, int p2, gd::string p3, gd::string p4, bool p5, int p6, float p7, bool p8, bool p9) { return SetIDPopup::createO(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    setidpopup.attr("createA") = SetIDPopup::createA;
    setidpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::createA, SetIDPopup::createH, (LPVOID*)&SetIDPopup::createO_);

    setidpopup.def("init", pybind::overload_cast<SetIDPopup*, int, int, int, gd::string, gd::string, bool, int, float, bool, bool>(&SetIDPopup::init));
    setidpopup.def("init", pybind::overload_cast<pybind::function>(&SetIDPopup::init));
    setidpopup.def("initO", [](SetIDPopup* self, int p0, int p1, int p2, gd::string p3, gd::string p4, bool p5, int p6, float p7, bool p8, bool p9) { return SetIDPopup::initO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); });
    setidpopup.attr("initA") = SetIDPopup::initA;
    setidpopup.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::initA, SetIDPopup::initH, (LPVOID*)&SetIDPopup::initO_);

    setidpopup.def("onResetValue", pybind::overload_cast<SetIDPopup*, cocos2d::CCObject*>(&SetIDPopup::onResetValue));
    setidpopup.def("onResetValue", pybind::overload_cast<pybind::function>(&SetIDPopup::onResetValue));
    setidpopup.def("onResetValueO", [](SetIDPopup* self, cocos2d::CCObject* sender) { return SetIDPopup::onResetValueO(self, sender); });
    setidpopup.attr("onResetValueA") = SetIDPopup::onResetValueA;
    setidpopup.attr("onResetValueN") = "onResetValue";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::onResetValueA, SetIDPopup::onResetValueH, (LPVOID*)&SetIDPopup::onResetValueO_);

    setidpopup.def("onItemIDArrow", pybind::overload_cast<SetIDPopup*, cocos2d::CCObject*>(&SetIDPopup::onItemIDArrow));
    setidpopup.def("onItemIDArrow", pybind::overload_cast<pybind::function>(&SetIDPopup::onItemIDArrow));
    setidpopup.def("onItemIDArrowO", [](SetIDPopup* self, cocos2d::CCObject* sender) { return SetIDPopup::onItemIDArrowO(self, sender); });
    setidpopup.attr("onItemIDArrowA") = SetIDPopup::onItemIDArrowA;
    setidpopup.attr("onItemIDArrowN") = "onItemIDArrow";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::onItemIDArrowA, SetIDPopup::onItemIDArrowH, (LPVOID*)&SetIDPopup::onItemIDArrowO_);

    setidpopup.def("onClose", pybind::overload_cast<SetIDPopup*, cocos2d::CCObject*>(&SetIDPopup::onClose));
    setidpopup.def("onClose", pybind::overload_cast<pybind::function>(&SetIDPopup::onClose));
    setidpopup.def("onCloseO", [](SetIDPopup* self, cocos2d::CCObject* sender) { return SetIDPopup::onCloseO(self, sender); });
    setidpopup.attr("onCloseA") = SetIDPopup::onCloseA;
    setidpopup.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::onCloseA, SetIDPopup::onCloseH, (LPVOID*)&SetIDPopup::onCloseO_);

    setidpopup.def("onCancel", pybind::overload_cast<SetIDPopup*, cocos2d::CCObject*>(&SetIDPopup::onCancel));
    setidpopup.def("onCancel", pybind::overload_cast<pybind::function>(&SetIDPopup::onCancel));
    setidpopup.def("onCancelO", [](SetIDPopup* self, cocos2d::CCObject* sender) { return SetIDPopup::onCancelO(self, sender); });
    setidpopup.attr("onCancelA") = SetIDPopup::onCancelA;
    setidpopup.attr("onCancelN") = "onCancel";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::onCancelA, SetIDPopup::onCancelH, (LPVOID*)&SetIDPopup::onCancelO_);

    setidpopup.def("keyBackClicked", pybind::overload_cast<SetIDPopup*>(&SetIDPopup::keyBackClicked));
    setidpopup.def("keyBackClicked", pybind::overload_cast<pybind::function>(&SetIDPopup::keyBackClicked));
    setidpopup.def("keyBackClickedO", [](SetIDPopup* self) { return SetIDPopup::keyBackClickedO(self); });
    setidpopup.attr("keyBackClickedA") = SetIDPopup::keyBackClickedA;
    setidpopup.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)SetIDPopup::keyBackClickedA, SetIDPopup::keyBackClickedH, (LPVOID*)&SetIDPopup::keyBackClickedO_);

    auto uploadactionpopup = pybind::class_<UploadActionPopup, FLAlertLayer>(m, "UploadActionPopup");
    uploadactionpopup.def("create", pybind::overload_cast<UploadPopupDelegate*, gd::string>(&UploadActionPopup::create));
    uploadactionpopup.def("create", pybind::overload_cast<pybind::function>(&UploadActionPopup::create));
    uploadactionpopup.def("createO", [](UploadPopupDelegate* p0, gd::string p1) { return UploadActionPopup::createO(p0, p1); });
    uploadactionpopup.attr("createA") = UploadActionPopup::createA;
    uploadactionpopup.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)UploadActionPopup::createA, UploadActionPopup::createH, (LPVOID*)&UploadActionPopup::createO_);

    uploadactionpopup.def("init", pybind::overload_cast<UploadActionPopup*, UploadPopupDelegate*, gd::string>(&UploadActionPopup::init));
    uploadactionpopup.def("init", pybind::overload_cast<pybind::function>(&UploadActionPopup::init));
    uploadactionpopup.def("initO", [](UploadActionPopup* self, UploadPopupDelegate* p0, gd::string p1) { return UploadActionPopup::initO(self, p0, p1); });
    uploadactionpopup.attr("initA") = UploadActionPopup::initA;
    uploadactionpopup.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)UploadActionPopup::initA, UploadActionPopup::initH, (LPVOID*)&UploadActionPopup::initO_);

    uploadactionpopup.def("onClose", pybind::overload_cast<UploadActionPopup*, cocos2d::CCObject*>(&UploadActionPopup::onClose));
    uploadactionpopup.def("onClose", pybind::overload_cast<pybind::function>(&UploadActionPopup::onClose));
    uploadactionpopup.def("onCloseO", [](UploadActionPopup* self, cocos2d::CCObject* sender) { return UploadActionPopup::onCloseO(self, sender); });
    uploadactionpopup.attr("onCloseA") = UploadActionPopup::onCloseA;
    uploadactionpopup.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)UploadActionPopup::onCloseA, UploadActionPopup::onCloseH, (LPVOID*)&UploadActionPopup::onCloseO_);

    uploadactionpopup.def("keyBackClicked", pybind::overload_cast<UploadActionPopup*>(&UploadActionPopup::keyBackClicked));
    uploadactionpopup.def("keyBackClicked", pybind::overload_cast<pybind::function>(&UploadActionPopup::keyBackClicked));
    uploadactionpopup.def("keyBackClickedO", [](UploadActionPopup* self) { return UploadActionPopup::keyBackClickedO(self); });
    uploadactionpopup.attr("keyBackClickedA") = UploadActionPopup::keyBackClickedA;
    uploadactionpopup.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)UploadActionPopup::keyBackClickedA, UploadActionPopup::keyBackClickedH, (LPVOID*)&UploadActionPopup::keyBackClickedO_);

    auto leaderboardmanagerdelegate = pybind::class_<LeaderboardManagerDelegate>(m, "LeaderboardManagerDelegate");
    auto gjuserscore = pybind::class_<GJUserScore, cocos2d::CCNode>(m, "GJUserScore");
    gjuserscore.def("create", pybind::overload_cast<cocos2d::CCDictionary*>(&GJUserScore::create));
    gjuserscore.def("create", pybind::overload_cast<pybind::function>(&GJUserScore::create));
    gjuserscore.def("createO", [](cocos2d::CCDictionary* p0) { return GJUserScore::createO(p0); });
    gjuserscore.attr("createA") = GJUserScore::createA;
    gjuserscore.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserScore::createA, GJUserScore::createH, (LPVOID*)&GJUserScore::createO_);

    gjuserscore.def("create", pybind::overload_cast<>(&GJUserScore::create));
    gjuserscore.def("isCurrentUser", pybind::overload_cast<GJUserScore*>(&GJUserScore::isCurrentUser));
    gjuserscore.def("isCurrentUser", pybind::overload_cast<pybind::function>(&GJUserScore::isCurrentUser));
    gjuserscore.def("isCurrentUserO", [](GJUserScore* self) { return GJUserScore::isCurrentUserO(self); });
    gjuserscore.attr("isCurrentUserA") = GJUserScore::isCurrentUserA;
    gjuserscore.attr("isCurrentUserN") = "isCurrentUser";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserScore::isCurrentUserA, GJUserScore::isCurrentUserH, (LPVOID*)&GJUserScore::isCurrentUserO_);

    gjuserscore.def("init", pybind::overload_cast<GJUserScore*>(&GJUserScore::init));
    gjuserscore.def("init", pybind::overload_cast<pybind::function>(&GJUserScore::init));
    gjuserscore.def("initO", [](GJUserScore* self) { return GJUserScore::initO(self); });
    gjuserscore.attr("initA") = GJUserScore::initA;
    gjuserscore.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJUserScore::initA, GJUserScore::initH, (LPVOID*)&GJUserScore::initO_);

    auto profilepage = pybind::class_<ProfilePage, FLAlertLayer>(m, "ProfilePage");
    profilepage.def("create", pybind::overload_cast<int, bool>(&ProfilePage::create));
    profilepage.def("create", pybind::overload_cast<pybind::function>(&ProfilePage::create));
    profilepage.def("createO", [](int p0, bool p1) { return ProfilePage::createO(p0, p1); });
    profilepage.attr("createA") = ProfilePage::createA;
    profilepage.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::createA, ProfilePage::createH, (LPVOID*)&ProfilePage::createO_);

    profilepage.def("init", pybind::overload_cast<ProfilePage*, int, bool>(&ProfilePage::init));
    profilepage.def("init", pybind::overload_cast<pybind::function>(&ProfilePage::init));
    profilepage.def("initO", [](ProfilePage* self, int p0, bool p1) { return ProfilePage::initO(self, p0, p1); });
    profilepage.attr("initA") = ProfilePage::initA;
    profilepage.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::initA, ProfilePage::initH, (LPVOID*)&ProfilePage::initO_);

    profilepage.def("onMessages", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onMessages));
    profilepage.def("onMessages", pybind::overload_cast<pybind::function>(&ProfilePage::onMessages));
    profilepage.def("onMessagesO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onMessagesO(self, sender); });
    profilepage.attr("onMessagesA") = ProfilePage::onMessagesA;
    profilepage.attr("onMessagesN") = "onMessages";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onMessagesA, ProfilePage::onMessagesH, (LPVOID*)&ProfilePage::onMessagesO_);

    profilepage.def("onMyLevels", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onMyLevels));
    profilepage.def("onMyLevels", pybind::overload_cast<pybind::function>(&ProfilePage::onMyLevels));
    profilepage.def("onMyLevelsO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onMyLevelsO(self, sender); });
    profilepage.attr("onMyLevelsA") = ProfilePage::onMyLevelsA;
    profilepage.attr("onMyLevelsN") = "onMyLevels";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onMyLevelsA, ProfilePage::onMyLevelsH, (LPVOID*)&ProfilePage::onMyLevelsO_);

    profilepage.def("onNextPage", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onNextPage));
    profilepage.def("onNextPage", pybind::overload_cast<pybind::function>(&ProfilePage::onNextPage));
    profilepage.def("onNextPageO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onNextPageO(self, sender); });
    profilepage.attr("onNextPageA") = ProfilePage::onNextPageA;
    profilepage.attr("onNextPageN") = "onNextPage";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onNextPageA, ProfilePage::onNextPageH, (LPVOID*)&ProfilePage::onNextPageO_);

    profilepage.def("onPrevPage", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onPrevPage));
    profilepage.def("onPrevPage", pybind::overload_cast<pybind::function>(&ProfilePage::onPrevPage));
    profilepage.def("onPrevPageO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onPrevPageO(self, sender); });
    profilepage.attr("onPrevPageA") = ProfilePage::onPrevPageA;
    profilepage.attr("onPrevPageN") = "onPrevPage";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onPrevPageA, ProfilePage::onPrevPageH, (LPVOID*)&ProfilePage::onPrevPageO_);

    profilepage.def("onRequests", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onRequests));
    profilepage.def("onRequests", pybind::overload_cast<pybind::function>(&ProfilePage::onRequests));
    profilepage.def("onRequestsO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onRequestsO(self, sender); });
    profilepage.attr("onRequestsA") = ProfilePage::onRequestsA;
    profilepage.attr("onRequestsN") = "onRequests";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onRequestsA, ProfilePage::onRequestsH, (LPVOID*)&ProfilePage::onRequestsO_);

    profilepage.def("onSettings", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onSettings));
    profilepage.def("onSettings", pybind::overload_cast<pybind::function>(&ProfilePage::onSettings));
    profilepage.def("onSettingsO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onSettingsO(self, sender); });
    profilepage.attr("onSettingsA") = ProfilePage::onSettingsA;
    profilepage.attr("onSettingsN") = "onSettings";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onSettingsA, ProfilePage::onSettingsH, (LPVOID*)&ProfilePage::onSettingsO_);

    profilepage.def("onBlockUser", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onBlockUser));
    profilepage.def("onBlockUser", pybind::overload_cast<pybind::function>(&ProfilePage::onBlockUser));
    profilepage.def("onBlockUserO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onBlockUserO(self, sender); });
    profilepage.attr("onBlockUserA") = ProfilePage::onBlockUserA;
    profilepage.attr("onBlockUserN") = "onBlockUser";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onBlockUserA, ProfilePage::onBlockUserH, (LPVOID*)&ProfilePage::onBlockUserO_);

    profilepage.def("onSendMessage", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onSendMessage));
    profilepage.def("onSendMessage", pybind::overload_cast<pybind::function>(&ProfilePage::onSendMessage));
    profilepage.def("onSendMessageO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onSendMessageO(self, sender); });
    profilepage.attr("onSendMessageA") = ProfilePage::onSendMessageA;
    profilepage.attr("onSendMessageN") = "onSendMessage";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onSendMessageA, ProfilePage::onSendMessageH, (LPVOID*)&ProfilePage::onSendMessageO_);

    profilepage.def("onCommentHistory", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onCommentHistory));
    profilepage.def("onCommentHistory", pybind::overload_cast<pybind::function>(&ProfilePage::onCommentHistory));
    profilepage.def("onCommentHistoryO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onCommentHistoryO(self, sender); });
    profilepage.attr("onCommentHistoryA") = ProfilePage::onCommentHistoryA;
    profilepage.attr("onCommentHistoryN") = "onCommentHistory";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onCommentHistoryA, ProfilePage::onCommentHistoryH, (LPVOID*)&ProfilePage::onCommentHistoryO_);

    profilepage.def("onClose", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onClose));
    profilepage.def("onClose", pybind::overload_cast<pybind::function>(&ProfilePage::onClose));
    profilepage.def("onCloseO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onCloseO(self, sender); });
    profilepage.attr("onCloseA") = ProfilePage::onCloseA;
    profilepage.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onCloseA, ProfilePage::onCloseH, (LPVOID*)&ProfilePage::onCloseO_);

    profilepage.def("onFollow", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onFollow));
    profilepage.def("onFollow", pybind::overload_cast<pybind::function>(&ProfilePage::onFollow));
    profilepage.def("onFollowO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onFollowO(self, sender); });
    profilepage.attr("onFollowA") = ProfilePage::onFollowA;
    profilepage.attr("onFollowN") = "onFollow";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onFollowA, ProfilePage::onFollowH, (LPVOID*)&ProfilePage::onFollowO_);

    profilepage.def("onFriend", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onFriend));
    profilepage.def("onFriend", pybind::overload_cast<pybind::function>(&ProfilePage::onFriend));
    profilepage.def("onFriendO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onFriendO(self, sender); });
    profilepage.attr("onFriendA") = ProfilePage::onFriendA;
    profilepage.attr("onFriendN") = "onFriend";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onFriendA, ProfilePage::onFriendH, (LPVOID*)&ProfilePage::onFriendO_);

    profilepage.def("onTwitch", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onTwitch));
    profilepage.def("onTwitch", pybind::overload_cast<pybind::function>(&ProfilePage::onTwitch));
    profilepage.def("onTwitchO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onTwitchO(self, sender); });
    profilepage.attr("onTwitchA") = ProfilePage::onTwitchA;
    profilepage.attr("onTwitchN") = "onTwitch";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onTwitchA, ProfilePage::onTwitchH, (LPVOID*)&ProfilePage::onTwitchO_);

    profilepage.def("onUpdate", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onUpdate));
    profilepage.def("onUpdate", pybind::overload_cast<pybind::function>(&ProfilePage::onUpdate));
    profilepage.def("onUpdateO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onUpdateO(self, sender); });
    profilepage.attr("onUpdateA") = ProfilePage::onUpdateA;
    profilepage.attr("onUpdateN") = "onUpdate";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onUpdateA, ProfilePage::onUpdateH, (LPVOID*)&ProfilePage::onUpdateO_);

    profilepage.def("onComment", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onComment));
    profilepage.def("onComment", pybind::overload_cast<pybind::function>(&ProfilePage::onComment));
    profilepage.def("onCommentO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onCommentO(self, sender); });
    profilepage.attr("onCommentA") = ProfilePage::onCommentA;
    profilepage.attr("onCommentN") = "onComment";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onCommentA, ProfilePage::onCommentH, (LPVOID*)&ProfilePage::onCommentO_);

    profilepage.def("onFriends", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onFriends));
    profilepage.def("onFriends", pybind::overload_cast<pybind::function>(&ProfilePage::onFriends));
    profilepage.def("onFriendsO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onFriendsO(self, sender); });
    profilepage.attr("onFriendsA") = ProfilePage::onFriendsA;
    profilepage.attr("onFriendsN") = "onFriends";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onFriendsA, ProfilePage::onFriendsH, (LPVOID*)&ProfilePage::onFriendsO_);

    profilepage.def("onMyLists", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onMyLists));
    profilepage.def("onMyLists", pybind::overload_cast<pybind::function>(&ProfilePage::onMyLists));
    profilepage.def("onMyListsO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onMyListsO(self, sender); });
    profilepage.attr("onMyListsA") = ProfilePage::onMyListsA;
    profilepage.attr("onMyListsN") = "onMyLists";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onMyListsA, ProfilePage::onMyListsH, (LPVOID*)&ProfilePage::onMyListsO_);

    profilepage.def("onTwitter", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onTwitter));
    profilepage.def("onTwitter", pybind::overload_cast<pybind::function>(&ProfilePage::onTwitter));
    profilepage.def("onTwitterO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onTwitterO(self, sender); });
    profilepage.attr("onTwitterA") = ProfilePage::onTwitterA;
    profilepage.attr("onTwitterN") = "onTwitter";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onTwitterA, ProfilePage::onTwitterH, (LPVOID*)&ProfilePage::onTwitterO_);

    profilepage.def("onYouTube", pybind::overload_cast<ProfilePage*, cocos2d::CCObject*>(&ProfilePage::onYouTube));
    profilepage.def("onYouTube", pybind::overload_cast<pybind::function>(&ProfilePage::onYouTube));
    profilepage.def("onYouTubeO", [](ProfilePage* self, cocos2d::CCObject* sender) { return ProfilePage::onYouTubeO(self, sender); });
    profilepage.attr("onYouTubeA") = ProfilePage::onYouTubeA;
    profilepage.attr("onYouTubeN") = "onYouTube";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::onYouTubeA, ProfilePage::onYouTubeH, (LPVOID*)&ProfilePage::onYouTubeO_);

    profilepage.def("isOnWatchlist", pybind::overload_cast<ProfilePage*, int>(&ProfilePage::isOnWatchlist));
    profilepage.def("isOnWatchlist", pybind::overload_cast<pybind::function>(&ProfilePage::isOnWatchlist));
    profilepage.def("isOnWatchlistO", [](ProfilePage* self, int p0) { return ProfilePage::isOnWatchlistO(self, p0); });
    profilepage.attr("isOnWatchlistA") = ProfilePage::isOnWatchlistA;
    profilepage.attr("isOnWatchlistN") = "isOnWatchlist";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::isOnWatchlistA, ProfilePage::isOnWatchlistH, (LPVOID*)&ProfilePage::isOnWatchlistO_);

    profilepage.def("show", pybind::overload_cast<ProfilePage*>(&ProfilePage::show));
    profilepage.def("show", pybind::overload_cast<pybind::function>(&ProfilePage::show));
    profilepage.def("showO", [](ProfilePage* self) { return ProfilePage::showO(self); });
    profilepage.attr("showA") = ProfilePage::showA;
    profilepage.attr("showN") = "show";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::showA, ProfilePage::showH, (LPVOID*)&ProfilePage::showO_);

    profilepage.def("isCorrect", pybind::overload_cast<ProfilePage*, char const*>(&ProfilePage::isCorrect));
    profilepage.def("isCorrect", pybind::overload_cast<pybind::function>(&ProfilePage::isCorrect));
    profilepage.def("isCorrectO", [](ProfilePage* self, char const* p0) { return ProfilePage::isCorrectO(self, p0); });
    profilepage.attr("isCorrectA") = ProfilePage::isCorrectA;
    profilepage.attr("isCorrectN") = "isCorrect";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::isCorrectA, ProfilePage::isCorrectH, (LPVOID*)&ProfilePage::isCorrectO_);

    profilepage.def("registerWithTouchDispatcher", pybind::overload_cast<ProfilePage*>(&ProfilePage::registerWithTouchDispatcher));
    profilepage.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&ProfilePage::registerWithTouchDispatcher));
    profilepage.def("registerWithTouchDispatcherO", [](ProfilePage* self) { return ProfilePage::registerWithTouchDispatcherO(self); });
    profilepage.attr("registerWithTouchDispatcherA") = ProfilePage::registerWithTouchDispatcherA;
    profilepage.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::registerWithTouchDispatcherA, ProfilePage::registerWithTouchDispatcherH, (LPVOID*)&ProfilePage::registerWithTouchDispatcherO_);

    profilepage.def("keyBackClicked", pybind::overload_cast<ProfilePage*>(&ProfilePage::keyBackClicked));
    profilepage.def("keyBackClicked", pybind::overload_cast<pybind::function>(&ProfilePage::keyBackClicked));
    profilepage.def("keyBackClickedO", [](ProfilePage* self) { return ProfilePage::keyBackClickedO(self); });
    profilepage.attr("keyBackClickedA") = ProfilePage::keyBackClickedA;
    profilepage.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)ProfilePage::keyBackClickedA, ProfilePage::keyBackClickedH, (LPVOID*)&ProfilePage::keyBackClickedO_);

    auto sliderthumb = pybind::class_<SliderThumb, cocos2d::CCMenuItemImage>(m, "SliderThumb");
    sliderthumb.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*>(&SliderThumb::create));
    sliderthumb.def("create", pybind::overload_cast<pybind::function>(&SliderThumb::create));
    sliderthumb.def("createO", [](cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3) { return SliderThumb::createO(p0, p1, p2, p3); });
    sliderthumb.attr("createA") = SliderThumb::createA;
    sliderthumb.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::createA, SliderThumb::createH, (LPVOID*)&SliderThumb::createO_);

    sliderthumb.def("init", pybind::overload_cast<SliderThumb*, cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*>(&SliderThumb::init));
    sliderthumb.def("init", pybind::overload_cast<pybind::function>(&SliderThumb::init));
    sliderthumb.def("initO", [](SliderThumb* self, cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3) { return SliderThumb::initO(self, p0, p1, p2, p3); });
    sliderthumb.attr("initA") = SliderThumb::initA;
    sliderthumb.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::initA, SliderThumb::initH, (LPVOID*)&SliderThumb::initO_);

    sliderthumb.def("getValue", pybind::overload_cast<SliderThumb*>(&SliderThumb::getValue));
    sliderthumb.def("getValue", pybind::overload_cast<pybind::function>(&SliderThumb::getValue));
    sliderthumb.def("getValueO", [](SliderThumb* self) { return SliderThumb::getValueO(self); });
    sliderthumb.attr("getValueA") = SliderThumb::getValueA;
    sliderthumb.attr("getValueN") = "getValue";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::getValueA, SliderThumb::getValueH, (LPVOID*)&SliderThumb::getValueO_);

    sliderthumb.def("setRotated", pybind::overload_cast<SliderThumb*, bool>(&SliderThumb::setRotated));
    sliderthumb.def("setRotated", pybind::overload_cast<pybind::function>(&SliderThumb::setRotated));
    sliderthumb.def("setRotatedO", [](SliderThumb* self, bool p0) { return SliderThumb::setRotatedO(self, p0); });
    sliderthumb.attr("setRotatedA") = SliderThumb::setRotatedA;
    sliderthumb.attr("setRotatedN") = "setRotated";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::setRotatedA, SliderThumb::setRotatedH, (LPVOID*)&SliderThumb::setRotatedO_);

    sliderthumb.def("setMaxOffset", pybind::overload_cast<SliderThumb*, float>(&SliderThumb::setMaxOffset));
    sliderthumb.def("setMaxOffset", pybind::overload_cast<pybind::function>(&SliderThumb::setMaxOffset));
    sliderthumb.def("setMaxOffsetO", [](SliderThumb* self, float p0) { return SliderThumb::setMaxOffsetO(self, p0); });
    sliderthumb.attr("setMaxOffsetA") = SliderThumb::setMaxOffsetA;
    sliderthumb.attr("setMaxOffsetN") = "setMaxOffset";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::setMaxOffsetA, SliderThumb::setMaxOffsetH, (LPVOID*)&SliderThumb::setMaxOffsetO_);

    sliderthumb.def("setValue", pybind::overload_cast<SliderThumb*, float>(&SliderThumb::setValue));
    sliderthumb.def("setValue", pybind::overload_cast<pybind::function>(&SliderThumb::setValue));
    sliderthumb.def("setValueO", [](SliderThumb* self, float p0) { return SliderThumb::setValueO(self, p0); });
    sliderthumb.attr("setValueA") = SliderThumb::setValueA;
    sliderthumb.attr("setValueN") = "setValue";
    cinnamon::hooks::hookCinnamon((PVOID)SliderThumb::setValueA, SliderThumb::setValueH, (LPVOID*)&SliderThumb::setValueO_);

    auto colorchannelsprite = pybind::class_<ColorChannelSprite, cocos2d::CCSprite>(m, "ColorChannelSprite");
    colorchannelsprite.def("create", pybind::overload_cast<>(&ColorChannelSprite::create));
    colorchannelsprite.def("create", pybind::overload_cast<pybind::function>(&ColorChannelSprite::create));
    colorchannelsprite.def("createO", []() { return ColorChannelSprite::createO(); });
    colorchannelsprite.attr("createA") = ColorChannelSprite::createA;
    colorchannelsprite.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::createA, ColorChannelSprite::createH, (LPVOID*)&ColorChannelSprite::createO_);

    colorchannelsprite.def("init", pybind::overload_cast<ColorChannelSprite*>(&ColorChannelSprite::init));
    colorchannelsprite.def("init", pybind::overload_cast<pybind::function>(&ColorChannelSprite::init));
    colorchannelsprite.def("initO", [](ColorChannelSprite* self) { return ColorChannelSprite::initO(self); });
    colorchannelsprite.attr("initA") = ColorChannelSprite::initA;
    colorchannelsprite.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ColorChannelSprite::initA, ColorChannelSprite::initH, (LPVOID*)&ColorChannelSprite::initO_);

    auto gjdropdownlayerdelegate = pybind::class_<GJDropDownLayerDelegate>(m, "GJDropDownLayerDelegate");
    auto statscell = pybind::class_<StatsCell, TableViewCell>(m, "StatsCell");
    statscell.def("init", pybind::overload_cast<StatsCell*>(&StatsCell::init));
    statscell.def("init", pybind::overload_cast<pybind::function>(&StatsCell::init));
    statscell.def("initO", [](StatsCell* self) { return StatsCell::initO(self); });
    statscell.attr("initA") = StatsCell::initA;
    statscell.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)StatsCell::initA, StatsCell::initH, (LPVOID*)&StatsCell::initO_);

    statscell.def("draw", pybind::overload_cast<StatsCell*>(&StatsCell::draw));
    statscell.def("draw", pybind::overload_cast<pybind::function>(&StatsCell::draw));
    statscell.def("drawO", [](StatsCell* self) { return StatsCell::drawO(self); });
    statscell.attr("drawA") = StatsCell::drawA;
    statscell.attr("drawN") = "draw";
    cinnamon::hooks::hookCinnamon((PVOID)StatsCell::drawA, StatsCell::drawH, (LPVOID*)&StatsCell::drawO_);

    auto statsobject = pybind::class_<StatsObject, cocos2d::CCObject>(m, "StatsObject");
    statsobject.def("create", pybind::overload_cast<char const*, int>(&StatsObject::create));
    statsobject.def("create", pybind::overload_cast<pybind::function>(&StatsObject::create));
    statsobject.def("createO", [](char const* p0, int p1) { return StatsObject::createO(p0, p1); });
    statsobject.attr("createA") = StatsObject::createA;
    statsobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)StatsObject::createA, StatsObject::createH, (LPVOID*)&StatsObject::createO_);

    statsobject.def("init", pybind::overload_cast<StatsObject*, char const*, int>(&StatsObject::init));
    statsobject.def("init", pybind::overload_cast<pybind::function>(&StatsObject::init));
    statsobject.def("initO", [](StatsObject* self, char const* p0, int p1) { return StatsObject::initO(self, p0, p1); });
    statsobject.attr("initA") = StatsObject::initA;
    statsobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)StatsObject::initA, StatsObject::initH, (LPVOID*)&StatsObject::initO_);

    auto slidertouchlogic = pybind::class_<SliderTouchLogic, cocos2d::CCMenu>(m, "SliderTouchLogic");
    slidertouchlogic.def("create", pybind::overload_cast<cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, float>(&SliderTouchLogic::create));
    slidertouchlogic.def("create", pybind::overload_cast<pybind::function>(&SliderTouchLogic::create));
    slidertouchlogic.def("createO", [](cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3, float p4) { return SliderTouchLogic::createO(p0, p1, p2, p3, p4); });
    slidertouchlogic.attr("createA") = SliderTouchLogic::createA;
    slidertouchlogic.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SliderTouchLogic::createA, SliderTouchLogic::createH, (LPVOID*)&SliderTouchLogic::createO_);

    slidertouchlogic.def("init", pybind::overload_cast<SliderTouchLogic*, cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, float>(&SliderTouchLogic::init));
    slidertouchlogic.def("init", pybind::overload_cast<pybind::function>(&SliderTouchLogic::init));
    slidertouchlogic.def("initO", [](SliderTouchLogic* self, cocos2d::CCNode* p0, cocos2d::SEL_MenuHandler p1, char const* p2, char const* p3, float p4) { return SliderTouchLogic::initO(self, p0, p1, p2, p3, p4); });
    slidertouchlogic.attr("initA") = SliderTouchLogic::initA;
    slidertouchlogic.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SliderTouchLogic::initA, SliderTouchLogic::initH, (LPVOID*)&SliderTouchLogic::initO_);

    slidertouchlogic.def("setRotated", pybind::overload_cast<SliderTouchLogic*, bool>(&SliderTouchLogic::setRotated));
    slidertouchlogic.def("setRotated", pybind::overload_cast<pybind::function>(&SliderTouchLogic::setRotated));
    slidertouchlogic.def("setRotatedO", [](SliderTouchLogic* self, bool p0) { return SliderTouchLogic::setRotatedO(self, p0); });
    slidertouchlogic.attr("setRotatedA") = SliderTouchLogic::setRotatedA;
    slidertouchlogic.attr("setRotatedN") = "setRotated";
    cinnamon::hooks::hookCinnamon((PVOID)SliderTouchLogic::setRotatedA, SliderTouchLogic::setRotatedH, (LPVOID*)&SliderTouchLogic::setRotatedO_);

    slidertouchlogic.def("setMaxOffset", pybind::overload_cast<SliderTouchLogic*, float>(&SliderTouchLogic::setMaxOffset));
    slidertouchlogic.def("setMaxOffset", pybind::overload_cast<pybind::function>(&SliderTouchLogic::setMaxOffset));
    slidertouchlogic.def("setMaxOffsetO", [](SliderTouchLogic* self, float p0) { return SliderTouchLogic::setMaxOffsetO(self, p0); });
    slidertouchlogic.attr("setMaxOffsetA") = SliderTouchLogic::setMaxOffsetA;
    slidertouchlogic.attr("setMaxOffsetN") = "setMaxOffset";
    cinnamon::hooks::hookCinnamon((PVOID)SliderTouchLogic::setMaxOffsetA, SliderTouchLogic::setMaxOffsetH, (LPVOID*)&SliderTouchLogic::setMaxOffsetO_);

    slidertouchlogic.def("registerWithTouchDispatcher", pybind::overload_cast<SliderTouchLogic*>(&SliderTouchLogic::registerWithTouchDispatcher));
    slidertouchlogic.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&SliderTouchLogic::registerWithTouchDispatcher));
    slidertouchlogic.def("registerWithTouchDispatcherO", [](SliderTouchLogic* self) { return SliderTouchLogic::registerWithTouchDispatcherO(self); });
    slidertouchlogic.attr("registerWithTouchDispatcherA") = SliderTouchLogic::registerWithTouchDispatcherA;
    slidertouchlogic.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)SliderTouchLogic::registerWithTouchDispatcherA, SliderTouchLogic::registerWithTouchDispatcherH, (LPVOID*)&SliderTouchLogic::registerWithTouchDispatcherO_);

    auto gametoolbox = pybind::class_<GameToolbox>(m, "GameToolbox");
    gametoolbox.def("isRateEasing", pybind::overload_cast<int>(&GameToolbox::isRateEasing));
    gametoolbox.def("isRateEasing", pybind::overload_cast<pybind::function>(&GameToolbox::isRateEasing));
    gametoolbox.def("isRateEasingO", [](int p0) { return GameToolbox::isRateEasingO(p0); });
    gametoolbox.attr("isRateEasingA") = GameToolbox::isRateEasingA;
    gametoolbox.attr("isRateEasingN") = "isRateEasing";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::isRateEasingA, GameToolbox::isRateEasingH, (LPVOID*)&GameToolbox::isRateEasingO_);

    gametoolbox.def("createToggleButton", pybind::overload_cast<gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, cocos2d::CCPoint, char const*, bool, int, cocos2d::CCArray*>(&GameToolbox::createToggleButton));
    gametoolbox.def("createToggleButton", pybind::overload_cast<pybind::function>(&GameToolbox::createToggleButton));
    gametoolbox.def("createToggleButtonO", [](gd::string p0, cocos2d::SEL_MenuHandler p1, bool p2, cocos2d::CCMenu* p3, cocos2d::CCPoint p4, cocos2d::CCNode* p5, cocos2d::CCNode* p6, float p7, float p8, float p9, cocos2d::CCPoint p10, char const* p11, bool p12, int p13, cocos2d::CCArray* p14) { return GameToolbox::createToggleButtonO(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14); });
    gametoolbox.attr("createToggleButtonA") = GameToolbox::createToggleButtonA;
    gametoolbox.attr("createToggleButtonN") = "createToggleButton";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::createToggleButtonA, GameToolbox::createToggleButtonH, (LPVOID*)&GameToolbox::createToggleButtonO_);

    gametoolbox.def("createToggleButton", pybind::overload_cast<gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCArray*>(&GameToolbox::createToggleButton));
    gametoolbox.def("isIOS", pybind::overload_cast<>(&GameToolbox::isIOS));
    gametoolbox.def("isIOS", pybind::overload_cast<pybind::function>(&GameToolbox::isIOS));
    gametoolbox.def("isIOSO", []() { return GameToolbox::isIOSO(); });
    gametoolbox.attr("isIOSA") = GameToolbox::isIOSA;
    gametoolbox.attr("isIOSN") = "isIOS";
    cinnamon::hooks::hookCinnamon((PVOID)GameToolbox::isIOSA, GameToolbox::isIOSH, (LPVOID*)&GameToolbox::isIOSO_);

    auto boomscrolllayer = pybind::class_<BoomScrollLayer, cocos2d::CCLayer>(m, "BoomScrollLayer");
    boomscrolllayer.def("create", pybind::overload_cast<cocos2d::CCArray*, int, bool>(&BoomScrollLayer::create));
    boomscrolllayer.def("create", pybind::overload_cast<pybind::function>(&BoomScrollLayer::create));
    boomscrolllayer.def("createO", [](cocos2d::CCArray* p0, int p1, bool p2) { return BoomScrollLayer::createO(p0, p1, p2); });
    boomscrolllayer.attr("createA") = BoomScrollLayer::createA;
    boomscrolllayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::createA, BoomScrollLayer::createH, (LPVOID*)&BoomScrollLayer::createO_);

    boomscrolllayer.def("create", pybind::overload_cast<cocos2d::CCArray*, int, bool, cocos2d::CCArray*, void*>(&BoomScrollLayer::create));
    boomscrolllayer.def("init", pybind::overload_cast<BoomScrollLayer*, cocos2d::CCArray*, int, bool, cocos2d::CCArray*, void*>(&BoomScrollLayer::init));
    boomscrolllayer.def("init", pybind::overload_cast<pybind::function>(&BoomScrollLayer::init));
    boomscrolllayer.def("initO", [](BoomScrollLayer* self, cocos2d::CCArray* p0, int p1, bool p2, cocos2d::CCArray* p3, void* p4) { return BoomScrollLayer::initO(self, p0, p1, p2, p3, p4); });
    boomscrolllayer.attr("initA") = BoomScrollLayer::initA;
    boomscrolllayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::initA, BoomScrollLayer::initH, (LPVOID*)&BoomScrollLayer::initO_);

    boomscrolllayer.def("setDotScale", pybind::overload_cast<BoomScrollLayer*, float>(&BoomScrollLayer::setDotScale));
    boomscrolllayer.def("setDotScale", pybind::overload_cast<pybind::function>(&BoomScrollLayer::setDotScale));
    boomscrolllayer.def("setDotScaleO", [](BoomScrollLayer* self, float p0) { return BoomScrollLayer::setDotScaleO(self, p0); });
    boomscrolllayer.attr("setDotScaleA") = BoomScrollLayer::setDotScaleA;
    boomscrolllayer.attr("setDotScaleN") = "setDotScale";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::setDotScaleA, BoomScrollLayer::setDotScaleH, (LPVOID*)&BoomScrollLayer::setDotScaleO_);

    boomscrolllayer.def("setPagesIndicatorPosition", pybind::overload_cast<BoomScrollLayer*, cocos2d::CCPoint>(&BoomScrollLayer::setPagesIndicatorPosition));
    boomscrolllayer.def("setPagesIndicatorPosition", pybind::overload_cast<pybind::function>(&BoomScrollLayer::setPagesIndicatorPosition));
    boomscrolllayer.def("setPagesIndicatorPositionO", [](BoomScrollLayer* self, cocos2d::CCPoint p0) { return BoomScrollLayer::setPagesIndicatorPositionO(self, p0); });
    boomscrolllayer.attr("setPagesIndicatorPositionA") = BoomScrollLayer::setPagesIndicatorPositionA;
    boomscrolllayer.attr("setPagesIndicatorPositionN") = "setPagesIndicatorPosition";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::setPagesIndicatorPositionA, BoomScrollLayer::setPagesIndicatorPositionH, (LPVOID*)&BoomScrollLayer::setPagesIndicatorPositionO_);

    boomscrolllayer.def("visit", pybind::overload_cast<BoomScrollLayer*>(&BoomScrollLayer::visit));
    boomscrolllayer.def("visit", pybind::overload_cast<pybind::function>(&BoomScrollLayer::visit));
    boomscrolllayer.def("visitO", [](BoomScrollLayer* self) { return BoomScrollLayer::visitO(self); });
    boomscrolllayer.attr("visitA") = BoomScrollLayer::visitA;
    boomscrolllayer.attr("visitN") = "visit";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::visitA, BoomScrollLayer::visitH, (LPVOID*)&BoomScrollLayer::visitO_);

    boomscrolllayer.def("registerWithTouchDispatcher", pybind::overload_cast<BoomScrollLayer*>(&BoomScrollLayer::registerWithTouchDispatcher));
    boomscrolllayer.def("registerWithTouchDispatcher", pybind::overload_cast<pybind::function>(&BoomScrollLayer::registerWithTouchDispatcher));
    boomscrolllayer.def("registerWithTouchDispatcherO", [](BoomScrollLayer* self) { return BoomScrollLayer::registerWithTouchDispatcherO(self); });
    boomscrolllayer.attr("registerWithTouchDispatcherA") = BoomScrollLayer::registerWithTouchDispatcherA;
    boomscrolllayer.attr("registerWithTouchDispatcherN") = "registerWithTouchDispatcher";
    cinnamon::hooks::hookCinnamon((PVOID)BoomScrollLayer::registerWithTouchDispatcherA, BoomScrollLayer::registerWithTouchDispatcherH, (LPVOID*)&BoomScrollLayer::registerWithTouchDispatcherO_);

    auto levelinfolayer = pybind::class_<LevelInfoLayer, cocos2d::CCLayer>(m, "LevelInfoLayer");
    levelinfolayer.def("create", pybind::overload_cast<GJGameLevel*, bool>(&LevelInfoLayer::create));
    levelinfolayer.def("create", pybind::overload_cast<pybind::function>(&LevelInfoLayer::create));
    levelinfolayer.def("createO", [](GJGameLevel* p0, bool p1) { return LevelInfoLayer::createO(p0, p1); });
    levelinfolayer.attr("createA") = LevelInfoLayer::createA;
    levelinfolayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::createA, LevelInfoLayer::createH, (LPVOID*)&LevelInfoLayer::createO_);

    levelinfolayer.def("init", pybind::overload_cast<LevelInfoLayer*, GJGameLevel*, bool>(&LevelInfoLayer::init));
    levelinfolayer.def("init", pybind::overload_cast<pybind::function>(&LevelInfoLayer::init));
    levelinfolayer.def("initO", [](LevelInfoLayer* self, GJGameLevel* p0, bool p1) { return LevelInfoLayer::initO(self, p0, p1); });
    levelinfolayer.attr("initA") = LevelInfoLayer::initA;
    levelinfolayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::initA, LevelInfoLayer::initH, (LPVOID*)&LevelInfoLayer::initO_);

    levelinfolayer.def("setIDPopupClosed", pybind::overload_cast<LevelInfoLayer*, SetIDPopup*, int>(&LevelInfoLayer::setIDPopupClosed));
    levelinfolayer.def("setIDPopupClosed", pybind::overload_cast<pybind::function>(&LevelInfoLayer::setIDPopupClosed));
    levelinfolayer.def("setIDPopupClosedO", [](LevelInfoLayer* self, SetIDPopup* p0, int p1) { return LevelInfoLayer::setIDPopupClosedO(self, p0, p1); });
    levelinfolayer.attr("setIDPopupClosedA") = LevelInfoLayer::setIDPopupClosedA;
    levelinfolayer.attr("setIDPopupClosedN") = "setIDPopupClosed";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::setIDPopupClosedA, LevelInfoLayer::setIDPopupClosedH, (LPVOID*)&LevelInfoLayer::setIDPopupClosedO_);

    levelinfolayer.def("onFavorite", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onFavorite));
    levelinfolayer.def("onFavorite", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onFavorite));
    levelinfolayer.def("onFavoriteO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onFavoriteO(self, sender); });
    levelinfolayer.attr("onFavoriteA") = LevelInfoLayer::onFavoriteA;
    levelinfolayer.attr("onFavoriteN") = "onFavorite";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onFavoriteA, LevelInfoLayer::onFavoriteH, (LPVOID*)&LevelInfoLayer::onFavoriteO_);

    levelinfolayer.def("onFeatured", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onFeatured));
    levelinfolayer.def("onFeatured", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onFeatured));
    levelinfolayer.def("onFeaturedO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onFeaturedO(self, sender); });
    levelinfolayer.attr("onFeaturedA") = LevelInfoLayer::onFeaturedA;
    levelinfolayer.attr("onFeaturedN") = "onFeatured";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onFeaturedA, LevelInfoLayer::onFeaturedH, (LPVOID*)&LevelInfoLayer::onFeaturedO_);

    levelinfolayer.def("onAddToList", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onAddToList));
    levelinfolayer.def("onAddToList", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onAddToList));
    levelinfolayer.def("onAddToListO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onAddToListO(self, sender); });
    levelinfolayer.attr("onAddToListA") = LevelInfoLayer::onAddToListA;
    levelinfolayer.attr("onAddToListN") = "onAddToList";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onAddToListA, LevelInfoLayer::onAddToListH, (LPVOID*)&LevelInfoLayer::onAddToListO_);

    levelinfolayer.def("onLevelInfo", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onLevelInfo));
    levelinfolayer.def("onLevelInfo", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onLevelInfo));
    levelinfolayer.def("onLevelInfoO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onLevelInfoO(self, sender); });
    levelinfolayer.attr("onLevelInfoA") = LevelInfoLayer::onLevelInfoA;
    levelinfolayer.attr("onLevelInfoN") = "onLevelInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onLevelInfoA, LevelInfoLayer::onLevelInfoH, (LPVOID*)&LevelInfoLayer::onLevelInfoO_);

    levelinfolayer.def("onRateDemon", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onRateDemon));
    levelinfolayer.def("onRateDemon", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onRateDemon));
    levelinfolayer.def("onRateDemonO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onRateDemonO(self, sender); });
    levelinfolayer.attr("onRateDemonA") = LevelInfoLayer::onRateDemonA;
    levelinfolayer.attr("onRateDemonN") = "onRateDemon";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onRateDemonA, LevelInfoLayer::onRateDemonH, (LPVOID*)&LevelInfoLayer::onRateDemonO_);

    levelinfolayer.def("onRateStars", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onRateStars));
    levelinfolayer.def("onRateStars", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onRateStars));
    levelinfolayer.def("onRateStarsO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onRateStarsO(self, sender); });
    levelinfolayer.attr("onRateStarsA") = LevelInfoLayer::onRateStarsA;
    levelinfolayer.attr("onRateStarsN") = "onRateStars";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onRateStarsA, LevelInfoLayer::onRateStarsH, (LPVOID*)&LevelInfoLayer::onRateStarsO_);

    levelinfolayer.def("onSetFolder", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onSetFolder));
    levelinfolayer.def("onSetFolder", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onSetFolder));
    levelinfolayer.def("onSetFolderO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onSetFolderO(self, sender); });
    levelinfolayer.attr("onSetFolderA") = LevelInfoLayer::onSetFolderA;
    levelinfolayer.attr("onSetFolderN") = "onSetFolder";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onSetFolderA, LevelInfoLayer::onSetFolderH, (LPVOID*)&LevelInfoLayer::onSetFolderO_);

    levelinfolayer.def("onPlayReplay", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onPlayReplay));
    levelinfolayer.def("onPlayReplay", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onPlayReplay));
    levelinfolayer.def("onPlayReplayO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onPlayReplayO(self, sender); });
    levelinfolayer.attr("onPlayReplayA") = LevelInfoLayer::onPlayReplayA;
    levelinfolayer.attr("onPlayReplayN") = "onPlayReplay";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onPlayReplayA, LevelInfoLayer::onPlayReplayH, (LPVOID*)&LevelInfoLayer::onPlayReplayO_);

    levelinfolayer.def("onOwnerDelete", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onOwnerDelete));
    levelinfolayer.def("onOwnerDelete", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onOwnerDelete));
    levelinfolayer.def("onOwnerDeleteO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onOwnerDeleteO(self, sender); });
    levelinfolayer.attr("onOwnerDeleteA") = LevelInfoLayer::onOwnerDeleteA;
    levelinfolayer.attr("onOwnerDeleteN") = "onOwnerDelete";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onOwnerDeleteA, LevelInfoLayer::onOwnerDeleteH, (LPVOID*)&LevelInfoLayer::onOwnerDeleteO_);

    levelinfolayer.def("onViewProfile", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onViewProfile));
    levelinfolayer.def("onViewProfile", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onViewProfile));
    levelinfolayer.def("onViewProfileO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onViewProfileO(self, sender); });
    levelinfolayer.attr("onViewProfileA") = LevelInfoLayer::onViewProfileA;
    levelinfolayer.attr("onViewProfileN") = "onViewProfile";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onViewProfileA, LevelInfoLayer::onViewProfileH, (LPVOID*)&LevelInfoLayer::onViewProfileO_);

    levelinfolayer.def("onRateStarsMod", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onRateStarsMod));
    levelinfolayer.def("onRateStarsMod", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onRateStarsMod));
    levelinfolayer.def("onRateStarsModO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onRateStarsModO(self, sender); });
    levelinfolayer.attr("onRateStarsModA") = LevelInfoLayer::onRateStarsModA;
    levelinfolayer.attr("onRateStarsModN") = "onRateStarsMod";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onRateStarsModA, LevelInfoLayer::onRateStarsModH, (LPVOID*)&LevelInfoLayer::onRateStarsModO_);

    levelinfolayer.def("onLowDetailMode", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onLowDetailMode));
    levelinfolayer.def("onLowDetailMode", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onLowDetailMode));
    levelinfolayer.def("onLowDetailModeO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onLowDetailModeO(self, sender); });
    levelinfolayer.attr("onLowDetailModeA") = LevelInfoLayer::onLowDetailModeA;
    levelinfolayer.attr("onLowDetailModeN") = "onLowDetailMode";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onLowDetailModeA, LevelInfoLayer::onLowDetailModeH, (LPVOID*)&LevelInfoLayer::onLowDetailModeO_);

    levelinfolayer.def("onLevelLeaderboard", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onLevelLeaderboard));
    levelinfolayer.def("onLevelLeaderboard", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onLevelLeaderboard));
    levelinfolayer.def("onLevelLeaderboardO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onLevelLeaderboardO(self, sender); });
    levelinfolayer.attr("onLevelLeaderboardA") = LevelInfoLayer::onLevelLeaderboardA;
    levelinfolayer.attr("onLevelLeaderboardN") = "onLevelLeaderboard";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onLevelLeaderboardA, LevelInfoLayer::onLevelLeaderboardH, (LPVOID*)&LevelInfoLayer::onLevelLeaderboardO_);

    levelinfolayer.def("onBack", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onBack));
    levelinfolayer.def("onBack", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onBack));
    levelinfolayer.def("onBackO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onBackO(self, sender); });
    levelinfolayer.attr("onBackA") = LevelInfoLayer::onBackA;
    levelinfolayer.attr("onBackN") = "onBack";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onBackA, LevelInfoLayer::onBackH, (LPVOID*)&LevelInfoLayer::onBackO_);

    levelinfolayer.def("onInfo", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onInfo));
    levelinfolayer.def("onInfo", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onInfo));
    levelinfolayer.def("onInfoO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onInfoO(self, sender); });
    levelinfolayer.attr("onInfoA") = LevelInfoLayer::onInfoA;
    levelinfolayer.attr("onInfoN") = "onInfo";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onInfoA, LevelInfoLayer::onInfoH, (LPVOID*)&LevelInfoLayer::onInfoO_);

    levelinfolayer.def("onLike", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onLike));
    levelinfolayer.def("onLike", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onLike));
    levelinfolayer.def("onLikeO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onLikeO(self, sender); });
    levelinfolayer.attr("onLikeA") = LevelInfoLayer::onLikeA;
    levelinfolayer.attr("onLikeN") = "onLike";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onLikeA, LevelInfoLayer::onLikeH, (LPVOID*)&LevelInfoLayer::onLikeO_);

    levelinfolayer.def("onPlay", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onPlay));
    levelinfolayer.def("onPlay", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onPlay));
    levelinfolayer.def("onPlayO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onPlayO(self, sender); });
    levelinfolayer.attr("onPlayA") = LevelInfoLayer::onPlayA;
    levelinfolayer.attr("onPlayN") = "onPlay";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onPlayA, LevelInfoLayer::onPlayH, (LPVOID*)&LevelInfoLayer::onPlayO_);

    levelinfolayer.def("onRate", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onRate));
    levelinfolayer.def("onRate", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onRate));
    levelinfolayer.def("onRateO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onRateO(self, sender); });
    levelinfolayer.attr("onRateA") = LevelInfoLayer::onRateA;
    levelinfolayer.attr("onRateN") = "onRate";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onRateA, LevelInfoLayer::onRateH, (LPVOID*)&LevelInfoLayer::onRateO_);

    levelinfolayer.def("onClone", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onClone));
    levelinfolayer.def("onClone", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onClone));
    levelinfolayer.def("onCloneO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onCloneO(self, sender); });
    levelinfolayer.attr("onCloneA") = LevelInfoLayer::onCloneA;
    levelinfolayer.attr("onCloneN") = "onClone";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onCloneA, LevelInfoLayer::onCloneH, (LPVOID*)&LevelInfoLayer::onCloneO_);

    levelinfolayer.def("onDelete", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onDelete));
    levelinfolayer.def("onDelete", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onDelete));
    levelinfolayer.def("onDeleteO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onDeleteO(self, sender); });
    levelinfolayer.attr("onDeleteA") = LevelInfoLayer::onDeleteA;
    levelinfolayer.attr("onDeleteN") = "onDelete";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onDeleteA, LevelInfoLayer::onDeleteH, (LPVOID*)&LevelInfoLayer::onDeleteO_);

    levelinfolayer.def("onGarage", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onGarage));
    levelinfolayer.def("onGarage", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onGarage));
    levelinfolayer.def("onGarageO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onGarageO(self, sender); });
    levelinfolayer.attr("onGarageA") = LevelInfoLayer::onGarageA;
    levelinfolayer.attr("onGarageN") = "onGarage";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onGarageA, LevelInfoLayer::onGarageH, (LPVOID*)&LevelInfoLayer::onGarageO_);

    levelinfolayer.def("onUpdate", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::onUpdate));
    levelinfolayer.def("onUpdate", pybind::overload_cast<pybind::function>(&LevelInfoLayer::onUpdate));
    levelinfolayer.def("onUpdateO", [](LevelInfoLayer* self, cocos2d::CCObject* sender) { return LevelInfoLayer::onUpdateO(self, sender); });
    levelinfolayer.attr("onUpdateA") = LevelInfoLayer::onUpdateA;
    levelinfolayer.attr("onUpdateN") = "onUpdate";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::onUpdateA, LevelInfoLayer::onUpdateH, (LPVOID*)&LevelInfoLayer::onUpdateO_);

    levelinfolayer.def("confirmClone", pybind::overload_cast<LevelInfoLayer*, cocos2d::CCObject*>(&LevelInfoLayer::confirmClone));
    levelinfolayer.def("confirmClone", pybind::overload_cast<pybind::function>(&LevelInfoLayer::confirmClone));
    levelinfolayer.def("confirmCloneO", [](LevelInfoLayer* self, cocos2d::CCObject* p0) { return LevelInfoLayer::confirmCloneO(self, p0); });
    levelinfolayer.attr("confirmCloneA") = LevelInfoLayer::confirmCloneA;
    levelinfolayer.attr("confirmCloneN") = "confirmClone";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::confirmCloneA, LevelInfoLayer::confirmCloneH, (LPVOID*)&LevelInfoLayer::confirmCloneO_);

    levelinfolayer.def("keyBackClicked", pybind::overload_cast<LevelInfoLayer*>(&LevelInfoLayer::keyBackClicked));
    levelinfolayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&LevelInfoLayer::keyBackClicked));
    levelinfolayer.def("keyBackClickedO", [](LevelInfoLayer* self) { return LevelInfoLayer::keyBackClickedO(self); });
    levelinfolayer.attr("keyBackClickedA") = LevelInfoLayer::keyBackClickedA;
    levelinfolayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::keyBackClickedA, LevelInfoLayer::keyBackClickedH, (LPVOID*)&LevelInfoLayer::keyBackClickedO_);

    levelinfolayer.def("keyDown", pybind::overload_cast<LevelInfoLayer*, cocos2d::enumKeyCodes>(&LevelInfoLayer::keyDown));
    levelinfolayer.def("keyDown", pybind::overload_cast<pybind::function>(&LevelInfoLayer::keyDown));
    levelinfolayer.def("keyDownO", [](LevelInfoLayer* self, cocos2d::enumKeyCodes p0) { return LevelInfoLayer::keyDownO(self, p0); });
    levelinfolayer.attr("keyDownA") = LevelInfoLayer::keyDownA;
    levelinfolayer.attr("keyDownN") = "keyDown";
    cinnamon::hooks::hookCinnamon((PVOID)LevelInfoLayer::keyDownA, LevelInfoLayer::keyDownH, (LPVOID*)&LevelInfoLayer::keyDownO_);

    auto ccspriteplus = pybind::class_<CCSpritePlus, cocos2d::CCSprite>(m, "CCSpritePlus");
    ccspriteplus.def("setFlipX", pybind::overload_cast<CCSpritePlus*, bool>(&CCSpritePlus::setFlipX));
    ccspriteplus.def("setFlipX", pybind::overload_cast<pybind::function>(&CCSpritePlus::setFlipX));
    ccspriteplus.def("setFlipXO", [](CCSpritePlus* self, bool p0) { return CCSpritePlus::setFlipXO(self, p0); });
    ccspriteplus.attr("setFlipXA") = CCSpritePlus::setFlipXA;
    ccspriteplus.attr("setFlipXN") = "setFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setFlipXA, CCSpritePlus::setFlipXH, (LPVOID*)&CCSpritePlus::setFlipXO_);

    ccspriteplus.def("setFlipY", pybind::overload_cast<CCSpritePlus*, bool>(&CCSpritePlus::setFlipY));
    ccspriteplus.def("setFlipY", pybind::overload_cast<pybind::function>(&CCSpritePlus::setFlipY));
    ccspriteplus.def("setFlipYO", [](CCSpritePlus* self, bool p0) { return CCSpritePlus::setFlipYO(self, p0); });
    ccspriteplus.attr("setFlipYA") = CCSpritePlus::setFlipYA;
    ccspriteplus.attr("setFlipYN") = "setFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setFlipYA, CCSpritePlus::setFlipYH, (LPVOID*)&CCSpritePlus::setFlipYO_);

    ccspriteplus.def("setScaleX", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScaleX));
    ccspriteplus.def("setScaleX", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScaleX));
    ccspriteplus.def("setScaleXO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setScaleXO(self, p0); });
    ccspriteplus.attr("setScaleXA") = CCSpritePlus::setScaleXA;
    ccspriteplus.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleXA, CCSpritePlus::setScaleXH, (LPVOID*)&CCSpritePlus::setScaleXO_);

    ccspriteplus.def("setScaleY", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScaleY));
    ccspriteplus.def("setScaleY", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScaleY));
    ccspriteplus.def("setScaleYO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setScaleYO(self, p0); });
    ccspriteplus.attr("setScaleYA") = CCSpritePlus::setScaleYA;
    ccspriteplus.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleYA, CCSpritePlus::setScaleYH, (LPVOID*)&CCSpritePlus::setScaleYO_);

    ccspriteplus.def("setScale", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setScale));
    ccspriteplus.def("setScale", pybind::overload_cast<pybind::function>(&CCSpritePlus::setScale));
    ccspriteplus.def("setScaleO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setScaleO(self, p0); });
    ccspriteplus.attr("setScaleA") = CCSpritePlus::setScaleA;
    ccspriteplus.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setScaleA, CCSpritePlus::setScaleH, (LPVOID*)&CCSpritePlus::setScaleO_);

    ccspriteplus.def("setPosition", pybind::overload_cast<CCSpritePlus*, cocos2d::CCPoint const&>(&CCSpritePlus::setPosition));
    ccspriteplus.def("setPosition", pybind::overload_cast<pybind::function>(&CCSpritePlus::setPosition));
    ccspriteplus.def("setPositionO", [](CCSpritePlus* self, cocos2d::CCPoint const& p0) { return CCSpritePlus::setPositionO(self, p0); });
    ccspriteplus.attr("setPositionA") = CCSpritePlus::setPositionA;
    ccspriteplus.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setPositionA, CCSpritePlus::setPositionH, (LPVOID*)&CCSpritePlus::setPositionO_);

    ccspriteplus.def("setRotation", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setRotation));
    ccspriteplus.def("setRotation", pybind::overload_cast<pybind::function>(&CCSpritePlus::setRotation));
    ccspriteplus.def("setRotationO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setRotationO(self, p0); });
    ccspriteplus.attr("setRotationA") = CCSpritePlus::setRotationA;
    ccspriteplus.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setRotationA, CCSpritePlus::setRotationH, (LPVOID*)&CCSpritePlus::setRotationO_);

    ccspriteplus.def("setRotationX", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setRotationX));
    ccspriteplus.def("setRotationX", pybind::overload_cast<pybind::function>(&CCSpritePlus::setRotationX));
    ccspriteplus.def("setRotationXO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setRotationXO(self, p0); });
    ccspriteplus.attr("setRotationXA") = CCSpritePlus::setRotationXA;
    ccspriteplus.attr("setRotationXN") = "setRotationX";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setRotationXA, CCSpritePlus::setRotationXH, (LPVOID*)&CCSpritePlus::setRotationXO_);

    ccspriteplus.def("setRotationY", pybind::overload_cast<CCSpritePlus*, float>(&CCSpritePlus::setRotationY));
    ccspriteplus.def("setRotationY", pybind::overload_cast<pybind::function>(&CCSpritePlus::setRotationY));
    ccspriteplus.def("setRotationYO", [](CCSpritePlus* self, float p0) { return CCSpritePlus::setRotationYO(self, p0); });
    ccspriteplus.attr("setRotationYA") = CCSpritePlus::setRotationYA;
    ccspriteplus.attr("setRotationYN") = "setRotationY";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::setRotationYA, CCSpritePlus::setRotationYH, (LPVOID*)&CCSpritePlus::setRotationYO_);

    ccspriteplus.def("initWithTexture", pybind::overload_cast<CCSpritePlus*, cocos2d::CCTexture2D*>(&CCSpritePlus::initWithTexture));
    ccspriteplus.def("initWithTexture", pybind::overload_cast<pybind::function>(&CCSpritePlus::initWithTexture));
    ccspriteplus.def("initWithTextureO", [](CCSpritePlus* self, cocos2d::CCTexture2D* p0) { return CCSpritePlus::initWithTextureO(self, p0); });
    ccspriteplus.attr("initWithTextureA") = CCSpritePlus::initWithTextureA;
    ccspriteplus.attr("initWithTextureN") = "initWithTexture";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::initWithTextureA, CCSpritePlus::initWithTextureH, (LPVOID*)&CCSpritePlus::initWithTextureO_);

    ccspriteplus.def("initWithSpriteFrameName", pybind::overload_cast<CCSpritePlus*, char const*>(&CCSpritePlus::initWithSpriteFrameName));
    ccspriteplus.def("initWithSpriteFrameName", pybind::overload_cast<pybind::function>(&CCSpritePlus::initWithSpriteFrameName));
    ccspriteplus.def("initWithSpriteFrameNameO", [](CCSpritePlus* self, char const* p0) { return CCSpritePlus::initWithSpriteFrameNameO(self, p0); });
    ccspriteplus.attr("initWithSpriteFrameNameA") = CCSpritePlus::initWithSpriteFrameNameA;
    ccspriteplus.attr("initWithSpriteFrameNameN") = "initWithSpriteFrameName";
    cinnamon::hooks::hookCinnamon((PVOID)CCSpritePlus::initWithSpriteFrameNameA, CCSpritePlus::initWithSpriteFrameNameH, (LPVOID*)&CCSpritePlus::initWithSpriteFrameNameO_);

    auto gameobject = pybind::class_<GameObject, CCSpritePlus>(m, "GameObject");
    gameobject.def("init", pybind::overload_cast<GameObject*, char const*>(&GameObject::init));
    gameobject.def("init", pybind::overload_cast<pybind::function>(&GameObject::init));
    gameobject.def("initO", [](GameObject* self, char const* p0) { return GameObject::initO(self, p0); });
    gameobject.attr("initA") = GameObject::initA;
    gameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::initA, GameObject::initH, (LPVOID*)&GameObject::initO_);

    gameobject.def("setRScaleX", pybind::overload_cast<GameObject*, float>(&GameObject::setRScaleX));
    gameobject.def("setRScaleX", pybind::overload_cast<pybind::function>(&GameObject::setRScaleX));
    gameobject.def("setRScaleXO", [](GameObject* self, float p0) { return GameObject::setRScaleXO(self, p0); });
    gameobject.attr("setRScaleXA") = GameObject::setRScaleXA;
    gameobject.attr("setRScaleXN") = "setRScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleXA, GameObject::setRScaleXH, (LPVOID*)&GameObject::setRScaleXO_);

    gameobject.def("setRScaleY", pybind::overload_cast<GameObject*, float>(&GameObject::setRScaleY));
    gameobject.def("setRScaleY", pybind::overload_cast<pybind::function>(&GameObject::setRScaleY));
    gameobject.def("setRScaleYO", [](GameObject* self, float p0) { return GameObject::setRScaleYO(self, p0); });
    gameobject.attr("setRScaleYA") = GameObject::setRScaleYA;
    gameobject.attr("setRScaleYN") = "setRScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleYA, GameObject::setRScaleYH, (LPVOID*)&GameObject::setRScaleYO_);

    gameobject.def("setStartPos", pybind::overload_cast<GameObject*, cocos2d::CCPoint>(&GameObject::setStartPos));
    gameobject.def("setStartPos", pybind::overload_cast<pybind::function>(&GameObject::setStartPos));
    gameobject.def("setStartPosO", [](GameObject* self, cocos2d::CCPoint p0) { return GameObject::setStartPosO(self, p0); });
    gameobject.attr("setStartPosA") = GameObject::setStartPosA;
    gameobject.attr("setStartPosN") = "setStartPos";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setStartPosA, GameObject::setStartPosH, (LPVOID*)&GameObject::setStartPosO_);

    gameobject.def("setGlowColor", pybind::overload_cast<GameObject*, cocos2d::_ccColor3B const&>(&GameObject::setGlowColor));
    gameobject.def("setGlowColor", pybind::overload_cast<pybind::function>(&GameObject::setGlowColor));
    gameobject.def("setGlowColorO", [](GameObject* self, cocos2d::_ccColor3B const& p0) { return GameObject::setGlowColorO(self, p0); });
    gameobject.attr("setGlowColorA") = GameObject::setGlowColorA;
    gameobject.attr("setGlowColorN") = "setGlowColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setGlowColorA, GameObject::setGlowColorH, (LPVOID*)&GameObject::setGlowColorO_);

    gameobject.def("setRRotation", pybind::overload_cast<GameObject*, float>(&GameObject::setRRotation));
    gameobject.def("setRRotation", pybind::overload_cast<pybind::function>(&GameObject::setRRotation));
    gameobject.def("setRRotationO", [](GameObject* self, float p0) { return GameObject::setRRotationO(self, p0); });
    gameobject.attr("setRRotationA") = GameObject::setRRotationA;
    gameobject.attr("setRRotationN") = "setRRotation";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRRotationA, GameObject::setRRotationH, (LPVOID*)&GameObject::setRRotationO_);

    gameobject.def("setAreaOpacity", pybind::overload_cast<GameObject*, float, float, int>(&GameObject::setAreaOpacity));
    gameobject.def("setAreaOpacity", pybind::overload_cast<pybind::function>(&GameObject::setAreaOpacity));
    gameobject.def("setAreaOpacityO", [](GameObject* self, float p0, float p1, int p2) { return GameObject::setAreaOpacityO(self, p0, p1, p2); });
    gameobject.attr("setAreaOpacityA") = GameObject::setAreaOpacityA;
    gameobject.attr("setAreaOpacityN") = "setAreaOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setAreaOpacityA, GameObject::setAreaOpacityH, (LPVOID*)&GameObject::setAreaOpacityO_);

    gameobject.def("setGlowOpacity", pybind::overload_cast<GameObject*, unsigned char>(&GameObject::setGlowOpacity));
    gameobject.def("setGlowOpacity", pybind::overload_cast<pybind::function>(&GameObject::setGlowOpacity));
    gameobject.def("setGlowOpacityO", [](GameObject* self, unsigned char p0) { return GameObject::setGlowOpacityO(self, p0); });
    gameobject.attr("setGlowOpacityA") = GameObject::setGlowOpacityA;
    gameobject.attr("setGlowOpacityN") = "setGlowOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setGlowOpacityA, GameObject::setGlowOpacityH, (LPVOID*)&GameObject::setGlowOpacityO_);

    gameobject.def("setObjectColor", pybind::overload_cast<GameObject*, cocos2d::_ccColor3B const&>(&GameObject::setObjectColor));
    gameobject.def("setObjectColor", pybind::overload_cast<pybind::function>(&GameObject::setObjectColor));
    gameobject.def("setObjectColorO", [](GameObject* self, cocos2d::_ccColor3B const& p0) { return GameObject::setObjectColorO(self, p0); });
    gameobject.attr("setObjectColorA") = GameObject::setObjectColorA;
    gameobject.attr("setObjectColorN") = "setObjectColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setObjectColorA, GameObject::setObjectColorH, (LPVOID*)&GameObject::setObjectColorO_);

    gameobject.def("setObjectLabel", pybind::overload_cast<GameObject*, cocos2d::CCLabelBMFont*>(&GameObject::setObjectLabel));
    gameobject.def("setObjectLabel", pybind::overload_cast<pybind::function>(&GameObject::setObjectLabel));
    gameobject.def("setObjectLabelO", [](GameObject* self, cocos2d::CCLabelBMFont* p0) { return GameObject::setObjectLabelO(self, p0); });
    gameobject.attr("setObjectLabelA") = GameObject::setObjectLabelA;
    gameobject.attr("setObjectLabelN") = "setObjectLabel";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setObjectLabelA, GameObject::setObjectLabelH, (LPVOID*)&GameObject::setObjectLabelO_);

    gameobject.def("setCustomZLayer", pybind::overload_cast<GameObject*, int>(&GameObject::setCustomZLayer));
    gameobject.def("setCustomZLayer", pybind::overload_cast<pybind::function>(&GameObject::setCustomZLayer));
    gameobject.def("setCustomZLayerO", [](GameObject* self, int p0) { return GameObject::setCustomZLayerO(self, p0); });
    gameobject.attr("setCustomZLayerA") = GameObject::setCustomZLayerA;
    gameobject.attr("setCustomZLayerN") = "setCustomZLayer";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setCustomZLayerA, GameObject::setCustomZLayerH, (LPVOID*)&GameObject::setCustomZLayerO_);

    gameobject.def("setLastPosition", pybind::overload_cast<GameObject*, cocos2d::CCPoint const&>(&GameObject::setLastPosition));
    gameobject.def("setLastPosition", pybind::overload_cast<pybind::function>(&GameObject::setLastPosition));
    gameobject.def("setLastPositionO", [](GameObject* self, cocos2d::CCPoint const& p0) { return GameObject::setLastPositionO(self, p0); });
    gameobject.attr("setLastPositionA") = GameObject::setLastPositionA;
    gameobject.attr("setLastPositionN") = "setLastPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setLastPositionA, GameObject::setLastPositionH, (LPVOID*)&GameObject::setLastPositionO_);

    gameobject.def("setMainColorMode", pybind::overload_cast<GameObject*, int>(&GameObject::setMainColorMode));
    gameobject.def("setMainColorMode", pybind::overload_cast<pybind::function>(&GameObject::setMainColorMode));
    gameobject.def("setMainColorModeO", [](GameObject* self, int p0) { return GameObject::setMainColorModeO(self, p0); });
    gameobject.attr("setMainColorModeA") = GameObject::setMainColorModeA;
    gameobject.attr("setMainColorModeN") = "setMainColorMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setMainColorModeA, GameObject::setMainColorModeH, (LPVOID*)&GameObject::setMainColorModeO_);

    gameobject.def("setObjectRectDirty", pybind::overload_cast<GameObject*, bool>(&GameObject::setObjectRectDirty));
    gameobject.def("setObjectRectDirty", pybind::overload_cast<pybind::function>(&GameObject::setObjectRectDirty));
    gameobject.def("setObjectRectDirtyO", [](GameObject* self, bool p0) { return GameObject::setObjectRectDirtyO(self, p0); });
    gameobject.attr("setObjectRectDirtyA") = GameObject::setObjectRectDirtyA;
    gameobject.attr("setObjectRectDirtyN") = "setObjectRectDirty";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setObjectRectDirtyA, GameObject::setObjectRectDirtyH, (LPVOID*)&GameObject::setObjectRectDirtyO_);

    gameobject.def("setOrientedRectDirty", pybind::overload_cast<GameObject*, bool>(&GameObject::setOrientedRectDirty));
    gameobject.def("setOrientedRectDirty", pybind::overload_cast<pybind::function>(&GameObject::setOrientedRectDirty));
    gameobject.def("setOrientedRectDirtyO", [](GameObject* self, bool p0) { return GameObject::setOrientedRectDirtyO(self, p0); });
    gameobject.attr("setOrientedRectDirtyA") = GameObject::setOrientedRectDirtyA;
    gameobject.attr("setOrientedRectDirtyN") = "setOrientedRectDirty";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setOrientedRectDirtyA, GameObject::setOrientedRectDirtyH, (LPVOID*)&GameObject::setOrientedRectDirtyO_);

    gameobject.def("setSecondaryColorMode", pybind::overload_cast<GameObject*, int>(&GameObject::setSecondaryColorMode));
    gameobject.def("setSecondaryColorMode", pybind::overload_cast<pybind::function>(&GameObject::setSecondaryColorMode));
    gameobject.def("setSecondaryColorModeO", [](GameObject* self, int p0) { return GameObject::setSecondaryColorModeO(self, p0); });
    gameobject.attr("setSecondaryColorModeA") = GameObject::setSecondaryColorModeA;
    gameobject.attr("setSecondaryColorModeN") = "setSecondaryColorMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setSecondaryColorModeA, GameObject::setSecondaryColorModeH, (LPVOID*)&GameObject::setSecondaryColorModeO_);

    gameobject.def("setDefaultMainColorMode", pybind::overload_cast<GameObject*, int>(&GameObject::setDefaultMainColorMode));
    gameobject.def("setDefaultMainColorMode", pybind::overload_cast<pybind::function>(&GameObject::setDefaultMainColorMode));
    gameobject.def("setDefaultMainColorModeO", [](GameObject* self, int p0) { return GameObject::setDefaultMainColorModeO(self, p0); });
    gameobject.attr("setDefaultMainColorModeA") = GameObject::setDefaultMainColorModeA;
    gameobject.attr("setDefaultMainColorModeN") = "setDefaultMainColorMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setDefaultMainColorModeA, GameObject::setDefaultMainColorModeH, (LPVOID*)&GameObject::setDefaultMainColorModeO_);

    gameobject.def("setDefaultSecondaryColorMode", pybind::overload_cast<GameObject*, int>(&GameObject::setDefaultSecondaryColorMode));
    gameobject.def("setDefaultSecondaryColorMode", pybind::overload_cast<pybind::function>(&GameObject::setDefaultSecondaryColorMode));
    gameobject.def("setDefaultSecondaryColorModeO", [](GameObject* self, int p0) { return GameObject::setDefaultSecondaryColorModeO(self, p0); });
    gameobject.attr("setDefaultSecondaryColorModeA") = GameObject::setDefaultSecondaryColorModeA;
    gameobject.attr("setDefaultSecondaryColorModeN") = "setDefaultSecondaryColorMode";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setDefaultSecondaryColorModeA, GameObject::setDefaultSecondaryColorModeH, (LPVOID*)&GameObject::setDefaultSecondaryColorModeO_);

    gameobject.def("setType", pybind::overload_cast<GameObject*, GameObjectType>(&GameObject::setType));
    gameobject.def("setType", pybind::overload_cast<pybind::function>(&GameObject::setType));
    gameobject.def("setTypeO", [](GameObject* self, GameObjectType p0) { return GameObject::setTypeO(self, p0); });
    gameobject.attr("setTypeA") = GameObject::setTypeA;
    gameobject.attr("setTypeN") = "setType";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setTypeA, GameObject::setTypeH, (LPVOID*)&GameObject::setTypeO_);

    gameobject.def("setFlipX", pybind::overload_cast<GameObject*, bool>(&GameObject::setFlipX));
    gameobject.def("setFlipX", pybind::overload_cast<pybind::function>(&GameObject::setFlipX));
    gameobject.def("setFlipXO", [](GameObject* self, bool p0) { return GameObject::setFlipXO(self, p0); });
    gameobject.attr("setFlipXA") = GameObject::setFlipXA;
    gameobject.attr("setFlipXN") = "setFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setFlipXA, GameObject::setFlipXH, (LPVOID*)&GameObject::setFlipXO_);

    gameobject.def("setFlipY", pybind::overload_cast<GameObject*, bool>(&GameObject::setFlipY));
    gameobject.def("setFlipY", pybind::overload_cast<pybind::function>(&GameObject::setFlipY));
    gameobject.def("setFlipYO", [](GameObject* self, bool p0) { return GameObject::setFlipYO(self, p0); });
    gameobject.attr("setFlipYA") = GameObject::setFlipYA;
    gameobject.attr("setFlipYN") = "setFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setFlipYA, GameObject::setFlipYH, (LPVOID*)&GameObject::setFlipYO_);

    gameobject.def("setRScale", pybind::overload_cast<GameObject*, float>(&GameObject::setRScale));
    gameobject.def("setRScale", pybind::overload_cast<pybind::function>(&GameObject::setRScale));
    gameobject.def("setRScaleO", [](GameObject* self, float p0) { return GameObject::setRScaleO(self, p0); });
    gameobject.attr("setRScaleA") = GameObject::setRScaleA;
    gameobject.attr("setRScaleN") = "setRScale";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRScaleA, GameObject::setRScaleH, (LPVOID*)&GameObject::setRScaleO_);

    gameobject.def("isFacingDown", pybind::overload_cast<GameObject*>(&GameObject::isFacingDown));
    gameobject.def("isFacingDown", pybind::overload_cast<pybind::function>(&GameObject::isFacingDown));
    gameobject.def("isFacingDownO", [](GameObject* self) { return GameObject::isFacingDownO(self); });
    gameobject.attr("isFacingDownA") = GameObject::isFacingDownA;
    gameobject.attr("isFacingDownN") = "isFacingDown";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFacingDownA, GameObject::isFacingDownH, (LPVOID*)&GameObject::isFacingDownO_);

    gameobject.def("isFacingLeft", pybind::overload_cast<GameObject*>(&GameObject::isFacingLeft));
    gameobject.def("isFacingLeft", pybind::overload_cast<pybind::function>(&GameObject::isFacingLeft));
    gameobject.def("isFacingLeftO", [](GameObject* self) { return GameObject::isFacingLeftO(self); });
    gameobject.attr("isFacingLeftA") = GameObject::isFacingLeftA;
    gameobject.attr("isFacingLeftN") = "isFacingLeft";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFacingLeftA, GameObject::isFacingLeftH, (LPVOID*)&GameObject::isFacingLeftO_);

    gameobject.def("isColorObject", pybind::overload_cast<GameObject*>(&GameObject::isColorObject));
    gameobject.def("isColorObject", pybind::overload_cast<pybind::function>(&GameObject::isColorObject));
    gameobject.def("isColorObjectO", [](GameObject* self) { return GameObject::isColorObjectO(self); });
    gameobject.attr("isColorObjectA") = GameObject::isColorObjectA;
    gameobject.attr("isColorObjectN") = "isColorObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isColorObjectA, GameObject::isColorObjectH, (LPVOID*)&GameObject::isColorObjectO_);

    gameobject.def("isSpeedObject", pybind::overload_cast<GameObject*>(&GameObject::isSpeedObject));
    gameobject.def("isSpeedObject", pybind::overload_cast<pybind::function>(&GameObject::isSpeedObject));
    gameobject.def("isSpeedObjectO", [](GameObject* self) { return GameObject::isSpeedObjectO(self); });
    gameobject.attr("isSpeedObjectA") = GameObject::isSpeedObjectA;
    gameobject.attr("isSpeedObjectN") = "isSpeedObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSpeedObjectA, GameObject::isSpeedObjectH, (LPVOID*)&GameObject::isSpeedObjectO_);

    gameobject.def("isBasicTrigger", pybind::overload_cast<GameObject*>(&GameObject::isBasicTrigger));
    gameobject.def("isBasicTrigger", pybind::overload_cast<pybind::function>(&GameObject::isBasicTrigger));
    gameobject.def("isBasicTriggerO", [](GameObject* self) { return GameObject::isBasicTriggerO(self); });
    gameobject.attr("isBasicTriggerA") = GameObject::isBasicTriggerA;
    gameobject.attr("isBasicTriggerN") = "isBasicTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isBasicTriggerA, GameObject::isBasicTriggerH, (LPVOID*)&GameObject::isBasicTriggerO_);

    gameobject.def("isColorTrigger", pybind::overload_cast<GameObject*>(&GameObject::isColorTrigger));
    gameobject.def("isColorTrigger", pybind::overload_cast<pybind::function>(&GameObject::isColorTrigger));
    gameobject.def("isColorTriggerO", [](GameObject* self) { return GameObject::isColorTriggerO(self); });
    gameobject.attr("isColorTriggerA") = GameObject::isColorTriggerA;
    gameobject.attr("isColorTriggerN") = "isColorTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isColorTriggerA, GameObject::isColorTriggerH, (LPVOID*)&GameObject::isColorTriggerO_);

    gameobject.def("isSpecialObject", pybind::overload_cast<GameObject*>(&GameObject::isSpecialObject));
    gameobject.def("isSpecialObject", pybind::overload_cast<pybind::function>(&GameObject::isSpecialObject));
    gameobject.def("isSpecialObjectO", [](GameObject* self) { return GameObject::isSpecialObjectO(self); });
    gameobject.attr("isSpecialObjectA") = GameObject::isSpecialObjectA;
    gameobject.attr("isSpecialObjectN") = "isSpecialObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSpecialObjectA, GameObject::isSpecialObjectH, (LPVOID*)&GameObject::isSpecialObjectO_);

    gameobject.def("isSettingsObject", pybind::overload_cast<GameObject*>(&GameObject::isSettingsObject));
    gameobject.def("isSettingsObject", pybind::overload_cast<pybind::function>(&GameObject::isSettingsObject));
    gameobject.def("isSettingsObjectO", [](GameObject* self) { return GameObject::isSettingsObjectO(self); });
    gameobject.attr("isSettingsObjectA") = GameObject::isSettingsObjectA;
    gameobject.attr("isSettingsObjectN") = "isSettingsObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSettingsObjectA, GameObject::isSettingsObjectH, (LPVOID*)&GameObject::isSettingsObjectO_);

    gameobject.def("isBasicEnterEffect", pybind::overload_cast<GameObject*, int>(&GameObject::isBasicEnterEffect));
    gameobject.def("isBasicEnterEffect", pybind::overload_cast<pybind::function>(&GameObject::isBasicEnterEffect));
    gameobject.def("isBasicEnterEffectO", [](GameObject* self, int p0) { return GameObject::isBasicEnterEffectO(self, p0); });
    gameobject.attr("isBasicEnterEffectA") = GameObject::isBasicEnterEffectA;
    gameobject.attr("isBasicEnterEffectN") = "isBasicEnterEffect";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isBasicEnterEffectA, GameObject::isBasicEnterEffectH, (LPVOID*)&GameObject::isBasicEnterEffectO_);

    gameobject.def("isSpawnableTrigger", pybind::overload_cast<GameObject*>(&GameObject::isSpawnableTrigger));
    gameobject.def("isSpawnableTrigger", pybind::overload_cast<pybind::function>(&GameObject::isSpawnableTrigger));
    gameobject.def("isSpawnableTriggerO", [](GameObject* self) { return GameObject::isSpawnableTriggerO(self); });
    gameobject.attr("isSpawnableTriggerA") = GameObject::isSpawnableTriggerA;
    gameobject.attr("isSpawnableTriggerN") = "isSpawnableTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSpawnableTriggerA, GameObject::isSpawnableTriggerH, (LPVOID*)&GameObject::isSpawnableTriggerO_);

    gameobject.def("isStoppableTrigger", pybind::overload_cast<GameObject*>(&GameObject::isStoppableTrigger));
    gameobject.def("isStoppableTrigger", pybind::overload_cast<pybind::function>(&GameObject::isStoppableTrigger));
    gameobject.def("isStoppableTriggerO", [](GameObject* self) { return GameObject::isStoppableTriggerO(self); });
    gameobject.attr("isStoppableTriggerA") = GameObject::isStoppableTriggerA;
    gameobject.attr("isStoppableTriggerN") = "isStoppableTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isStoppableTriggerA, GameObject::isStoppableTriggerH, (LPVOID*)&GameObject::isStoppableTriggerO_);

    gameobject.def("isConfigurablePortal", pybind::overload_cast<GameObject*>(&GameObject::isConfigurablePortal));
    gameobject.def("isConfigurablePortal", pybind::overload_cast<pybind::function>(&GameObject::isConfigurablePortal));
    gameobject.def("isConfigurablePortalO", [](GameObject* self) { return GameObject::isConfigurablePortalO(self); });
    gameobject.attr("isConfigurablePortalA") = GameObject::isConfigurablePortalA;
    gameobject.attr("isConfigurablePortalN") = "isConfigurablePortal";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isConfigurablePortalA, GameObject::isConfigurablePortalH, (LPVOID*)&GameObject::isConfigurablePortalO_);

    gameobject.def("isSpecialSpawnObject", pybind::overload_cast<GameObject*>(&GameObject::isSpecialSpawnObject));
    gameobject.def("isSpecialSpawnObject", pybind::overload_cast<pybind::function>(&GameObject::isSpecialSpawnObject));
    gameobject.def("isSpecialSpawnObjectO", [](GameObject* self) { return GameObject::isSpecialSpawnObjectO(self); });
    gameobject.attr("isSpecialSpawnObjectA") = GameObject::isSpecialSpawnObjectA;
    gameobject.attr("isSpecialSpawnObjectN") = "isSpecialSpawnObject";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isSpecialSpawnObjectA, GameObject::isSpecialSpawnObjectH, (LPVOID*)&GameObject::isSpecialSpawnObjectO_);

    gameobject.def("isEditorSpawnableTrigger", pybind::overload_cast<GameObject*>(&GameObject::isEditorSpawnableTrigger));
    gameobject.def("isEditorSpawnableTrigger", pybind::overload_cast<pybind::function>(&GameObject::isEditorSpawnableTrigger));
    gameobject.def("isEditorSpawnableTriggerO", [](GameObject* self) { return GameObject::isEditorSpawnableTriggerO(self); });
    gameobject.attr("isEditorSpawnableTriggerA") = GameObject::isEditorSpawnableTriggerA;
    gameobject.attr("isEditorSpawnableTriggerN") = "isEditorSpawnableTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isEditorSpawnableTriggerA, GameObject::isEditorSpawnableTriggerH, (LPVOID*)&GameObject::isEditorSpawnableTriggerO_);

    gameobject.def("isFlipX", pybind::overload_cast<GameObject*>(&GameObject::isFlipX));
    gameobject.def("isFlipX", pybind::overload_cast<pybind::function>(&GameObject::isFlipX));
    gameobject.def("isFlipXO", [](GameObject* self) { return GameObject::isFlipXO(self); });
    gameobject.attr("isFlipXA") = GameObject::isFlipXA;
    gameobject.attr("isFlipXN") = "isFlipX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFlipXA, GameObject::isFlipXH, (LPVOID*)&GameObject::isFlipXO_);

    gameobject.def("isFlipY", pybind::overload_cast<GameObject*>(&GameObject::isFlipY));
    gameobject.def("isFlipY", pybind::overload_cast<pybind::function>(&GameObject::isFlipY));
    gameobject.def("isFlipYO", [](GameObject* self) { return GameObject::isFlipYO(self); });
    gameobject.attr("isFlipYA") = GameObject::isFlipYA;
    gameobject.attr("isFlipYN") = "isFlipY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isFlipYA, GameObject::isFlipYH, (LPVOID*)&GameObject::isFlipYO_);

    gameobject.def("isTrigger", pybind::overload_cast<GameObject*>(&GameObject::isTrigger));
    gameobject.def("isTrigger", pybind::overload_cast<pybind::function>(&GameObject::isTrigger));
    gameobject.def("isTriggerO", [](GameObject* self) { return GameObject::isTriggerO(self); });
    gameobject.attr("isTriggerA") = GameObject::isTriggerA;
    gameobject.attr("isTriggerN") = "isTrigger";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::isTriggerA, GameObject::isTriggerH, (LPVOID*)&GameObject::isTriggerO_);

    gameobject.def("update", pybind::overload_cast<GameObject*, float>(&GameObject::update));
    gameobject.def("update", pybind::overload_cast<pybind::function>(&GameObject::update));
    gameobject.def("updateO", [](GameObject* self, float p0) { return GameObject::updateO(self, p0); });
    gameobject.attr("updateA") = GameObject::updateA;
    gameobject.attr("updateN") = "update";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::updateA, GameObject::updateH, (LPVOID*)&GameObject::updateO_);

    gameobject.def("setScaleX", pybind::overload_cast<GameObject*, float>(&GameObject::setScaleX));
    gameobject.def("setScaleX", pybind::overload_cast<pybind::function>(&GameObject::setScaleX));
    gameobject.def("setScaleXO", [](GameObject* self, float p0) { return GameObject::setScaleXO(self, p0); });
    gameobject.attr("setScaleXA") = GameObject::setScaleXA;
    gameobject.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleXA, GameObject::setScaleXH, (LPVOID*)&GameObject::setScaleXO_);

    gameobject.def("setScaleY", pybind::overload_cast<GameObject*, float>(&GameObject::setScaleY));
    gameobject.def("setScaleY", pybind::overload_cast<pybind::function>(&GameObject::setScaleY));
    gameobject.def("setScaleYO", [](GameObject* self, float p0) { return GameObject::setScaleYO(self, p0); });
    gameobject.attr("setScaleYA") = GameObject::setScaleYA;
    gameobject.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleYA, GameObject::setScaleYH, (LPVOID*)&GameObject::setScaleYO_);

    gameobject.def("setScale", pybind::overload_cast<GameObject*, float>(&GameObject::setScale));
    gameobject.def("setScale", pybind::overload_cast<pybind::function>(&GameObject::setScale));
    gameobject.def("setScaleO", [](GameObject* self, float p0) { return GameObject::setScaleO(self, p0); });
    gameobject.attr("setScaleA") = GameObject::setScaleA;
    gameobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setScaleA, GameObject::setScaleH, (LPVOID*)&GameObject::setScaleO_);

    gameobject.def("setPosition", pybind::overload_cast<GameObject*, cocos2d::CCPoint const&>(&GameObject::setPosition));
    gameobject.def("setPosition", pybind::overload_cast<pybind::function>(&GameObject::setPosition));
    gameobject.def("setPositionO", [](GameObject* self, cocos2d::CCPoint const& p0) { return GameObject::setPositionO(self, p0); });
    gameobject.attr("setPositionA") = GameObject::setPositionA;
    gameobject.attr("setPositionN") = "setPosition";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setPositionA, GameObject::setPositionH, (LPVOID*)&GameObject::setPositionO_);

    gameobject.def("setVisible", pybind::overload_cast<GameObject*, bool>(&GameObject::setVisible));
    gameobject.def("setVisible", pybind::overload_cast<pybind::function>(&GameObject::setVisible));
    gameobject.def("setVisibleO", [](GameObject* self, bool p0) { return GameObject::setVisibleO(self, p0); });
    gameobject.attr("setVisibleA") = GameObject::setVisibleA;
    gameobject.attr("setVisibleN") = "setVisible";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setVisibleA, GameObject::setVisibleH, (LPVOID*)&GameObject::setVisibleO_);

    gameobject.def("setRotation", pybind::overload_cast<GameObject*, float>(&GameObject::setRotation));
    gameobject.def("setRotation", pybind::overload_cast<pybind::function>(&GameObject::setRotation));
    gameobject.def("setRotationO", [](GameObject* self, float p0) { return GameObject::setRotationO(self, p0); });
    gameobject.attr("setRotationA") = GameObject::setRotationA;
    gameobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRotationA, GameObject::setRotationH, (LPVOID*)&GameObject::setRotationO_);

    gameobject.def("setRotationX", pybind::overload_cast<GameObject*, float>(&GameObject::setRotationX));
    gameobject.def("setRotationX", pybind::overload_cast<pybind::function>(&GameObject::setRotationX));
    gameobject.def("setRotationXO", [](GameObject* self, float p0) { return GameObject::setRotationXO(self, p0); });
    gameobject.attr("setRotationXA") = GameObject::setRotationXA;
    gameobject.attr("setRotationXN") = "setRotationX";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRotationXA, GameObject::setRotationXH, (LPVOID*)&GameObject::setRotationXO_);

    gameobject.def("setRotationY", pybind::overload_cast<GameObject*, float>(&GameObject::setRotationY));
    gameobject.def("setRotationY", pybind::overload_cast<pybind::function>(&GameObject::setRotationY));
    gameobject.def("setRotationYO", [](GameObject* self, float p0) { return GameObject::setRotationYO(self, p0); });
    gameobject.attr("setRotationYA") = GameObject::setRotationYA;
    gameobject.attr("setRotationYN") = "setRotationY";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setRotationYA, GameObject::setRotationYH, (LPVOID*)&GameObject::setRotationYO_);

    gameobject.def("initWithTexture", pybind::overload_cast<GameObject*, cocos2d::CCTexture2D*>(&GameObject::initWithTexture));
    gameobject.def("initWithTexture", pybind::overload_cast<pybind::function>(&GameObject::initWithTexture));
    gameobject.def("initWithTextureO", [](GameObject* self, cocos2d::CCTexture2D* p0) { return GameObject::initWithTextureO(self, p0); });
    gameobject.attr("initWithTextureA") = GameObject::initWithTextureA;
    gameobject.attr("initWithTextureN") = "initWithTexture";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::initWithTextureA, GameObject::initWithTextureH, (LPVOID*)&GameObject::initWithTextureO_);

    gameobject.def("setChildColor", pybind::overload_cast<GameObject*, cocos2d::_ccColor3B const&>(&GameObject::setChildColor));
    gameobject.def("setChildColor", pybind::overload_cast<pybind::function>(&GameObject::setChildColor));
    gameobject.def("setChildColorO", [](GameObject* self, cocos2d::_ccColor3B const& p0) { return GameObject::setChildColorO(self, p0); });
    gameobject.attr("setChildColorA") = GameObject::setChildColorA;
    gameobject.attr("setChildColorN") = "setChildColor";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setChildColorA, GameObject::setChildColorH, (LPVOID*)&GameObject::setChildColorO_);

    gameobject.def("setOpacity", pybind::overload_cast<GameObject*, unsigned char>(&GameObject::setOpacity));
    gameobject.def("setOpacity", pybind::overload_cast<pybind::function>(&GameObject::setOpacity));
    gameobject.def("setOpacityO", [](GameObject* self, unsigned char p0) { return GameObject::setOpacityO(self, p0); });
    gameobject.attr("setOpacityA") = GameObject::setOpacityA;
    gameobject.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)GameObject::setOpacityA, GameObject::setOpacityH, (LPVOID*)&GameObject::setOpacityO_);

    auto enhancedgameobject = pybind::class_<EnhancedGameObject, GameObject>(m, "EnhancedGameObject");
    enhancedgameobject.def("create", pybind::overload_cast<char const*>(&EnhancedGameObject::create));
    enhancedgameobject.def("create", pybind::overload_cast<pybind::function>(&EnhancedGameObject::create));
    enhancedgameobject.def("createO", [](char const* p0) { return EnhancedGameObject::createO(p0); });
    enhancedgameobject.attr("createA") = EnhancedGameObject::createA;
    enhancedgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EnhancedGameObject::createA, EnhancedGameObject::createH, (LPVOID*)&EnhancedGameObject::createO_);

    enhancedgameobject.def("init", pybind::overload_cast<EnhancedGameObject*, char const*>(&EnhancedGameObject::init));
    enhancedgameobject.def("init", pybind::overload_cast<pybind::function>(&EnhancedGameObject::init));
    enhancedgameobject.def("initO", [](EnhancedGameObject* self, char const* p0) { return EnhancedGameObject::initO(self, p0); });
    enhancedgameobject.attr("initA") = EnhancedGameObject::initA;
    enhancedgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EnhancedGameObject::initA, EnhancedGameObject::initH, (LPVOID*)&EnhancedGameObject::initO_);

    auto effectgameobject = pybind::class_<EffectGameObject, EnhancedGameObject>(m, "EffectGameObject");
    effectgameobject.def("create", pybind::overload_cast<char const*>(&EffectGameObject::create));
    effectgameobject.def("create", pybind::overload_cast<pybind::function>(&EffectGameObject::create));
    effectgameobject.def("createO", [](char const* p0) { return EffectGameObject::createO(p0); });
    effectgameobject.attr("createA") = EffectGameObject::createA;
    effectgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::createA, EffectGameObject::createH, (LPVOID*)&EffectGameObject::createO_);

    effectgameobject.def("init", pybind::overload_cast<EffectGameObject*, char const*>(&EffectGameObject::init));
    effectgameobject.def("init", pybind::overload_cast<pybind::function>(&EffectGameObject::init));
    effectgameobject.def("initO", [](EffectGameObject* self, char const* p0) { return EffectGameObject::initO(self, p0); });
    effectgameobject.attr("initA") = EffectGameObject::initA;
    effectgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::initA, EffectGameObject::initH, (LPVOID*)&EffectGameObject::initO_);

    effectgameobject.def("setRScaleX", pybind::overload_cast<EffectGameObject*, float>(&EffectGameObject::setRScaleX));
    effectgameobject.def("setRScaleX", pybind::overload_cast<pybind::function>(&EffectGameObject::setRScaleX));
    effectgameobject.def("setRScaleXO", [](EffectGameObject* self, float p0) { return EffectGameObject::setRScaleXO(self, p0); });
    effectgameobject.attr("setRScaleXA") = EffectGameObject::setRScaleXA;
    effectgameobject.attr("setRScaleXN") = "setRScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setRScaleXA, EffectGameObject::setRScaleXH, (LPVOID*)&EffectGameObject::setRScaleXO_);

    effectgameobject.def("setRScaleY", pybind::overload_cast<EffectGameObject*, float>(&EffectGameObject::setRScaleY));
    effectgameobject.def("setRScaleY", pybind::overload_cast<pybind::function>(&EffectGameObject::setRScaleY));
    effectgameobject.def("setRScaleYO", [](EffectGameObject* self, float p0) { return EffectGameObject::setRScaleYO(self, p0); });
    effectgameobject.attr("setRScaleYA") = EffectGameObject::setRScaleYA;
    effectgameobject.attr("setRScaleYN") = "setRScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setRScaleYA, EffectGameObject::setRScaleYH, (LPVOID*)&EffectGameObject::setRScaleYO_);

    effectgameobject.def("setTargetID", pybind::overload_cast<EffectGameObject*, int>(&EffectGameObject::setTargetID));
    effectgameobject.def("setTargetID", pybind::overload_cast<pybind::function>(&EffectGameObject::setTargetID));
    effectgameobject.def("setTargetIDO", [](EffectGameObject* self, int p0) { return EffectGameObject::setTargetIDO(self, p0); });
    effectgameobject.attr("setTargetIDA") = EffectGameObject::setTargetIDA;
    effectgameobject.attr("setTargetIDN") = "setTargetID";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setTargetIDA, EffectGameObject::setTargetIDH, (LPVOID*)&EffectGameObject::setTargetIDO_);

    effectgameobject.def("setTargetID2", pybind::overload_cast<EffectGameObject*, int>(&EffectGameObject::setTargetID2));
    effectgameobject.def("setTargetID2", pybind::overload_cast<pybind::function>(&EffectGameObject::setTargetID2));
    effectgameobject.def("setTargetID2O", [](EffectGameObject* self, int p0) { return EffectGameObject::setTargetID2O(self, p0); });
    effectgameobject.attr("setTargetID2A") = EffectGameObject::setTargetID2A;
    effectgameobject.attr("setTargetID2N") = "setTargetID2";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setTargetID2A, EffectGameObject::setTargetID2H, (LPVOID*)&EffectGameObject::setTargetID2O_);

    effectgameobject.def("setObjectLabel", pybind::overload_cast<EffectGameObject*, cocos2d::CCLabelBMFont*>(&EffectGameObject::setObjectLabel));
    effectgameobject.def("setObjectLabel", pybind::overload_cast<pybind::function>(&EffectGameObject::setObjectLabel));
    effectgameobject.def("setObjectLabelO", [](EffectGameObject* self, cocos2d::CCLabelBMFont* p0) { return EffectGameObject::setObjectLabelO(self, p0); });
    effectgameobject.attr("setObjectLabelA") = EffectGameObject::setObjectLabelA;
    effectgameobject.attr("setObjectLabelN") = "setObjectLabel";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setObjectLabelA, EffectGameObject::setObjectLabelH, (LPVOID*)&EffectGameObject::setObjectLabelO_);

    effectgameobject.def("isSpecialSpawnObject", pybind::overload_cast<EffectGameObject*>(&EffectGameObject::isSpecialSpawnObject));
    effectgameobject.def("isSpecialSpawnObject", pybind::overload_cast<pybind::function>(&EffectGameObject::isSpecialSpawnObject));
    effectgameobject.def("isSpecialSpawnObjectO", [](EffectGameObject* self) { return EffectGameObject::isSpecialSpawnObjectO(self); });
    effectgameobject.attr("isSpecialSpawnObjectA") = EffectGameObject::isSpecialSpawnObjectA;
    effectgameobject.attr("isSpecialSpawnObjectN") = "isSpecialSpawnObject";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::isSpecialSpawnObjectA, EffectGameObject::isSpecialSpawnObjectH, (LPVOID*)&EffectGameObject::isSpecialSpawnObjectO_);

    effectgameobject.def("setOpacity", pybind::overload_cast<EffectGameObject*, unsigned char>(&EffectGameObject::setOpacity));
    effectgameobject.def("setOpacity", pybind::overload_cast<pybind::function>(&EffectGameObject::setOpacity));
    effectgameobject.def("setOpacityO", [](EffectGameObject* self, unsigned char p0) { return EffectGameObject::setOpacityO(self, p0); });
    effectgameobject.attr("setOpacityA") = EffectGameObject::setOpacityA;
    effectgameobject.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)EffectGameObject::setOpacityA, EffectGameObject::setOpacityH, (LPVOID*)&EffectGameObject::setOpacityO_);

    auto textgameobject = pybind::class_<TextGameObject, GameObject>(m, "TextGameObject");
    textgameobject.def("create", pybind::overload_cast<cocos2d::CCTexture2D*>(&TextGameObject::create));
    textgameobject.def("create", pybind::overload_cast<pybind::function>(&TextGameObject::create));
    textgameobject.def("createO", [](cocos2d::CCTexture2D* p0) { return TextGameObject::createO(p0); });
    textgameobject.attr("createA") = TextGameObject::createA;
    textgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)TextGameObject::createA, TextGameObject::createH, (LPVOID*)&TextGameObject::createO_);

    textgameobject.def("init", pybind::overload_cast<TextGameObject*, cocos2d::CCTexture2D*>(&TextGameObject::init));
    textgameobject.def("init", pybind::overload_cast<pybind::function>(&TextGameObject::init));
    textgameobject.def("initO", [](TextGameObject* self, cocos2d::CCTexture2D* p0) { return TextGameObject::initO(self, p0); });
    textgameobject.attr("initA") = TextGameObject::initA;
    textgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)TextGameObject::initA, TextGameObject::initH, (LPVOID*)&TextGameObject::initO_);

    auto smartgameobject = pybind::class_<SmartGameObject, GameObject>(m, "SmartGameObject");
    smartgameobject.def("create", pybind::overload_cast<char const*>(&SmartGameObject::create));
    smartgameobject.def("create", pybind::overload_cast<pybind::function>(&SmartGameObject::create));
    smartgameobject.def("createO", [](char const* p0) { return SmartGameObject::createO(p0); });
    smartgameobject.attr("createA") = SmartGameObject::createA;
    smartgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SmartGameObject::createA, SmartGameObject::createH, (LPVOID*)&SmartGameObject::createO_);

    smartgameobject.def("init", pybind::overload_cast<SmartGameObject*, char const*>(&SmartGameObject::init));
    smartgameobject.def("init", pybind::overload_cast<pybind::function>(&SmartGameObject::init));
    smartgameobject.def("initO", [](SmartGameObject* self, char const* p0) { return SmartGameObject::initO(self, p0); });
    smartgameobject.attr("initA") = SmartGameObject::initA;
    smartgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SmartGameObject::initA, SmartGameObject::initH, (LPVOID*)&SmartGameObject::initO_);

    auto particlegameobject = pybind::class_<ParticleGameObject, EnhancedGameObject>(m, "ParticleGameObject");
    particlegameobject.def("create", pybind::overload_cast<>(&ParticleGameObject::create));
    particlegameobject.def("create", pybind::overload_cast<pybind::function>(&ParticleGameObject::create));
    particlegameobject.def("createO", []() { return ParticleGameObject::createO(); });
    particlegameobject.attr("createA") = ParticleGameObject::createA;
    particlegameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::createA, ParticleGameObject::createH, (LPVOID*)&ParticleGameObject::createO_);

    particlegameobject.def("setObjectColor", pybind::overload_cast<ParticleGameObject*, cocos2d::_ccColor3B const&>(&ParticleGameObject::setObjectColor));
    particlegameobject.def("setObjectColor", pybind::overload_cast<pybind::function>(&ParticleGameObject::setObjectColor));
    particlegameobject.def("setObjectColorO", [](ParticleGameObject* self, cocos2d::_ccColor3B const& p0) { return ParticleGameObject::setObjectColorO(self, p0); });
    particlegameobject.attr("setObjectColorA") = ParticleGameObject::setObjectColorA;
    particlegameobject.attr("setObjectColorN") = "setObjectColor";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setObjectColorA, ParticleGameObject::setObjectColorH, (LPVOID*)&ParticleGameObject::setObjectColorO_);

    particlegameobject.def("setParticleString", pybind::overload_cast<ParticleGameObject*, gd::string>(&ParticleGameObject::setParticleString));
    particlegameobject.def("setParticleString", pybind::overload_cast<pybind::function>(&ParticleGameObject::setParticleString));
    particlegameobject.def("setParticleStringO", [](ParticleGameObject* self, gd::string p0) { return ParticleGameObject::setParticleStringO(self, p0); });
    particlegameobject.attr("setParticleStringA") = ParticleGameObject::setParticleStringA;
    particlegameobject.attr("setParticleStringN") = "setParticleString";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setParticleStringA, ParticleGameObject::setParticleStringH, (LPVOID*)&ParticleGameObject::setParticleStringO_);

    particlegameobject.def("init", pybind::overload_cast<ParticleGameObject*>(&ParticleGameObject::init));
    particlegameobject.def("init", pybind::overload_cast<pybind::function>(&ParticleGameObject::init));
    particlegameobject.def("initO", [](ParticleGameObject* self) { return ParticleGameObject::initO(self); });
    particlegameobject.attr("initA") = ParticleGameObject::initA;
    particlegameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::initA, ParticleGameObject::initH, (LPVOID*)&ParticleGameObject::initO_);

    particlegameobject.def("setScaleX", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setScaleX));
    particlegameobject.def("setScaleX", pybind::overload_cast<pybind::function>(&ParticleGameObject::setScaleX));
    particlegameobject.def("setScaleXO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setScaleXO(self, p0); });
    particlegameobject.attr("setScaleXA") = ParticleGameObject::setScaleXA;
    particlegameobject.attr("setScaleXN") = "setScaleX";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setScaleXA, ParticleGameObject::setScaleXH, (LPVOID*)&ParticleGameObject::setScaleXO_);

    particlegameobject.def("setScaleY", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setScaleY));
    particlegameobject.def("setScaleY", pybind::overload_cast<pybind::function>(&ParticleGameObject::setScaleY));
    particlegameobject.def("setScaleYO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setScaleYO(self, p0); });
    particlegameobject.attr("setScaleYA") = ParticleGameObject::setScaleYA;
    particlegameobject.attr("setScaleYN") = "setScaleY";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setScaleYA, ParticleGameObject::setScaleYH, (LPVOID*)&ParticleGameObject::setScaleYO_);

    particlegameobject.def("setScale", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setScale));
    particlegameobject.def("setScale", pybind::overload_cast<pybind::function>(&ParticleGameObject::setScale));
    particlegameobject.def("setScaleO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setScaleO(self, p0); });
    particlegameobject.attr("setScaleA") = ParticleGameObject::setScaleA;
    particlegameobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setScaleA, ParticleGameObject::setScaleH, (LPVOID*)&ParticleGameObject::setScaleO_);

    particlegameobject.def("setRotation", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setRotation));
    particlegameobject.def("setRotation", pybind::overload_cast<pybind::function>(&ParticleGameObject::setRotation));
    particlegameobject.def("setRotationO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setRotationO(self, p0); });
    particlegameobject.attr("setRotationA") = ParticleGameObject::setRotationA;
    particlegameobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setRotationA, ParticleGameObject::setRotationH, (LPVOID*)&ParticleGameObject::setRotationO_);

    particlegameobject.def("setRotationX", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setRotationX));
    particlegameobject.def("setRotationX", pybind::overload_cast<pybind::function>(&ParticleGameObject::setRotationX));
    particlegameobject.def("setRotationXO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setRotationXO(self, p0); });
    particlegameobject.attr("setRotationXA") = ParticleGameObject::setRotationXA;
    particlegameobject.attr("setRotationXN") = "setRotationX";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setRotationXA, ParticleGameObject::setRotationXH, (LPVOID*)&ParticleGameObject::setRotationXO_);

    particlegameobject.def("setRotationY", pybind::overload_cast<ParticleGameObject*, float>(&ParticleGameObject::setRotationY));
    particlegameobject.def("setRotationY", pybind::overload_cast<pybind::function>(&ParticleGameObject::setRotationY));
    particlegameobject.def("setRotationYO", [](ParticleGameObject* self, float p0) { return ParticleGameObject::setRotationYO(self, p0); });
    particlegameobject.attr("setRotationYA") = ParticleGameObject::setRotationYA;
    particlegameobject.attr("setRotationYN") = "setRotationY";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setRotationYA, ParticleGameObject::setRotationYH, (LPVOID*)&ParticleGameObject::setRotationYO_);

    particlegameobject.def("setChildColor", pybind::overload_cast<ParticleGameObject*, cocos2d::_ccColor3B const&>(&ParticleGameObject::setChildColor));
    particlegameobject.def("setChildColor", pybind::overload_cast<pybind::function>(&ParticleGameObject::setChildColor));
    particlegameobject.def("setChildColorO", [](ParticleGameObject* self, cocos2d::_ccColor3B const& p0) { return ParticleGameObject::setChildColorO(self, p0); });
    particlegameobject.attr("setChildColorA") = ParticleGameObject::setChildColorA;
    particlegameobject.attr("setChildColorN") = "setChildColor";
    cinnamon::hooks::hookCinnamon((PVOID)ParticleGameObject::setChildColorA, ParticleGameObject::setChildColorH, (LPVOID*)&ParticleGameObject::setChildColorO_);

    auto specialanimgameobject = pybind::class_<SpecialAnimGameObject, EnhancedGameObject>(m, "SpecialAnimGameObject");
    specialanimgameobject.def("create", pybind::overload_cast<char const*>(&SpecialAnimGameObject::create));
    specialanimgameobject.def("create", pybind::overload_cast<pybind::function>(&SpecialAnimGameObject::create));
    specialanimgameobject.def("createO", [](char const* p0) { return SpecialAnimGameObject::createO(p0); });
    specialanimgameobject.attr("createA") = SpecialAnimGameObject::createA;
    specialanimgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SpecialAnimGameObject::createA, SpecialAnimGameObject::createH, (LPVOID*)&SpecialAnimGameObject::createO_);

    specialanimgameobject.def("init", pybind::overload_cast<SpecialAnimGameObject*, char const*>(&SpecialAnimGameObject::init));
    specialanimgameobject.def("init", pybind::overload_cast<pybind::function>(&SpecialAnimGameObject::init));
    specialanimgameobject.def("initO", [](SpecialAnimGameObject* self, char const* p0) { return SpecialAnimGameObject::initO(self, p0); });
    specialanimgameobject.attr("initA") = SpecialAnimGameObject::initA;
    specialanimgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SpecialAnimGameObject::initA, SpecialAnimGameObject::initH, (LPVOID*)&SpecialAnimGameObject::initO_);

    auto ringobject = pybind::class_<RingObject, EffectGameObject>(m, "RingObject");
    ringobject.def("create", pybind::overload_cast<char const*>(&RingObject::create));
    ringobject.def("create", pybind::overload_cast<pybind::function>(&RingObject::create));
    ringobject.def("createO", [](char const* p0) { return RingObject::createO(p0); });
    ringobject.attr("createA") = RingObject::createA;
    ringobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::createA, RingObject::createH, (LPVOID*)&RingObject::createO_);

    ringobject.def("init", pybind::overload_cast<RingObject*, char const*>(&RingObject::init));
    ringobject.def("init", pybind::overload_cast<pybind::function>(&RingObject::init));
    ringobject.def("initO", [](RingObject* self, char const* p0) { return RingObject::initO(self, p0); });
    ringobject.attr("initA") = RingObject::initA;
    ringobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::initA, RingObject::initH, (LPVOID*)&RingObject::initO_);

    ringobject.def("setRScale", pybind::overload_cast<RingObject*, float>(&RingObject::setRScale));
    ringobject.def("setRScale", pybind::overload_cast<pybind::function>(&RingObject::setRScale));
    ringobject.def("setRScaleO", [](RingObject* self, float p0) { return RingObject::setRScaleO(self, p0); });
    ringobject.attr("setRScaleA") = RingObject::setRScaleA;
    ringobject.attr("setRScaleN") = "setRScale";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setRScaleA, RingObject::setRScaleH, (LPVOID*)&RingObject::setRScaleO_);

    ringobject.def("setScale", pybind::overload_cast<RingObject*, float>(&RingObject::setScale));
    ringobject.def("setScale", pybind::overload_cast<pybind::function>(&RingObject::setScale));
    ringobject.def("setScaleO", [](RingObject* self, float p0) { return RingObject::setScaleO(self, p0); });
    ringobject.attr("setScaleA") = RingObject::setScaleA;
    ringobject.attr("setScaleN") = "setScale";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setScaleA, RingObject::setScaleH, (LPVOID*)&RingObject::setScaleO_);

    ringobject.def("setRotation", pybind::overload_cast<RingObject*, float>(&RingObject::setRotation));
    ringobject.def("setRotation", pybind::overload_cast<pybind::function>(&RingObject::setRotation));
    ringobject.def("setRotationO", [](RingObject* self, float p0) { return RingObject::setRotationO(self, p0); });
    ringobject.attr("setRotationA") = RingObject::setRotationA;
    ringobject.attr("setRotationN") = "setRotation";
    cinnamon::hooks::hookCinnamon((PVOID)RingObject::setRotationA, RingObject::setRotationH, (LPVOID*)&RingObject::setRotationO_);

    auto startposobject = pybind::class_<StartPosObject, EffectGameObject>(m, "StartPosObject");
    startposobject.def("create", pybind::overload_cast<>(&StartPosObject::create));
    startposobject.def("create", pybind::overload_cast<pybind::function>(&StartPosObject::create));
    startposobject.def("createO", []() { return StartPosObject::createO(); });
    startposobject.attr("createA") = StartPosObject::createA;
    startposobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)StartPosObject::createA, StartPosObject::createH, (LPVOID*)&StartPosObject::createO_);

    startposobject.def("init", pybind::overload_cast<StartPosObject*>(&StartPosObject::init));
    startposobject.def("init", pybind::overload_cast<pybind::function>(&StartPosObject::init));
    startposobject.def("initO", [](StartPosObject* self) { return StartPosObject::initO(self); });
    startposobject.attr("initA") = StartPosObject::initA;
    startposobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)StartPosObject::initA, StartPosObject::initH, (LPVOID*)&StartPosObject::initO_);

    auto labelgameobject = pybind::class_<LabelGameObject, EffectGameObject>(m, "LabelGameObject");
    labelgameobject.def("create", pybind::overload_cast<>(&LabelGameObject::create));
    labelgameobject.def("create", pybind::overload_cast<pybind::function>(&LabelGameObject::create));
    labelgameobject.def("createO", []() { return LabelGameObject::createO(); });
    labelgameobject.attr("createA") = LabelGameObject::createA;
    labelgameobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LabelGameObject::createA, LabelGameObject::createH, (LPVOID*)&LabelGameObject::createO_);

    labelgameobject.def("setObjectColor", pybind::overload_cast<LabelGameObject*, cocos2d::_ccColor3B const&>(&LabelGameObject::setObjectColor));
    labelgameobject.def("setObjectColor", pybind::overload_cast<pybind::function>(&LabelGameObject::setObjectColor));
    labelgameobject.def("setObjectColorO", [](LabelGameObject* self, cocos2d::_ccColor3B const& p0) { return LabelGameObject::setObjectColorO(self, p0); });
    labelgameobject.attr("setObjectColorA") = LabelGameObject::setObjectColorA;
    labelgameobject.attr("setObjectColorN") = "setObjectColor";
    cinnamon::hooks::hookCinnamon((PVOID)LabelGameObject::setObjectColorA, LabelGameObject::setObjectColorH, (LPVOID*)&LabelGameObject::setObjectColorO_);

    labelgameobject.def("init", pybind::overload_cast<LabelGameObject*>(&LabelGameObject::init));
    labelgameobject.def("init", pybind::overload_cast<pybind::function>(&LabelGameObject::init));
    labelgameobject.def("initO", [](LabelGameObject* self) { return LabelGameObject::initO(self); });
    labelgameobject.attr("initA") = LabelGameObject::initA;
    labelgameobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LabelGameObject::initA, LabelGameObject::initH, (LPVOID*)&LabelGameObject::initO_);

    labelgameobject.def("setOpacity", pybind::overload_cast<LabelGameObject*, unsigned char>(&LabelGameObject::setOpacity));
    labelgameobject.def("setOpacity", pybind::overload_cast<pybind::function>(&LabelGameObject::setOpacity));
    labelgameobject.def("setOpacityO", [](LabelGameObject* self, unsigned char p0) { return LabelGameObject::setOpacityO(self, p0); });
    labelgameobject.attr("setOpacityA") = LabelGameObject::setOpacityA;
    labelgameobject.attr("setOpacityN") = "setOpacity";
    cinnamon::hooks::hookCinnamon((PVOID)LabelGameObject::setOpacityA, LabelGameObject::setOpacityH, (LPVOID*)&LabelGameObject::setOpacityO_);

    auto searchbutton = pybind::class_<SearchButton, cocos2d::CCSprite>(m, "SearchButton");
    searchbutton.def("create", pybind::overload_cast<char const*, char const*, float, char const*>(&SearchButton::create));
    searchbutton.def("create", pybind::overload_cast<pybind::function>(&SearchButton::create));
    searchbutton.def("createO", [](char const* texture, char const* text, float size, char const* icon) { return SearchButton::createO(texture, text, size, icon); });
    searchbutton.attr("createA") = SearchButton::createA;
    searchbutton.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)SearchButton::createA, SearchButton::createH, (LPVOID*)&SearchButton::createO_);

    searchbutton.def("init", pybind::overload_cast<SearchButton*, char const*, char const*, float, char const*>(&SearchButton::init));
    searchbutton.def("init", pybind::overload_cast<pybind::function>(&SearchButton::init));
    searchbutton.def("initO", [](SearchButton* self, char const* p0, char const* p1, float p2, char const* p3) { return SearchButton::initO(self, p0, p1, p2, p3); });
    searchbutton.attr("initA") = SearchButton::initA;
    searchbutton.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)SearchButton::initA, SearchButton::initH, (LPVOID*)&SearchButton::initO_);

    auto gamelevelmanager = pybind::class_<GameLevelManager, cocos2d::CCNode>(m, "GameLevelManager");
    gamelevelmanager.def("getOnlineLevels", pybind::overload_cast<GameLevelManager*, GJSearchObject*>(&GameLevelManager::getOnlineLevels));
    gamelevelmanager.def("getOnlineLevels", pybind::overload_cast<pybind::function>(&GameLevelManager::getOnlineLevels));
    gamelevelmanager.def("getOnlineLevelsO", [](GameLevelManager* self, GJSearchObject* p0) { return GameLevelManager::getOnlineLevelsO(self, p0); });
    gamelevelmanager.attr("getOnlineLevelsA") = GameLevelManager::getOnlineLevelsA;
    gamelevelmanager.attr("getOnlineLevelsN") = "getOnlineLevels";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::getOnlineLevelsA, GameLevelManager::getOnlineLevelsH, (LPVOID*)&GameLevelManager::getOnlineLevelsO_);

    gamelevelmanager.def("setDiffVal", pybind::overload_cast<GameLevelManager*, int, bool>(&GameLevelManager::setDiffVal));
    gamelevelmanager.def("setDiffVal", pybind::overload_cast<pybind::function>(&GameLevelManager::setDiffVal));
    gamelevelmanager.def("setDiffValO", [](GameLevelManager* self, int p0, bool p1) { return GameLevelManager::setDiffValO(self, p0, p1); });
    gamelevelmanager.attr("setDiffValA") = GameLevelManager::setDiffValA;
    gamelevelmanager.attr("setDiffValN") = "setDiffVal";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setDiffValA, GameLevelManager::setDiffValH, (LPVOID*)&GameLevelManager::setDiffValO_);

    gamelevelmanager.def("setIntForKey", pybind::overload_cast<GameLevelManager*, int, char const*>(&GameLevelManager::setIntForKey));
    gamelevelmanager.def("setIntForKey", pybind::overload_cast<pybind::function>(&GameLevelManager::setIntForKey));
    gamelevelmanager.def("setIntForKeyO", [](GameLevelManager* self, int p0, char const* p1) { return GameLevelManager::setIntForKeyO(self, p0, p1); });
    gamelevelmanager.attr("setIntForKeyA") = GameLevelManager::setIntForKeyA;
    gamelevelmanager.attr("setIntForKeyN") = "setIntForKey";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setIntForKeyA, GameLevelManager::setIntForKeyH, (LPVOID*)&GameLevelManager::setIntForKeyO_);

    gamelevelmanager.def("setBoolForKey", pybind::overload_cast<GameLevelManager*, bool, char const*>(&GameLevelManager::setBoolForKey));
    gamelevelmanager.def("setBoolForKey", pybind::overload_cast<pybind::function>(&GameLevelManager::setBoolForKey));
    gamelevelmanager.def("setBoolForKeyO", [](GameLevelManager* self, bool p0, char const* p1) { return GameLevelManager::setBoolForKeyO(self, p0, p1); });
    gamelevelmanager.attr("setBoolForKeyA") = GameLevelManager::setBoolForKeyA;
    gamelevelmanager.attr("setBoolForKeyN") = "setBoolForKey";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setBoolForKeyA, GameLevelManager::setBoolForKeyH, (LPVOID*)&GameLevelManager::setBoolForKeyO_);

    gamelevelmanager.def("setFolderName", pybind::overload_cast<GameLevelManager*, int, gd::string, bool>(&GameLevelManager::setFolderName));
    gamelevelmanager.def("setFolderName", pybind::overload_cast<pybind::function>(&GameLevelManager::setFolderName));
    gamelevelmanager.def("setFolderNameO", [](GameLevelManager* self, int p0, gd::string p1, bool p2) { return GameLevelManager::setFolderNameO(self, p0, p1, p2); });
    gamelevelmanager.attr("setFolderNameA") = GameLevelManager::setFolderNameA;
    gamelevelmanager.attr("setFolderNameN") = "setFolderName";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setFolderNameA, GameLevelManager::setFolderNameH, (LPVOID*)&GameLevelManager::setFolderNameO_);

    gamelevelmanager.def("setLevelStars", pybind::overload_cast<GameLevelManager*, int, int, bool>(&GameLevelManager::setLevelStars));
    gamelevelmanager.def("setLevelStars", pybind::overload_cast<pybind::function>(&GameLevelManager::setLevelStars));
    gamelevelmanager.def("setLevelStarsO", [](GameLevelManager* self, int p0, int p1, bool p2) { return GameLevelManager::setLevelStarsO(self, p0, p1, p2); });
    gamelevelmanager.attr("setLevelStarsA") = GameLevelManager::setLevelStarsA;
    gamelevelmanager.attr("setLevelStarsN") = "setLevelStars";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setLevelStarsA, GameLevelManager::setLevelStarsH, (LPVOID*)&GameLevelManager::setLevelStarsO_);

    gamelevelmanager.def("setLevelFeatured", pybind::overload_cast<GameLevelManager*, int, int, bool>(&GameLevelManager::setLevelFeatured));
    gamelevelmanager.def("setLevelFeatured", pybind::overload_cast<pybind::function>(&GameLevelManager::setLevelFeatured));
    gamelevelmanager.def("setLevelFeaturedO", [](GameLevelManager* self, int p0, int p1, bool p2) { return GameLevelManager::setLevelFeaturedO(self, p0, p1, p2); });
    gamelevelmanager.attr("setLevelFeaturedA") = GameLevelManager::setLevelFeaturedA;
    gamelevelmanager.attr("setLevelFeaturedN") = "setLevelFeatured";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setLevelFeaturedA, GameLevelManager::setLevelFeaturedH, (LPVOID*)&GameLevelManager::setLevelFeaturedO_);

    gamelevelmanager.def("setLenVal", pybind::overload_cast<GameLevelManager*, int, bool>(&GameLevelManager::setLenVal));
    gamelevelmanager.def("setLenVal", pybind::overload_cast<pybind::function>(&GameLevelManager::setLenVal));
    gamelevelmanager.def("setLenValO", [](GameLevelManager* self, int p0, bool p1) { return GameLevelManager::setLenValO(self, p0, p1); });
    gamelevelmanager.attr("setLenValA") = GameLevelManager::setLenValA;
    gamelevelmanager.attr("setLenValN") = "setLenVal";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::setLenValA, GameLevelManager::setLenValH, (LPVOID*)&GameLevelManager::setLenValO_);

    gamelevelmanager.def("isDLActive", pybind::overload_cast<GameLevelManager*, char const*>(&GameLevelManager::isDLActive));
    gamelevelmanager.def("isDLActive", pybind::overload_cast<pybind::function>(&GameLevelManager::isDLActive));
    gamelevelmanager.def("isDLActiveO", [](GameLevelManager* self, char const* p0) { return GameLevelManager::isDLActiveO(self, p0); });
    gamelevelmanager.attr("isDLActiveA") = GameLevelManager::isDLActiveA;
    gamelevelmanager.attr("isDLActiveN") = "isDLActive";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::isDLActiveA, GameLevelManager::isDLActiveH, (LPVOID*)&GameLevelManager::isDLActiveO_);

    gamelevelmanager.def("isTimeValid", pybind::overload_cast<GameLevelManager*, char const*, float>(&GameLevelManager::isTimeValid));
    gamelevelmanager.def("isTimeValid", pybind::overload_cast<pybind::function>(&GameLevelManager::isTimeValid));
    gamelevelmanager.def("isTimeValidO", [](GameLevelManager* self, char const* p0, float p1) { return GameLevelManager::isTimeValidO(self, p0, p1); });
    gamelevelmanager.attr("isTimeValidA") = GameLevelManager::isTimeValidA;
    gamelevelmanager.attr("isTimeValidN") = "isTimeValid";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::isTimeValidA, GameLevelManager::isTimeValidH, (LPVOID*)&GameLevelManager::isTimeValidO_);

    gamelevelmanager.def("sharedState", pybind::overload_cast<>(&GameLevelManager::sharedState));
    gamelevelmanager.def("sharedState", pybind::overload_cast<pybind::function>(&GameLevelManager::sharedState));
    gamelevelmanager.def("sharedStateO", []() { return GameLevelManager::sharedStateO(); });
    gamelevelmanager.attr("sharedStateA") = GameLevelManager::sharedStateA;
    gamelevelmanager.attr("sharedStateN") = "sharedState";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::sharedStateA, GameLevelManager::sharedStateH, (LPVOID*)&GameLevelManager::sharedStateO_);

    gamelevelmanager.def("uploadLevel", pybind::overload_cast<GameLevelManager*, GJGameLevel*>(&GameLevelManager::uploadLevel));
    gamelevelmanager.def("uploadLevel", pybind::overload_cast<pybind::function>(&GameLevelManager::uploadLevel));
    gamelevelmanager.def("uploadLevelO", [](GameLevelManager* self, GJGameLevel* p0) { return GameLevelManager::uploadLevelO(self, p0); });
    gamelevelmanager.attr("uploadLevelA") = GameLevelManager::uploadLevelA;
    gamelevelmanager.attr("uploadLevelN") = "uploadLevel";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::uploadLevelA, GameLevelManager::uploadLevelH, (LPVOID*)&GameLevelManager::uploadLevelO_);

    gamelevelmanager.def("isUpdateValid", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::isUpdateValid));
    gamelevelmanager.def("isUpdateValid", pybind::overload_cast<pybind::function>(&GameLevelManager::isUpdateValid));
    gamelevelmanager.def("isUpdateValidO", [](GameLevelManager* self, int p0) { return GameLevelManager::isUpdateValidO(self, p0); });
    gamelevelmanager.attr("isUpdateValidA") = GameLevelManager::isUpdateValidA;
    gamelevelmanager.attr("isUpdateValidN") = "isUpdateValid";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::isUpdateValidA, GameLevelManager::isUpdateValidH, (LPVOID*)&GameLevelManager::isUpdateValidO_);

    gamelevelmanager.def("isFollowingUser", pybind::overload_cast<GameLevelManager*, int>(&GameLevelManager::isFollowingUser));
    gamelevelmanager.def("isFollowingUser", pybind::overload_cast<pybind::function>(&GameLevelManager::isFollowingUser));
    gamelevelmanager.def("isFollowingUserO", [](GameLevelManager* self, int p0) { return GameLevelManager::isFollowingUserO(self, p0); });
    gamelevelmanager.attr("isFollowingUserA") = GameLevelManager::isFollowingUserA;
    gamelevelmanager.attr("isFollowingUserN") = "isFollowingUser";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::isFollowingUserA, GameLevelManager::isFollowingUserH, (LPVOID*)&GameLevelManager::isFollowingUserO_);

    gamelevelmanager.def("hasLikedItemFullCheck", pybind::overload_cast<GameLevelManager*, LikeItemType, int, int>(&GameLevelManager::hasLikedItemFullCheck));
    gamelevelmanager.def("hasLikedItemFullCheck", pybind::overload_cast<pybind::function>(&GameLevelManager::hasLikedItemFullCheck));
    gamelevelmanager.def("hasLikedItemFullCheckO", [](GameLevelManager* self, LikeItemType p0, int p1, int p2) { return GameLevelManager::hasLikedItemFullCheckO(self, p0, p1, p2); });
    gamelevelmanager.attr("hasLikedItemFullCheckA") = GameLevelManager::hasLikedItemFullCheckA;
    gamelevelmanager.attr("hasLikedItemFullCheckN") = "hasLikedItemFullCheck";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::hasLikedItemFullCheckA, GameLevelManager::hasLikedItemFullCheckH, (LPVOID*)&GameLevelManager::hasLikedItemFullCheckO_);

    gamelevelmanager.def("init", pybind::overload_cast<GameLevelManager*>(&GameLevelManager::init));
    gamelevelmanager.def("init", pybind::overload_cast<pybind::function>(&GameLevelManager::init));
    gamelevelmanager.def("initO", [](GameLevelManager* self) { return GameLevelManager::initO(self); });
    gamelevelmanager.attr("initA") = GameLevelManager::initA;
    gamelevelmanager.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GameLevelManager::initA, GameLevelManager::initH, (LPVOID*)&GameLevelManager::initO_);

    auto gjsearchobject = pybind::class_<GJSearchObject, cocos2d::CCNode>(m, "GJSearchObject");
    gjsearchobject.def("create", pybind::overload_cast<SearchType>(&GJSearchObject::create));
    gjsearchobject.def("create", pybind::overload_cast<pybind::function>(&GJSearchObject::create));
    gjsearchobject.def("createO", [](SearchType p0) { return GJSearchObject::createO(p0); });
    gjsearchobject.attr("createA") = GJSearchObject::createA;
    gjsearchobject.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJSearchObject::createA, GJSearchObject::createH, (LPVOID*)&GJSearchObject::createO_);

    gjsearchobject.def("create", pybind::overload_cast<SearchType, gd::string>(&GJSearchObject::create));
    gjsearchobject.def("create", pybind::overload_cast<SearchType, gd::string, gd::string, gd::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, int, int, int>(&GJSearchObject::create));
    gjsearchobject.def("init", pybind::overload_cast<GJSearchObject*, SearchType, gd::string, gd::string, gd::string, int, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, int, int, int>(&GJSearchObject::init));
    gjsearchobject.def("init", pybind::overload_cast<pybind::function>(&GJSearchObject::init));
    gjsearchobject.def("initO", [](GJSearchObject* self, SearchType p0, gd::string p1, gd::string p2, gd::string p3, int p4, bool p5, bool p6, bool p7, int p8, bool p9, bool p10, bool p11, bool p12, bool p13, bool p14, bool p15, bool p16, bool p17, bool p18, int p19, int p20, int p21) { return GJSearchObject::initO(self, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21); });
    gjsearchobject.attr("initA") = GJSearchObject::initA;
    gjsearchobject.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJSearchObject::initA, GJSearchObject::initH, (LPVOID*)&GJSearchObject::initO_);

    gjsearchobject.def("isLevelSearchObject", pybind::overload_cast<GJSearchObject*>(&GJSearchObject::isLevelSearchObject));
    gjsearchobject.def("isLevelSearchObject", pybind::overload_cast<pybind::function>(&GJSearchObject::isLevelSearchObject));
    gjsearchobject.def("isLevelSearchObjectO", [](GJSearchObject* self) { return GJSearchObject::isLevelSearchObjectO(self); });
    gjsearchobject.attr("isLevelSearchObjectA") = GJSearchObject::isLevelSearchObjectA;
    gjsearchobject.attr("isLevelSearchObjectN") = "isLevelSearchObject";
    cinnamon::hooks::hookCinnamon((PVOID)GJSearchObject::isLevelSearchObjectA, GJSearchObject::isLevelSearchObjectH, (LPVOID*)&GJSearchObject::isLevelSearchObjectO_);

    auto gjlevellist = pybind::class_<GJLevelList, cocos2d::CCNode>(m, "GJLevelList");
    gjlevellist.def("create", pybind::overload_cast<cocos2d::CCDictionary*>(&GJLevelList::create));
    gjlevellist.def("create", pybind::overload_cast<pybind::function>(&GJLevelList::create));
    gjlevellist.def("createO", [](cocos2d::CCDictionary* p0) { return GJLevelList::createO(p0); });
    gjlevellist.attr("createA") = GJLevelList::createA;
    gjlevellist.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)GJLevelList::createA, GJLevelList::createH, (LPVOID*)&GJLevelList::createO_);

    gjlevellist.def("create", pybind::overload_cast<>(&GJLevelList::create));
    gjlevellist.def("encodeWithCoder", pybind::overload_cast<GJLevelList*, DS_Dictionary*>(&GJLevelList::encodeWithCoder));
    gjlevellist.def("encodeWithCoder", pybind::overload_cast<pybind::function>(&GJLevelList::encodeWithCoder));
    gjlevellist.def("encodeWithCoderO", [](GJLevelList* self, DS_Dictionary* p0) { return GJLevelList::encodeWithCoderO(self, p0); });
    gjlevellist.attr("encodeWithCoderA") = GJLevelList::encodeWithCoderA;
    gjlevellist.attr("encodeWithCoderN") = "encodeWithCoder";
    cinnamon::hooks::hookCinnamon((PVOID)GJLevelList::encodeWithCoderA, GJLevelList::encodeWithCoderH, (LPVOID*)&GJLevelList::encodeWithCoderO_);

    gjlevellist.def("canEncode", pybind::overload_cast<GJLevelList*>(&GJLevelList::canEncode));
    gjlevellist.def("canEncode", pybind::overload_cast<pybind::function>(&GJLevelList::canEncode));
    gjlevellist.def("canEncodeO", [](GJLevelList* self) { return GJLevelList::canEncodeO(self); });
    gjlevellist.attr("canEncodeA") = GJLevelList::canEncodeA;
    gjlevellist.attr("canEncodeN") = "canEncode";
    cinnamon::hooks::hookCinnamon((PVOID)GJLevelList::canEncodeA, GJLevelList::canEncodeH, (LPVOID*)&GJLevelList::canEncodeO_);

    gjlevellist.def("init", pybind::overload_cast<GJLevelList*>(&GJLevelList::init));
    gjlevellist.def("init", pybind::overload_cast<pybind::function>(&GJLevelList::init));
    gjlevellist.def("initO", [](GJLevelList* self) { return GJLevelList::initO(self); });
    gjlevellist.attr("initA") = GJLevelList::initA;
    gjlevellist.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)GJLevelList::initA, GJLevelList::initH, (LPVOID*)&GJLevelList::initO_);

    auto likeitemlayer = pybind::class_<LikeItemLayer, FLAlertLayer>(m, "LikeItemLayer");
    likeitemlayer.def("create", pybind::overload_cast<LikeItemType, int, int>(&LikeItemLayer::create));
    likeitemlayer.def("create", pybind::overload_cast<pybind::function>(&LikeItemLayer::create));
    likeitemlayer.def("createO", [](LikeItemType p0, int p1, int p2) { return LikeItemLayer::createO(p0, p1, p2); });
    likeitemlayer.attr("createA") = LikeItemLayer::createA;
    likeitemlayer.attr("createN") = "create";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::createA, LikeItemLayer::createH, (LPVOID*)&LikeItemLayer::createO_);

    likeitemlayer.def("init", pybind::overload_cast<LikeItemLayer*, LikeItemType, int, int>(&LikeItemLayer::init));
    likeitemlayer.def("init", pybind::overload_cast<pybind::function>(&LikeItemLayer::init));
    likeitemlayer.def("initO", [](LikeItemLayer* self, LikeItemType p0, int p1, int p2) { return LikeItemLayer::initO(self, p0, p1, p2); });
    likeitemlayer.attr("initA") = LikeItemLayer::initA;
    likeitemlayer.attr("initN") = "init";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::initA, LikeItemLayer::initH, (LPVOID*)&LikeItemLayer::initO_);

    likeitemlayer.def("onLike", pybind::overload_cast<LikeItemLayer*, cocos2d::CCObject*>(&LikeItemLayer::onLike));
    likeitemlayer.def("onLike", pybind::overload_cast<pybind::function>(&LikeItemLayer::onLike));
    likeitemlayer.def("onLikeO", [](LikeItemLayer* self, cocos2d::CCObject* sender) { return LikeItemLayer::onLikeO(self, sender); });
    likeitemlayer.attr("onLikeA") = LikeItemLayer::onLikeA;
    likeitemlayer.attr("onLikeN") = "onLike";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::onLikeA, LikeItemLayer::onLikeH, (LPVOID*)&LikeItemLayer::onLikeO_);

    likeitemlayer.def("onClose", pybind::overload_cast<LikeItemLayer*, cocos2d::CCObject*>(&LikeItemLayer::onClose));
    likeitemlayer.def("onClose", pybind::overload_cast<pybind::function>(&LikeItemLayer::onClose));
    likeitemlayer.def("onCloseO", [](LikeItemLayer* self, cocos2d::CCObject* sender) { return LikeItemLayer::onCloseO(self, sender); });
    likeitemlayer.attr("onCloseA") = LikeItemLayer::onCloseA;
    likeitemlayer.attr("onCloseN") = "onClose";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::onCloseA, LikeItemLayer::onCloseH, (LPVOID*)&LikeItemLayer::onCloseO_);

    likeitemlayer.def("onDislike", pybind::overload_cast<LikeItemLayer*, cocos2d::CCObject*>(&LikeItemLayer::onDislike));
    likeitemlayer.def("onDislike", pybind::overload_cast<pybind::function>(&LikeItemLayer::onDislike));
    likeitemlayer.def("onDislikeO", [](LikeItemLayer* self, cocos2d::CCObject* sender) { return LikeItemLayer::onDislikeO(self, sender); });
    likeitemlayer.attr("onDislikeA") = LikeItemLayer::onDislikeA;
    likeitemlayer.attr("onDislikeN") = "onDislike";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::onDislikeA, LikeItemLayer::onDislikeH, (LPVOID*)&LikeItemLayer::onDislikeO_);

    likeitemlayer.def("keyBackClicked", pybind::overload_cast<LikeItemLayer*>(&LikeItemLayer::keyBackClicked));
    likeitemlayer.def("keyBackClicked", pybind::overload_cast<pybind::function>(&LikeItemLayer::keyBackClicked));
    likeitemlayer.def("keyBackClickedO", [](LikeItemLayer* self) { return LikeItemLayer::keyBackClickedO(self); });
    likeitemlayer.attr("keyBackClickedA") = LikeItemLayer::keyBackClickedA;
    likeitemlayer.attr("keyBackClickedN") = "keyBackClicked";
    cinnamon::hooks::hookCinnamon((PVOID)LikeItemLayer::keyBackClickedA, LikeItemLayer::keyBackClickedH, (LPVOID*)&LikeItemLayer::keyBackClickedO_);

    auto leveltools = pybind::class_<LevelTools>(m, "LevelTools");
    leveltools.def("base64DecodeString", pybind::overload_cast<gd::string>(&LevelTools::base64DecodeString));
    leveltools.def("base64DecodeString", pybind::overload_cast<pybind::function>(&LevelTools::base64DecodeString));
    leveltools.def("base64DecodeStringO", [](gd::string p0) { return LevelTools::base64DecodeStringO(p0); });
    leveltools.attr("base64DecodeStringA") = LevelTools::base64DecodeStringA;
    leveltools.attr("base64DecodeStringN") = "base64DecodeString";
    cinnamon::hooks::hookCinnamon((PVOID)LevelTools::base64DecodeStringA, LevelTools::base64DecodeStringH, (LPVOID*)&LevelTools::base64DecodeStringO_);


}